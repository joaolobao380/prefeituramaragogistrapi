{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInjectReducer = exports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reducerInjectors = _interopRequireDefault(require(\"./reducerInjectors\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nvar _default = function _default(_ref) {\n  var key = _ref.key,\n      reducer = _ref.reducer,\n      pluginId = _ref.pluginId;\n  return function (WrappedComponent) {\n    var ReducerInjector = /*#__PURE__*/function (_React$Component) {\n      (0, _inherits2[\"default\"])(ReducerInjector, _React$Component);\n\n      var _super = _createSuper(ReducerInjector);\n\n      function ReducerInjector(props, context) {\n        var _this;\n\n        (0, _classCallCheck2[\"default\"])(this, ReducerInjector);\n        _this = _super.call(this, props, context);\n        var reducerName = pluginId ? \"\".concat(pluginId, \"_\").concat(key) : key;\n        console.warn('Warning: strapi.injectReducer will be removed in the next major release. \\n Please update your code.');\n        (0, _reducerInjectors[\"default\"])(context.store).injectReducer(reducerName, reducer);\n        return _this;\n      }\n\n      (0, _createClass2[\"default\"])(ReducerInjector, [{\n        key: \"render\",\n        value: function render() {\n          return /*#__PURE__*/_react[\"default\"].createElement(WrappedComponent, this.props);\n        }\n      }]);\n      return ReducerInjector;\n    }(_react[\"default\"].Component);\n\n    (0, _defineProperty2[\"default\"])(ReducerInjector, \"WrappedComponent\", WrappedComponent);\n    (0, _defineProperty2[\"default\"])(ReducerInjector, \"displayName\", \"withReducer(\".concat(WrappedComponent.displayName || WrappedComponent.name || 'Component', \")\"));\n    (0, _defineProperty2[\"default\"])(ReducerInjector, \"contextType\", _reactRedux.ReactReduxContext);\n    return (0, _hoistNonReactStatics[\"default\"])(ReducerInjector, WrappedComponent);\n  };\n};\n\nexports[\"default\"] = _default;\n\nvar useInjectReducer = function useInjectReducer(_ref2) {\n  var key = _ref2.key,\n      reducer = _ref2.reducer,\n      pluginId = _ref2.pluginId;\n\n  var context = _react[\"default\"].useContext(_reactRedux.ReactReduxContext);\n\n  var reducerName = pluginId ? \"\".concat(pluginId, \"_\").concat(key) : key;\n\n  _react[\"default\"].useEffect(function () {\n    console.warn('Warning: strapi.useInjectReducer will be removed in the next major release. \\n Please update your code.');\n    (0, _reducerInjectors[\"default\"])(context.store).injectReducer(reducerName, reducer);\n  }, []);\n};\n\nexports.useInjectReducer = useInjectReducer;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/utils/injectReducer.js"],"names":["key","reducer","pluginId","WrappedComponent","ReducerInjector","props","context","reducerName","console","warn","store","injectReducer","React","Component","displayName","name","ReactReduxContext","useInjectReducer","useContext","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;eACe;AAAA,MAAGA,GAAH,QAAGA,GAAH;AAAA,MAAQC,OAAR,QAAQA,OAAR;AAAA,MAAiBC,QAAjB,QAAiBA,QAAjB;AAAA,SAAgC,UAAAC,gBAAgB,EAAI;AAAA,QAC3DC,eAD2D;AAAA;;AAAA;;AAS/D,+BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;AAC1B,kCAAMD,KAAN,EAAaC,OAAb;AACA,YAAMC,WAAW,GAAGL,QAAQ,aAAMA,QAAN,cAAkBF,GAAlB,IAA0BA,GAAtD;AAEAQ,QAAAA,OAAO,CAACC,IAAR,CACE,sGADF;AAIA,0CAAaH,OAAO,CAACI,KAArB,EAA4BC,aAA5B,CAA0CJ,WAA1C,EAAuDN,OAAvD;AAR0B;AAS3B;;AAlB8D;AAAA;AAAA,eAoB/D,kBAAS;AACP,8BAAO,gCAAC,gBAAD,EAAsB,KAAKI,KAA3B,CAAP;AACD;AAtB8D;AAAA;AAAA,MACnCO,kBAAMC,SAD6B;;AAAA,qCAC3DT,eAD2D,sBAErCD,gBAFqC;AAAA,qCAC3DC,eAD2D,uCAG3BD,gBAAgB,CAACW,WAAjB,IAClCX,gBAAgB,CAACY,IADiB,IAElC,WAL6D;AAAA,qCAC3DX,eAD2D,iBAO1CY,6BAP0C;AAyBjE,WAAO,sCAAqBZ,eAArB,EAAsCD,gBAAtC,CAAP;AACD,GA1Bc;AAAA,C;;;;AA4Bf,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAgC;AAAA,MAA7BjB,GAA6B,SAA7BA,GAA6B;AAAA,MAAxBC,OAAwB,SAAxBA,OAAwB;AAAA,MAAfC,QAAe,SAAfA,QAAe;;AACvD,MAAMI,OAAO,GAAGM,kBAAMM,UAAN,CAAiBF,6BAAjB,CAAhB;;AACA,MAAMT,WAAW,GAAGL,QAAQ,aAAMA,QAAN,cAAkBF,GAAlB,IAA0BA,GAAtD;;AAEAY,oBAAMO,SAAN,CAAgB,YAAM;AACpBX,IAAAA,OAAO,CAACC,IAAR,CACE,yGADF;AAIA,sCAAaH,OAAO,CAACI,KAArB,EAA4BC,aAA5B,CAA0CJ,WAA1C,EAAuDN,OAAvD;AACD,GAND,EAMG,EANH;AAOD,CAXD","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer, pluginId }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    static contextType = ReactReduxContext;\n\n    constructor(props, context) {\n      super(props, context);\n      const reducerName = pluginId ? `${pluginId}_${key}` : key;\n\n      console.warn(\n        'Warning: strapi.injectReducer will be removed in the next major release. \\n Please update your code.'\n      );\n\n      getInjectors(context.store).injectReducer(reducerName, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer, pluginId }) => {\n  const context = React.useContext(ReactReduxContext);\n  const reducerName = pluginId ? `${pluginId}_${key}` : key;\n\n  React.useEffect(() => {\n    console.warn(\n      'Warning: strapi.useInjectReducer will be removed in the next major release. \\n Please update your code.'\n    );\n\n    getInjectors(context.store).injectReducer(reducerName, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };\n"]},"metadata":{},"sourceType":"script"}