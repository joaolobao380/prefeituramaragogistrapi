{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _getTrad = _interopRequireDefault(require(\"../../../utils/getTrad\"));\n\nvar _component = require(\"../component\");\n\nvar _nameField = require(\"./nameField\");\n\nvar _uiHelpers = _interopRequireDefault(require(\"./uiHelpers\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar baseForm = {\n  component: function component(data, step) {\n    if (step === '1') {\n      var itemsToConcat = data.createComponent === true ? [[_uiHelpers[\"default\"].spacer]].concat(_component.componentForm.base('componentToCreate.')) : [[_uiHelpers[\"default\"].spacer]];\n      return {\n        items: [[_component.componentField]].concat((0, _toConsumableArray2[\"default\"])(itemsToConcat))\n      };\n    }\n\n    return {\n      items: [[_nameField.nameField, {\n        name: 'component',\n        type: 'componentSelect',\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attributes.select-component')\n        },\n        isMultiple: false\n      }], [{\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n        },\n        name: 'repeatable',\n        type: 'booleanBox',\n        size: 12,\n        options: [{\n          headerId: (0, _getTrad[\"default\"])('form.attribute.component.option.repeatable'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.component.option.repeatable.description'),\n          value: true\n        }, {\n          headerId: (0, _getTrad[\"default\"])('form.attribute.component.option.single'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.component.option.single.description'),\n          value: false\n        }],\n        validations: {}\n      }], [_uiHelpers[\"default\"].spacer]]\n    };\n  },\n  date: function date() {\n    return {\n      items: [[_nameField.nameField, {\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n        },\n        name: 'type',\n        type: 'select',\n        options: [{\n          id: 'components.InputSelect.option.placeholder',\n          value: ''\n        }, {\n          id: 'form.attribute.item.date.type.date',\n          value: 'date'\n        }, {\n          id: 'form.attribute.item.date.type.datetime',\n          value: 'datetime'\n        }, // Not sure the ctm supports that one\n        // {\n        //   id: 'form.attribute.item.date.type.timestamp',\n        //   value: 'timestamp',\n        // },\n        {\n          id: 'form.attribute.item.date.type.time',\n          value: 'time'\n        }].map(function (_ref, index) {\n          var id = _ref.id,\n              value = _ref.value;\n          var disabled = index === 0;\n          var tradId = index === 0 ? id : (0, _getTrad[\"default\"])(id);\n          return /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n            id: tradId,\n            key: id\n          }, function (msg) {\n            return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n              disabled: disabled,\n              hidden: disabled,\n              value: value\n            }, msg);\n          });\n        }),\n        validations: {\n          required: true\n        }\n      }]]\n    };\n  },\n  enumeration: function enumeration() {\n    return {\n      items: [[_nameField.nameField], [{\n        autoFocus: false,\n        name: 'enum',\n        type: 'textarea',\n        size: 8,\n        label: {\n          id: (0, _getTrad[\"default\"])('form.attribute.item.enumeration.rules')\n        },\n        placeholder: {\n          id: (0, _getTrad[\"default\"])('form.attribute.item.enumeration.placeholder')\n        },\n        validations: {\n          required: true\n        }\n      }]]\n    };\n  },\n  media: function media() {\n    return {\n      items: [[_nameField.nameField], [{\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n        },\n        name: 'multiple',\n        size: 12,\n        type: 'booleanBox',\n        options: [{\n          headerId: (0, _getTrad[\"default\"])('form.attribute.media.option.multiple'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.media.option.multiple.description'),\n          value: true\n        }, {\n          headerId: (0, _getTrad[\"default\"])('form.attribute.media.option.single'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.media.option.single.description'),\n          value: false\n        }],\n        validations: {}\n      }], [_uiHelpers[\"default\"].spacerMedium]]\n    };\n  },\n  number: function number() {\n    return {\n      items: [[_nameField.nameField, {\n        label: {\n          id: (0, _getTrad[\"default\"])('form.attribute.item.number.type')\n        },\n        name: 'type',\n        type: 'select',\n        options: [{\n          id: 'components.InputSelect.option.placeholder',\n          value: ''\n        }, {\n          id: 'form.attribute.item.number.type.integer',\n          value: 'integer'\n        }, {\n          id: 'form.attribute.item.number.type.biginteger',\n          value: 'biginteger'\n        }, {\n          id: 'form.attribute.item.number.type.decimal',\n          value: 'decimal'\n        }, {\n          id: 'form.attribute.item.number.type.float',\n          value: 'float'\n        }].map(function (_ref2, index) {\n          var id = _ref2.id,\n              value = _ref2.value;\n          var disabled = index === 0;\n          var tradId = index === 0 ? id : (0, _getTrad[\"default\"])(id);\n          return /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n            id: tradId,\n            key: id\n          }, function (msg) {\n            return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n              disabled: disabled,\n              hidden: disabled,\n              value: value\n            }, msg);\n          });\n        }),\n        validations: {\n          required: true\n        }\n      }]]\n    };\n  },\n  relation: function relation() {\n    return {\n      items: [[{\n        type: 'relation'\n      }]]\n    };\n  },\n  string: function string() {\n    return {\n      items: [[_nameField.nameField], [{\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n        },\n        name: 'type',\n        size: 12,\n        type: 'booleanBox',\n        options: [{\n          headerId: (0, _getTrad[\"default\"])('form.attribute.text.option.short-text'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.text.option.short-text.description'),\n          value: 'string'\n        }, {\n          headerId: (0, _getTrad[\"default\"])('form.attribute.text.option.long-text'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.text.option.long-text.description'),\n          value: 'text'\n        }],\n        validations: {}\n      }], [_uiHelpers[\"default\"].spacerMedium]]\n    };\n  },\n  text: function text() {\n    return {\n      items: [[_nameField.nameField], [{\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n        },\n        name: 'type',\n        size: 12,\n        type: 'booleanBox',\n        options: [{\n          headerId: (0, _getTrad[\"default\"])('form.attribute.text.option.short-text'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.text.option.short-text.description'),\n          value: 'string'\n        }, {\n          headerId: (0, _getTrad[\"default\"])('form.attribute.text.option.long-text'),\n          descriptionId: (0, _getTrad[\"default\"])('form.attribute.text.option.long-text.description'),\n          value: 'text'\n        }],\n        validations: {}\n      }], [_uiHelpers[\"default\"].spacerMedium]]\n    };\n  },\n  uid: function uid(data, step, attributes) {\n    var options = Object.keys(attributes).filter(function (key) {\n      return ['string', 'text'].includes(attributes[key].type);\n    }).map(function (key) {\n      return {\n        id: key,\n        value: key\n      };\n    });\n    return {\n      items: [[_objectSpread(_objectSpread({}, _nameField.nameField), {}, {\n        placeholder: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.form.base.name.placeholder')\n        }\n      }), {\n        label: {\n          id: (0, _getTrad[\"default\"])('modalForm.attribute.target-field')\n        },\n        name: 'targetField',\n        type: 'select',\n        options: [{\n          id: (0, _getTrad[\"default\"])('none'),\n          value: ''\n        }].concat((0, _toConsumableArray2[\"default\"])(options)).map(function (option, index) {\n          return (\n            /*#__PURE__*/\n            // eslint-disable-next-line react/no-array-index-key\n            _react[\"default\"].createElement(_react.Fragment, {\n              key: index\n            }, index === 0 ? /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n              id: option.id\n            }, function (msg) {\n              return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                value: option.value\n              }, msg);\n            }) : /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n              value: option.value\n            }, option.value))\n          );\n        }),\n        validations: {\n          required: true\n        }\n      }]]\n    };\n  }\n};\nvar _default = baseForm;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/containers/FormModal/attributes/baseForm.js"],"names":["baseForm","component","data","step","itemsToConcat","createComponent","uiHelpers","spacer","concat","componentForm","base","items","componentField","nameField","name","type","label","id","isMultiple","size","options","headerId","descriptionId","value","validations","date","map","index","disabled","tradId","msg","required","enumeration","autoFocus","placeholder","media","spacerMedium","number","relation","string","text","uid","attributes","Object","keys","filter","key","includes","option"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport getTrad from '../../../utils/getTrad';\nimport { componentField, componentForm } from '../component';\nimport { nameField } from './nameField';\nimport uiHelpers from './uiHelpers';\n\nconst baseForm = {\n  component: (data, step) => {\n    if (step === '1') {\n      const itemsToConcat =\n        data.createComponent === true\n          ? [[uiHelpers.spacer]].concat(componentForm.base('componentToCreate.'))\n          : [[uiHelpers.spacer]];\n\n      return {\n        items: [[componentField], ...itemsToConcat],\n      };\n    }\n\n    return {\n      items: [\n        [\n          nameField,\n          {\n            name: 'component',\n            type: 'componentSelect',\n            label: {\n              id: getTrad('modalForm.attributes.select-component'),\n            },\n            isMultiple: false,\n          },\n        ],\n        [\n          {\n            label: {\n              id: getTrad('modalForm.attribute.text.type-selection'),\n            },\n            name: 'repeatable',\n            type: 'booleanBox',\n            size: 12,\n            options: [\n              {\n                headerId: getTrad('form.attribute.component.option.repeatable'),\n                descriptionId: getTrad('form.attribute.component.option.repeatable.description'),\n                value: true,\n              },\n              {\n                headerId: getTrad('form.attribute.component.option.single'),\n                descriptionId: getTrad('form.attribute.component.option.single.description'),\n                value: false,\n              },\n            ],\n            validations: {},\n          },\n        ],\n        [uiHelpers.spacer],\n      ],\n    };\n  },\n  date: () => {\n    return {\n      items: [\n        [\n          nameField,\n          {\n            label: {\n              id: getTrad('modalForm.attribute.text.type-selection'),\n            },\n            name: 'type',\n            type: 'select',\n            options: [\n              { id: 'components.InputSelect.option.placeholder', value: '' },\n              {\n                id: 'form.attribute.item.date.type.date',\n                value: 'date',\n              },\n              {\n                id: 'form.attribute.item.date.type.datetime',\n                value: 'datetime',\n              },\n              // Not sure the ctm supports that one\n              // {\n              //   id: 'form.attribute.item.date.type.timestamp',\n              //   value: 'timestamp',\n              // },\n              { id: 'form.attribute.item.date.type.time', value: 'time' },\n            ].map(({ id, value }, index) => {\n              const disabled = index === 0;\n              const tradId = index === 0 ? id : getTrad(id);\n\n              return (\n                <FormattedMessage id={tradId} key={id}>\n                  {msg => (\n                    <option disabled={disabled} hidden={disabled} value={value}>\n                      {msg}\n                    </option>\n                  )}\n                </FormattedMessage>\n              );\n            }),\n            validations: {\n              required: true,\n            },\n          },\n        ],\n      ],\n    };\n  },\n  enumeration: () => {\n    return {\n      items: [\n        [nameField],\n        [\n          {\n            autoFocus: false,\n            name: 'enum',\n            type: 'textarea',\n            size: 8,\n            label: {\n              id: getTrad('form.attribute.item.enumeration.rules'),\n            },\n            placeholder: {\n              id: getTrad('form.attribute.item.enumeration.placeholder'),\n            },\n            validations: {\n              required: true,\n            },\n          },\n        ],\n      ],\n    };\n  },\n  media: () => {\n    return {\n      items: [\n        [nameField],\n        [\n          {\n            label: { id: getTrad('modalForm.attribute.text.type-selection') },\n            name: 'multiple',\n            size: 12,\n            type: 'booleanBox',\n            options: [\n              {\n                headerId: getTrad('form.attribute.media.option.multiple'),\n                descriptionId: getTrad('form.attribute.media.option.multiple.description'),\n                value: true,\n              },\n              {\n                headerId: getTrad('form.attribute.media.option.single'),\n                descriptionId: getTrad('form.attribute.media.option.single.description'),\n                value: false,\n              },\n            ],\n            validations: {},\n          },\n        ],\n        [uiHelpers.spacerMedium],\n      ],\n    };\n  },\n  number: () => {\n    return {\n      items: [\n        [\n          nameField,\n          {\n            label: {\n              id: getTrad('form.attribute.item.number.type'),\n            },\n            name: 'type',\n            type: 'select',\n            options: [\n              { id: 'components.InputSelect.option.placeholder', value: '' },\n              {\n                id: 'form.attribute.item.number.type.integer',\n                value: 'integer',\n              },\n              {\n                id: 'form.attribute.item.number.type.biginteger',\n                value: 'biginteger',\n              },\n              {\n                id: 'form.attribute.item.number.type.decimal',\n                value: 'decimal',\n              },\n              { id: 'form.attribute.item.number.type.float', value: 'float' },\n            ].map(({ id, value }, index) => {\n              const disabled = index === 0;\n              const tradId = index === 0 ? id : getTrad(id);\n\n              return (\n                <FormattedMessage id={tradId} key={id}>\n                  {msg => (\n                    <option disabled={disabled} hidden={disabled} value={value}>\n                      {msg}\n                    </option>\n                  )}\n                </FormattedMessage>\n              );\n            }),\n            validations: {\n              required: true,\n            },\n          },\n        ],\n      ],\n    };\n  },\n  relation: () => {\n    return {\n      items: [\n        [\n          {\n            type: 'relation',\n          },\n        ],\n      ],\n    };\n  },\n  string: () => {\n    return {\n      items: [\n        [nameField],\n        [\n          {\n            label: { id: getTrad('modalForm.attribute.text.type-selection') },\n            name: 'type',\n            size: 12,\n            type: 'booleanBox',\n            options: [\n              {\n                headerId: getTrad('form.attribute.text.option.short-text'),\n                descriptionId: getTrad('form.attribute.text.option.short-text.description'),\n                value: 'string',\n              },\n              {\n                headerId: getTrad('form.attribute.text.option.long-text'),\n                descriptionId: getTrad('form.attribute.text.option.long-text.description'),\n                value: 'text',\n              },\n            ],\n            validations: {},\n          },\n        ],\n        [uiHelpers.spacerMedium],\n      ],\n    };\n  },\n  text: () => {\n    return {\n      items: [\n        [nameField],\n        [\n          {\n            label: { id: getTrad('modalForm.attribute.text.type-selection') },\n            name: 'type',\n            size: 12,\n            type: 'booleanBox',\n            options: [\n              {\n                headerId: getTrad('form.attribute.text.option.short-text'),\n                descriptionId: getTrad('form.attribute.text.option.short-text.description'),\n                value: 'string',\n              },\n              {\n                headerId: getTrad('form.attribute.text.option.long-text'),\n                descriptionId: getTrad('form.attribute.text.option.long-text.description'),\n                value: 'text',\n              },\n            ],\n            validations: {},\n          },\n        ],\n        [uiHelpers.spacerMedium],\n      ],\n    };\n  },\n  uid: (data, step, attributes) => {\n    const options = Object.keys(attributes)\n      .filter(key => ['string', 'text'].includes(attributes[key].type))\n      .map(key => ({ id: key, value: key }));\n\n    return {\n      items: [\n        [\n          {\n            ...nameField,\n            placeholder: {\n              id: getTrad('modalForm.attribute.form.base.name.placeholder'),\n            },\n          },\n          {\n            label: {\n              id: getTrad('modalForm.attribute.target-field'),\n            },\n            name: 'targetField',\n            type: 'select',\n            options: [{ id: getTrad('none'), value: '' }, ...options].map((option, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Fragment key={index}>\n                {index === 0 ? (\n                  <FormattedMessage id={option.id}>\n                    {msg => <option value={option.value}>{msg}</option>}\n                  </FormattedMessage>\n                ) : (\n                  <option value={option.value}>{option.value}</option>\n                )}\n              </Fragment>\n            )),\n            validations: {\n              required: true,\n            },\n          },\n        ],\n      ],\n    };\n  },\n};\n\nexport default baseForm;\n"]},"metadata":{},"sourceType":"script"}