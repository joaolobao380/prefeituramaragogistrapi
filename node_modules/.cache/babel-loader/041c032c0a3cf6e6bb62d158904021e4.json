{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _getTrad = _interopRequireDefault(require(\"../../../utils/getTrad\"));\n\nvar _common = require(\"./validation/common\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar types = {\n  date: function date(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type()\n    };\n    return yup.object(shape);\n  },\n  datetime: function datetime(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type()\n    };\n    return yup.object(shape);\n  },\n  time: function time(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type()\n    };\n    return yup.object(shape);\n  },\n  \"default\": function _default(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type()\n    };\n    return yup.object(shape);\n  },\n  biginteger: function biginteger(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      \"default\": yup.string().nullable().matches(/^\\d*$/),\n      unique: _common.validators.unique(),\n      required: _common.validators.required(),\n      max: yup.string().nullable().matches(/^\\d*$/, _strapiHelperPlugin.translatedErrors.regex),\n      min: yup.string().nullable().test(_common.isMinSuperiorThanMax).matches(/^\\d*$/, _strapiHelperPlugin.translatedErrors.regex)\n    };\n    return yup.object(shape);\n  },\n  \"boolean\": function boolean(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      \"default\": yup[\"boolean\"]().nullable(),\n      required: _common.validators.required(),\n      unique: _common.validators.unique()\n    };\n    return yup.object(shape);\n  },\n  component: function component(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      required: _common.validators.required(),\n      max: _common.validators.max(),\n      min: _common.validators.min(),\n      component: yup.string().required(_strapiHelperPlugin.translatedErrors.required)\n    };\n    return yup.object(shape);\n  },\n  decimal: function decimal(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      \"default\": yup.number(),\n      required: _common.validators.required(),\n      max: yup.number(),\n      min: yup.number().test(_common.isMinSuperiorThanMax)\n    };\n    return yup.object(shape);\n  },\n  dynamiczone: function dynamiczone(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      required: _common.validators.required(),\n      max: _common.validators.max(),\n      min: _common.validators.min()\n    };\n    return yup.object(shape);\n  },\n  email: function email(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      \"default\": yup.string().email().nullable(),\n      unique: _common.validators.unique(),\n      required: _common.validators.required(),\n      maxLength: _common.validators.maxLength(),\n      minLength: _common.validators.minLength()\n    };\n    return yup.object(shape);\n  },\n  enumeration: function enumeration(usedAttributeNames, reservedNames) {\n    var ENUM_REGEX = new RegExp('^[_A-Za-z][_0-9A-Za-z]*$');\n    var shape = {\n      name: yup.string().test((0, _common.alreadyUsedAttributeNames)(usedAttributeNames)).test((0, _common.isNameAllowed)(reservedNames)).matches(ENUM_REGEX, _strapiHelperPlugin.translatedErrors.regex).required(_strapiHelperPlugin.translatedErrors.required),\n      type: _common.validators.type(),\n      \"default\": _common.validators[\"default\"](),\n      unique: _common.validators.unique(),\n      required: _common.validators.required(),\n      \"enum\": yup.array().of(yup.string()).min(1, _strapiHelperPlugin.translatedErrors.min).test({\n        name: 'areEnumValuesUnique',\n        message: (0, _getTrad[\"default\"])('error.validation.enum-duplicate'),\n        test: function test(values) {\n          var filtered = (0, _toConsumableArray2[\"default\"])(new Set(values));\n          return filtered.length === values.length;\n        }\n      }).test({\n        name: 'valuesMatchesRegex',\n        message: _strapiHelperPlugin.translatedErrors.regex,\n        test: function test(values) {\n          return values.every(function (val) {\n            return val === '' || ENUM_REGEX.test(val);\n          });\n        }\n      }).test({\n        name: 'doesNotHaveEmptyValues',\n        message: (0, _getTrad[\"default\"])('error.validation.enum-empty-string'),\n        test: function test(values) {\n          return !values.some(function (val) {\n            return val === '';\n          });\n        }\n      }),\n      enumName: yup.string().nullable()\n    };\n    return yup.object(shape);\n  },\n  \"float\": function float(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      required: _common.validators.required(),\n      \"default\": yup.number(),\n      max: yup.number(),\n      min: yup.number().test(_common.isMinSuperiorThanMax)\n    };\n    return yup.object(shape);\n  },\n  integer: function integer(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      \"default\": yup.number().integer(),\n      unique: _common.validators.unique(),\n      required: _common.validators.required(),\n      max: _common.validators.max(),\n      min: _common.validators.min()\n    };\n    return yup.object(shape);\n  },\n  json: function json(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      required: _common.validators.required(),\n      unique: _common.validators.unique()\n    };\n    return yup.object(shape);\n  },\n  media: function media(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      multiple: yup[\"boolean\"](),\n      required: _common.validators.required(),\n      allowedTypes: yup.array().of(yup.string().oneOf(['images', 'videos', 'files'])).min(1).nullable()\n    };\n    return yup.object(shape);\n  },\n  password: function password(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      \"default\": _common.validators[\"default\"](),\n      unique: _common.validators.unique(),\n      required: _common.validators.required(),\n      maxLength: _common.validators.maxLength(),\n      minLength: _common.validators.minLength()\n    };\n    return yup.object(shape);\n  },\n  relation: function relation(usedAttributeNames, reservedNames, alreadyTakenTargetAttributes, _ref) {\n    var initialData = _ref.initialData,\n        modifiedData = _ref.modifiedData;\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      target: yup.string().required(_strapiHelperPlugin.translatedErrors.required),\n      nature: yup.string().required(),\n      dominant: yup[\"boolean\"]().nullable(),\n      unique: yup[\"boolean\"]().nullable(),\n      targetAttribute: yup.lazy(function () {\n        var schema = yup.string().test((0, _common.isNameAllowed)(reservedNames));\n        var initialForbiddenName = [].concat((0, _toConsumableArray2[\"default\"])(alreadyTakenTargetAttributes), [modifiedData.name]);\n        var forbiddenTargetAttributeName = initialForbiddenName.filter(function (val) {\n          return val !== initialData.targetAttribute;\n        });\n\n        if (!['oneWay', 'manyWay'].includes(modifiedData.nature)) {\n          schema = schema.matches(_common.NAME_REGEX, _strapiHelperPlugin.translatedErrors.regex);\n        }\n\n        return schema.test({\n          name: 'forbiddenTargetAttributeName',\n          message: (0, _getTrad[\"default\"])('error.validation.relation.targetAttribute-taken'),\n          test: function test(value) {\n            if (!value) {\n              return false;\n            }\n\n            return !forbiddenTargetAttributeName.includes(value);\n          }\n        }).required(_strapiHelperPlugin.translatedErrors.required);\n      })\n    };\n    return yup.object(shape);\n  },\n  richtext: function richtext(usedAttributeNames, reservedNames) {\n    var shape = {\n      name: _common.validators.name(usedAttributeNames, reservedNames),\n      type: _common.validators.type(),\n      \"default\": _common.validators[\"default\"](),\n      unique: _common.validators.unique(),\n      required: _common.validators.required(),\n      maxLength: _common.validators.maxLength(),\n      minLength: _common.validators.minLength()\n    };\n    return yup.object(shape);\n  },\n  string: function string(usedAttributeNames, reservedNames) {\n    var shape = (0, _common.createTextShape)(usedAttributeNames, reservedNames);\n    return yup.object(shape);\n  },\n  text: function text(usedAttributeNames, reservedNames) {\n    var shape = (0, _common.createTextShape)(usedAttributeNames, reservedNames);\n    return yup.object(shape);\n  },\n  uid: function uid(usedAttributeNames, reservedNames) {\n    var shape = (0, _common.createTextShape)(usedAttributeNames, reservedNames);\n    return yup.object(shape);\n  }\n};\nvar _default2 = types;\nexports[\"default\"] = _default2;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/containers/FormModal/attributes/types.js"],"names":["types","date","usedAttributeNames","reservedNames","shape","name","validators","type","yup","object","datetime","time","biginteger","string","nullable","matches","unique","required","max","errorsTrads","regex","min","test","isMinSuperiorThanMax","component","decimal","number","dynamiczone","email","maxLength","minLength","enumeration","ENUM_REGEX","RegExp","array","of","message","values","filtered","Set","length","every","val","some","enumName","integer","json","media","multiple","allowedTypes","oneOf","password","relation","alreadyTakenTargetAttributes","initialData","modifiedData","target","nature","dominant","targetAttribute","lazy","schema","initialForbiddenName","forbiddenTargetAttributeName","filter","includes","NAME_REGEX","value","richtext","text","uid"],"mappings":"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","sourcesContent":["import * as yup from 'yup';\nimport { translatedErrors as errorsTrads } from 'strapi-helper-plugin';\nimport getTrad from '../../../utils/getTrad';\nimport {\n  alreadyUsedAttributeNames,\n  createTextShape,\n  isMinSuperiorThanMax,\n  isNameAllowed,\n  validators,\n  NAME_REGEX,\n} from './validation/common';\n\nconst types = {\n  date: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  datetime: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  time: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  default: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  biginteger: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup\n        .string()\n        .nullable()\n        .matches(/^\\d*$/),\n      unique: validators.unique(),\n      required: validators.required(),\n      max: yup\n        .string()\n        .nullable()\n        .matches(/^\\d*$/, errorsTrads.regex),\n      min: yup\n        .string()\n        .nullable()\n        .test(isMinSuperiorThanMax)\n        .matches(/^\\d*$/, errorsTrads.regex),\n    };\n\n    return yup.object(shape);\n  },\n  boolean: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      default: yup.boolean().nullable(),\n      required: validators.required(),\n      unique: validators.unique(),\n    };\n\n    return yup.object(shape);\n  },\n  component: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n      component: yup.string().required(errorsTrads.required),\n    };\n\n    return yup.object(shape);\n  },\n  decimal: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.number(),\n      required: validators.required(),\n      max: yup.number(),\n      min: yup.number().test(isMinSuperiorThanMax),\n    };\n\n    return yup.object(shape);\n  },\n  dynamiczone: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n    };\n\n    return yup.object(shape);\n  },\n  email: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup\n        .string()\n        .email()\n        .nullable(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  enumeration: (usedAttributeNames, reservedNames) => {\n    const ENUM_REGEX = new RegExp('^[_A-Za-z][_0-9A-Za-z]*$');\n\n    const shape = {\n      name: yup\n        .string()\n        .test(alreadyUsedAttributeNames(usedAttributeNames))\n        .test(isNameAllowed(reservedNames))\n        .matches(ENUM_REGEX, errorsTrads.regex)\n        .required(errorsTrads.required),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      enum: yup\n        .array()\n        .of(yup.string())\n        .min(1, errorsTrads.min)\n        .test({\n          name: 'areEnumValuesUnique',\n          message: getTrad('error.validation.enum-duplicate'),\n          test: values => {\n            const filtered = [...new Set(values)];\n\n            return filtered.length === values.length;\n          },\n        })\n        .test({\n          name: 'valuesMatchesRegex',\n          message: errorsTrads.regex,\n          test: values => {\n            return values.every(val => val === '' || ENUM_REGEX.test(val));\n          },\n        })\n        .test({\n          name: 'doesNotHaveEmptyValues',\n          message: getTrad('error.validation.enum-empty-string'),\n          test: values => !values.some(val => val === ''),\n        }),\n      enumName: yup.string().nullable(),\n    };\n\n    return yup.object(shape);\n  },\n  float: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      default: yup.number(),\n      max: yup.number(),\n      min: yup.number().test(isMinSuperiorThanMax),\n    };\n\n    return yup.object(shape);\n  },\n  integer: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.number().integer(),\n      unique: validators.unique(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n    };\n\n    return yup.object(shape);\n  },\n  json: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      unique: validators.unique(),\n    };\n\n    return yup.object(shape);\n  },\n  media: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      multiple: yup.boolean(),\n      required: validators.required(),\n      allowedTypes: yup\n        .array()\n        .of(yup.string().oneOf(['images', 'videos', 'files']))\n        .min(1)\n        .nullable(),\n    };\n\n    return yup.object(shape);\n  },\n  password: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  relation: (\n    usedAttributeNames,\n    reservedNames,\n    alreadyTakenTargetAttributes,\n    { initialData, modifiedData }\n  ) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      target: yup.string().required(errorsTrads.required),\n      nature: yup.string().required(),\n      dominant: yup.boolean().nullable(),\n      unique: yup.boolean().nullable(),\n      targetAttribute: yup.lazy(() => {\n        let schema = yup.string().test(isNameAllowed(reservedNames));\n        const initialForbiddenName = [...alreadyTakenTargetAttributes, modifiedData.name];\n\n        let forbiddenTargetAttributeName = initialForbiddenName.filter(\n          val => val !== initialData.targetAttribute\n        );\n\n        if (!['oneWay', 'manyWay'].includes(modifiedData.nature)) {\n          schema = schema.matches(NAME_REGEX, errorsTrads.regex);\n        }\n\n        return schema\n          .test({\n            name: 'forbiddenTargetAttributeName',\n            message: getTrad('error.validation.relation.targetAttribute-taken'),\n            test: value => {\n              if (!value) {\n                return false;\n              }\n\n              return !forbiddenTargetAttributeName.includes(value);\n            },\n          })\n          .required(errorsTrads.required);\n      }),\n    };\n\n    return yup.object(shape);\n  },\n  richtext: (usedAttributeNames, reservedNames) => {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  string: (usedAttributeNames, reservedNames) => {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n  text: (usedAttributeNames, reservedNames) => {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n  uid: (usedAttributeNames, reservedNames) => {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n};\n\nexport default types;\n"]},"metadata":{},"sourceType":"script"}