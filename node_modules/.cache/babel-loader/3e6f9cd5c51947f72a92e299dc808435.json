{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _constants = _interopRequireDefault(require(\"ee_else_ce/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/utils/constants\"));\n\nvar _hooks = require(\"../../../../../hooks\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _CheckboxWithCondition = _interopRequireDefault(require(\"../../../CheckboxWithCondition\"));\n\nvar _Chevron = _interopRequireDefault(require(\"../../../Chevron\"));\n\nvar _HiddenAction = _interopRequireDefault(require(\"../../../HiddenAction\"));\n\nvar _RequiredSign = _interopRequireDefault(require(\"../../../RequiredSign\"));\n\nvar _RowLabelWithCheckbox = _interopRequireDefault(require(\"../../../RowLabelWithCheckbox\"));\n\nvar _SubActionRow = _interopRequireDefault(require(\"../SubActionRow\"));\n\nvar _Wrapper = _interopRequireDefault(require(\"./Wrapper\"));\n\nvar _getRowLabelCheckboxeState = _interopRequireDefault(require(\"./utils/getRowLabelCheckboxeState\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ActionRow = function ActionRow(_ref) {\n  var childrenForm = _ref.childrenForm,\n      label = _ref.label,\n      isFormDisabled = _ref.isFormDisabled,\n      name = _ref.name,\n      required = _ref.required,\n      pathToData = _ref.pathToData,\n      propertyActions = _ref.propertyActions,\n      propertyName = _ref.propertyName;\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      rowToOpen = _useState2[0],\n      setRowToOpen = _useState2[1];\n\n  var _usePermissionsDataMa = (0, _hooks.usePermissionsDataManager)(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeCollectionTypeLeftActionRowCheckbox = _usePermissionsDataMa.onChangeCollectionTypeLeftActionRowCheckbox,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var isActive = rowToOpen === name;\n  var recursiveChildren = (0, _react.useMemo)(function () {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n  var isCollapsable = recursiveChildren.length > 0;\n  var handleClick = (0, _react.useCallback)(function () {\n    if (isCollapsable) {\n      setRowToOpen(function (prev) {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  var handleChangeLeftRowCheckbox = function handleChangeLeftRowCheckbox(_ref2) {\n    var value = _ref2.target.value;\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  var _useMemo = (0, _react.useMemo)(function () {\n    return (0, _getRowLabelCheckboxeState[\"default\"])(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]),\n      hasAllActionsSelected = _useMemo.hasAllActionsSelected,\n      hasSomeActionsSelected = _useMemo.hasSomeActionsSelected;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_Wrapper[\"default\"], {\n    alignItems: \"center\",\n    isCollapsable: isCollapsable,\n    isActive: isActive\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    style: {\n      flex: 1\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    left: true,\n    size: \"sm\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_RowLabelWithCheckbox[\"default\"], {\n    width: \"15rem\",\n    onChange: handleChangeLeftRowCheckbox,\n    onClick: handleClick,\n    isCollapsable: isCollapsable,\n    isFormDisabled: isFormDisabled,\n    label: label,\n    someChecked: hasSomeActionsSelected,\n    value: hasAllActionsSelected\n  }, required && /*#__PURE__*/_react[\"default\"].createElement(_RequiredSign[\"default\"], null), /*#__PURE__*/_react[\"default\"].createElement(_Chevron[\"default\"], {\n    icon: isActive ? 'caret-up' : 'caret-down'\n  })), /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    style: {\n      flex: 1\n    }\n  }, propertyActions.map(function (_ref3) {\n    var label = _ref3.label,\n        isActionRelatedToCurrentProperty = _ref3.isActionRelatedToCurrentProperty,\n        actionId = _ref3.actionId;\n\n    if (!isActionRelatedToCurrentProperty) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_HiddenAction[\"default\"], {\n        key: label\n      });\n    }\n\n    var checkboxName = [].concat((0, _toConsumableArray2[\"default\"])(pathToData.split('..')), [actionId, 'properties', propertyName, name]);\n\n    if (!isCollapsable) {\n      var checkboxValue = (0, _lodash.get)(modifiedData, checkboxName, false);\n      return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWithCondition[\"default\"], {\n        key: actionId,\n        disabled: isFormDisabled || _constants[\"default\"],\n        name: checkboxName.join('..'),\n        onChange: onChangeSimpleCheckbox,\n        value: checkboxValue\n      });\n    }\n\n    var data = (0, _lodash.get)(modifiedData, checkboxName, {});\n\n    var _getCheckboxState = (0, _utils.getCheckboxState)(data),\n        hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n        hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected;\n\n    return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWithCondition[\"default\"], {\n      key: label,\n      disabled: isFormDisabled || _constants[\"default\"],\n      name: checkboxName.join('..'),\n      onChange: onChangeParentCheckbox,\n      value: hasAllActionsSelected,\n      someChecked: hasSomeActionsSelected\n    });\n  })))), isActive && /*#__PURE__*/_react[\"default\"].createElement(_SubActionRow[\"default\"], {\n    childrenForm: recursiveChildren,\n    isFormDisabled: isFormDisabled,\n    parentName: name,\n    pathToDataFromActionRow: pathToData,\n    propertyName: propertyName,\n    propertyActions: propertyActions,\n    recursiveLevel: 0\n  }));\n};\n\nActionRow.defaultProps = {\n  childrenForm: [],\n  required: false\n};\nActionRow.propTypes = {\n  childrenForm: _propTypes[\"default\"].array,\n  label: _propTypes[\"default\"].string.isRequired,\n  isFormDisabled: _propTypes[\"default\"].bool.isRequired,\n  name: _propTypes[\"default\"].string.isRequired,\n  pathToData: _propTypes[\"default\"].string.isRequired,\n  propertyActions: _propTypes[\"default\"].array.isRequired,\n  propertyName: _propTypes[\"default\"].string.isRequired,\n  required: _propTypes[\"default\"].bool\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(ActionRow);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/index.js"],"names":["ActionRow","childrenForm","label","isFormDisabled","name","required","pathToData","propertyActions","propertyName","rowToOpen","setRowToOpen","modifiedData","onChangeCollectionTypeLeftActionRowCheckbox","onChangeParentCheckbox","onChangeSimpleCheckbox","isActive","recursiveChildren","Array","isArray","isCollapsable","length","handleClick","prev","handleChangeLeftRowCheckbox","value","target","hasAllActionsSelected","hasSomeActionsSelected","flex","map","isActionRelatedToCurrentProperty","actionId","checkboxName","split","checkboxValue","IS_DISABLED","join","data","defaultProps","propTypes","PropTypes","array","string","isRequired","bool"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OASZ;AAAA,MARJC,YAQI,QARJA,YAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,cAMI,QANJA,cAMI;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,UAGI,QAHJA,UAGI;AAAA,MAFJC,eAEI,QAFJA,eAEI;AAAA,MADJC,YACI,QADJA,YACI;;AACJ,kBAAkC,qBAAS,IAAT,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,8BAKI,uCALJ;AAAA,MACEC,YADF,yBACEA,YADF;AAAA,MAEEC,2CAFF,yBAEEA,2CAFF;AAAA,MAGEC,sBAHF,yBAGEA,sBAHF;AAAA,MAIEC,sBAJF,yBAIEA,sBAJF;;AAOA,MAAMC,QAAQ,GAAGN,SAAS,KAAKL,IAA/B;AAEA,MAAMY,iBAAiB,GAAG,oBAAQ,YAAM;AACtC,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcjB,YAAd,CAAL,EAAkC;AAChC,aAAO,EAAP;AACD;;AAED,WAAOA,YAAP;AACD,GANyB,EAMvB,CAACA,YAAD,CANuB,CAA1B;AAQA,MAAMkB,aAAa,GAAGH,iBAAiB,CAACI,MAAlB,GAA2B,CAAjD;AAEA,MAAMC,WAAW,GAAG,wBAAY,YAAM;AACpC,QAAIF,aAAJ,EAAmB;AACjBT,MAAAA,YAAY,CAAC,UAAAY,IAAI,EAAI;AACnB,YAAIA,IAAI,KAAKlB,IAAb,EAAmB;AACjB,iBAAO,IAAP;AACD;;AAED,eAAOA,IAAP;AACD,OANW,CAAZ;AAOD;AACF,GAVmB,EAUjB,CAACe,aAAD,EAAgBf,IAAhB,CAViB,CAApB;;AAYA,MAAMmB,2BAA2B,GAAG,SAA9BA,2BAA8B,QAA2B;AAAA,QAAdC,KAAc,SAAxBC,MAAwB,CAAdD,KAAc;AAC7DZ,IAAAA,2CAA2C,CAACN,UAAD,EAAaE,YAAb,EAA2BJ,IAA3B,EAAiCoB,KAAjC,CAA3C;AACD,GAFD;;AAIA,iBAA0D,oBAAQ,YAAM;AACtE,WAAO,2CAA0BjB,eAA1B,EAA2CI,YAA3C,EAAyDL,UAAzD,EAAqEE,YAArE,EAAmFJ,IAAnF,CAAP;AACD,GAFyD,EAEvD,CAACG,eAAD,EAAkBI,YAAlB,EAAgCL,UAAhC,EAA4CE,YAA5C,EAA0DJ,IAA1D,CAFuD,CAA1D;AAAA,MAAQsB,qBAAR,YAAQA,qBAAR;AAAA,MAA+BC,sBAA/B,YAA+BA,sBAA/B;;AAIA,sBACE,+EACE,gCAAC,mBAAD;AAAS,IAAA,UAAU,EAAC,QAApB;AAA6B,IAAA,aAAa,EAAER,aAA5C;AAA2D,IAAA,QAAQ,EAAEJ;AAArE,kBACE,gCAAC,UAAD;AAAM,IAAA,KAAK,EAAE;AAAEa,MAAAA,IAAI,EAAE;AAAR;AAAb,kBACE,gCAAC,YAAD;AAAQ,IAAA,IAAI,MAAZ;AAAa,IAAA,IAAI,EAAC;AAAlB,IADF,eAEE,gCAAC,gCAAD;AACE,IAAA,KAAK,EAAC,OADR;AAEE,IAAA,QAAQ,EAAEL,2BAFZ;AAGE,IAAA,OAAO,EAAEF,WAHX;AAIE,IAAA,aAAa,EAAEF,aAJjB;AAKE,IAAA,cAAc,EAAEhB,cALlB;AAME,IAAA,KAAK,EAAED,KANT;AAOE,IAAA,WAAW,EAAEyB,sBAPf;AAQE,IAAA,KAAK,EAAED;AART,KAUGrB,QAAQ,iBAAI,gCAAC,wBAAD,OAVf,eAWE,gCAAC,mBAAD;AAAS,IAAA,IAAI,EAAEU,QAAQ,GAAG,UAAH,GAAgB;AAAvC,IAXF,CAFF,eAeE,gCAAC,UAAD;AAAM,IAAA,KAAK,EAAE;AAAEa,MAAAA,IAAI,EAAE;AAAR;AAAb,KACGrB,eAAe,CAACsB,GAAhB,CAAoB,iBAA2D;AAAA,QAAxD3B,KAAwD,SAAxDA,KAAwD;AAAA,QAAjD4B,gCAAiD,SAAjDA,gCAAiD;AAAA,QAAfC,QAAe,SAAfA,QAAe;;AAC9E,QAAI,CAACD,gCAAL,EAAuC;AACrC,0BAAO,gCAAC,wBAAD;AAAc,QAAA,GAAG,EAAE5B;AAAnB,QAAP;AACD;;AAED,QAAM8B,YAAY,iDACb1B,UAAU,CAAC2B,KAAX,CAAiB,IAAjB,CADa,IAEhBF,QAFgB,EAGhB,YAHgB,EAIhBvB,YAJgB,EAKhBJ,IALgB,EAAlB;;AAQA,QAAI,CAACe,aAAL,EAAoB;AAClB,UAAMe,aAAa,GAAG,iBAAIvB,YAAJ,EAAkBqB,YAAlB,EAAgC,KAAhC,CAAtB;AAEA,0BACE,gCAAC,iCAAD;AACE,QAAA,GAAG,EAAED,QADP;AAEE,QAAA,QAAQ,EAAE5B,cAAc,IAAIgC,qBAF9B;AAGE,QAAA,IAAI,EAAEH,YAAY,CAACI,IAAb,CAAkB,IAAlB,CAHR;AAIE,QAAA,QAAQ,EAAEtB,sBAJZ;AAKE,QAAA,KAAK,EAAEoB;AALT,QADF;AASD;;AAED,QAAMG,IAAI,GAAG,iBAAI1B,YAAJ,EAAkBqB,YAAlB,EAAgC,EAAhC,CAAb;;AAEA,4BAA0D,6BAAiBK,IAAjB,CAA1D;AAAA,QAAQX,qBAAR,qBAAQA,qBAAR;AAAA,QAA+BC,sBAA/B,qBAA+BA,sBAA/B;;AAEA,wBACE,gCAAC,iCAAD;AACE,MAAA,GAAG,EAAEzB,KADP;AAEE,MAAA,QAAQ,EAAEC,cAAc,IAAIgC,qBAF9B;AAGE,MAAA,IAAI,EAAEH,YAAY,CAACI,IAAb,CAAkB,IAAlB,CAHR;AAIE,MAAA,QAAQ,EAAEvB,sBAJZ;AAKE,MAAA,KAAK,EAAEa,qBALT;AAME,MAAA,WAAW,EAAEC;AANf,MADF;AAUD,GAzCA,CADH,CAfF,CADF,CADF,EA+DGZ,QAAQ,iBACP,gCAAC,wBAAD;AACE,IAAA,YAAY,EAAEC,iBADhB;AAEE,IAAA,cAAc,EAAEb,cAFlB;AAGE,IAAA,UAAU,EAAEC,IAHd;AAIE,IAAA,uBAAuB,EAAEE,UAJ3B;AAKE,IAAA,YAAY,EAAEE,YALhB;AAME,IAAA,eAAe,EAAED,eANnB;AAOE,IAAA,cAAc,EAAE;AAPlB,IAhEJ,CADF;AA6ED,CA/HD;;AAiIAP,SAAS,CAACsC,YAAV,GAAyB;AACvBrC,EAAAA,YAAY,EAAE,EADS;AAEvBI,EAAAA,QAAQ,EAAE;AAFa,CAAzB;AAKAL,SAAS,CAACuC,SAAV,GAAsB;AACpBtC,EAAAA,YAAY,EAAEuC,sBAAUC,KADJ;AAEpBvC,EAAAA,KAAK,EAAEsC,sBAAUE,MAAV,CAAiBC,UAFJ;AAGpBxC,EAAAA,cAAc,EAAEqC,sBAAUI,IAAV,CAAeD,UAHX;AAIpBvC,EAAAA,IAAI,EAAEoC,sBAAUE,MAAV,CAAiBC,UAJH;AAKpBrC,EAAAA,UAAU,EAAEkC,sBAAUE,MAAV,CAAiBC,UALT;AAMpBpC,EAAAA,eAAe,EAAEiC,sBAAUC,KAAV,CAAgBE,UANb;AAOpBnC,EAAAA,YAAY,EAAEgC,sBAAUE,MAAV,CAAiBC,UAPX;AAQpBtC,EAAAA,QAAQ,EAAEmC,sBAAUI;AARA,CAAtB;;4BAWe,iBAAK5C,SAAL,C","sourcesContent":["import React, { memo, useState, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\nimport { Padded, Flex } from '@buffetjs/core';\nimport IS_DISABLED from 'ee_else_ce/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/utils/constants';\nimport { usePermissionsDataManager } from '../../../../../hooks';\nimport { getCheckboxState } from '../../../utils';\nimport CheckboxWithCondition from '../../../CheckboxWithCondition';\nimport Chevron from '../../../Chevron';\nimport HiddenAction from '../../../HiddenAction';\nimport RequiredSign from '../../../RequiredSign';\nimport RowLabelWithCheckbox from '../../../RowLabelWithCheckbox';\nimport SubActionRow from '../SubActionRow';\nimport Wrapper from './Wrapper';\nimport getRowLabelCheckboxeState from './utils/getRowLabelCheckboxeState';\n\nconst ActionRow = ({\n  childrenForm,\n  label,\n  isFormDisabled,\n  name,\n  required,\n  pathToData,\n  propertyActions,\n  propertyName,\n}) => {\n  const [rowToOpen, setRowToOpen] = useState(null);\n  const {\n    modifiedData,\n    onChangeCollectionTypeLeftActionRowCheckbox,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const isActive = rowToOpen === name;\n\n  const recursiveChildren = useMemo(() => {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n\n  const isCollapsable = recursiveChildren.length > 0;\n\n  const handleClick = useCallback(() => {\n    if (isCollapsable) {\n      setRowToOpen(prev => {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  const handleChangeLeftRowCheckbox = ({ target: { value } }) => {\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = useMemo(() => {\n    return getRowLabelCheckboxeState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\n\n  return (\n    <>\n      <Wrapper alignItems=\"center\" isCollapsable={isCollapsable} isActive={isActive}>\n        <Flex style={{ flex: 1 }}>\n          <Padded left size=\"sm\" />\n          <RowLabelWithCheckbox\n            width=\"15rem\"\n            onChange={handleChangeLeftRowCheckbox}\n            onClick={handleClick}\n            isCollapsable={isCollapsable}\n            isFormDisabled={isFormDisabled}\n            label={label}\n            someChecked={hasSomeActionsSelected}\n            value={hasAllActionsSelected}\n          >\n            {required && <RequiredSign />}\n            <Chevron icon={isActive ? 'caret-up' : 'caret-down'} />\n          </RowLabelWithCheckbox>\n          <Flex style={{ flex: 1 }}>\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\n              if (!isActionRelatedToCurrentProperty) {\n                return <HiddenAction key={label} />;\n              }\n\n              const checkboxName = [\n                ...pathToData.split('..'),\n                actionId,\n                'properties',\n                propertyName,\n                name,\n              ];\n\n              if (!isCollapsable) {\n                const checkboxValue = get(modifiedData, checkboxName, false);\n\n                return (\n                  <CheckboxWithCondition\n                    key={actionId}\n                    disabled={isFormDisabled || IS_DISABLED}\n                    name={checkboxName.join('..')}\n                    onChange={onChangeSimpleCheckbox}\n                    value={checkboxValue}\n                  />\n                );\n              }\n\n              const data = get(modifiedData, checkboxName, {});\n\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\n\n              return (\n                <CheckboxWithCondition\n                  key={label}\n                  disabled={isFormDisabled || IS_DISABLED}\n                  name={checkboxName.join('..')}\n                  onChange={onChangeParentCheckbox}\n                  value={hasAllActionsSelected}\n                  someChecked={hasSomeActionsSelected}\n                />\n              );\n            })}\n          </Flex>\n        </Flex>\n      </Wrapper>\n      {isActive && (\n        <SubActionRow\n          childrenForm={recursiveChildren}\n          isFormDisabled={isFormDisabled}\n          parentName={name}\n          pathToDataFromActionRow={pathToData}\n          propertyName={propertyName}\n          propertyActions={propertyActions}\n          recursiveLevel={0}\n        />\n      )}\n    </>\n  );\n};\n\nActionRow.defaultProps = {\n  childrenForm: [],\n  required: false,\n};\n\nActionRow.propTypes = {\n  childrenForm: PropTypes.array,\n  label: PropTypes.string.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  pathToData: PropTypes.string.isRequired,\n  propertyActions: PropTypes.array.isRequired,\n  propertyName: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n};\n\nexport default memo(ActionRow);\n"]},"metadata":{},"sourceType":"script"}