{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar getDraftRelations = function getDraftRelations(data, ctSchema, components) {\n  var getDraftRelationsCount = function getDraftRelationsCount(data, schema) {\n    return Object.keys(data).reduce(function (acc, current) {\n      var type = (0, _lodash.get)(schema, ['attributes', current, 'type'], 'string');\n      var relationType = (0, _lodash.get)(schema, ['attributes', current, 'relationType'], '');\n      var isMorph = relationType.toLowerCase().includes('morph');\n      var oneWayTypes = ['oneWay', 'oneToOne', 'manyToOne'];\n      var currentData = data[current];\n\n      if ((0, _lodash.isNil)(currentData)) {\n        return acc;\n      }\n\n      if (type === 'dynamiczone') {\n        currentData.forEach(function (curr) {\n          var compoSchema = (0, _lodash.get)(components, curr.__component, {});\n          acc += getDraftRelationsCount(curr, compoSchema);\n        });\n      }\n\n      if (type === 'component') {\n        var isRepeatable = (0, _lodash.get)(schema, ['attributes', current, 'repeatable'], false);\n        var compoUID = (0, _lodash.get)(schema, ['attributes', current, 'component'], '');\n        var compoSchema = (0, _lodash.get)(components, compoUID, {});\n\n        if (isRepeatable) {\n          currentData.forEach(function (curr) {\n            acc += getDraftRelationsCount(curr, compoSchema);\n          });\n        } else {\n          acc += getDraftRelationsCount(currentData, compoSchema);\n        }\n      }\n\n      if (type === 'relation' && !isMorph) {\n        if (oneWayTypes.includes(relationType)) {\n          var hasDraftAndPublish = (0, _lodash.has)(currentData, 'published_at');\n\n          if (hasDraftAndPublish && (0, _lodash.isEmpty)(currentData.published_at)) {\n            acc += 1;\n          }\n        } else {\n          currentData.forEach(function (value) {\n            if ((0, _lodash.has)(value, 'published_at') && (0, _lodash.isEmpty)(value.published_at)) {\n              acc += 1;\n            }\n          });\n        }\n      }\n\n      return acc;\n    }, 0);\n  };\n\n  var count = getDraftRelationsCount(data, ctSchema, components);\n  return count;\n};\n\nvar _default = getDraftRelations;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/containers/EditView/Header/utils/getDraftRelations.js"],"names":["getDraftRelations","data","ctSchema","components","getDraftRelationsCount","schema","Object","keys","reduce","acc","current","type","relationType","isMorph","toLowerCase","includes","oneWayTypes","currentData","forEach","curr","compoSchema","__component","isRepeatable","compoUID","hasDraftAndPublish","published_at","value","count"],"mappings":"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","sourcesContent":["import { get, has, isEmpty, isNil } from 'lodash';\n\nconst getDraftRelations = (data, ctSchema, components) => {\n  const getDraftRelationsCount = (data, schema) =>\n    Object.keys(data).reduce((acc, current) => {\n      const type = get(schema, ['attributes', current, 'type'], 'string');\n      const relationType = get(schema, ['attributes', current, 'relationType'], '');\n      const isMorph = relationType.toLowerCase().includes('morph');\n      const oneWayTypes = ['oneWay', 'oneToOne', 'manyToOne'];\n      const currentData = data[current];\n\n      if (isNil(currentData)) {\n        return acc;\n      }\n\n      if (type === 'dynamiczone') {\n        currentData.forEach(curr => {\n          const compoSchema = get(components, curr.__component, {});\n\n          acc += getDraftRelationsCount(curr, compoSchema);\n        });\n      }\n\n      if (type === 'component') {\n        const isRepeatable = get(schema, ['attributes', current, 'repeatable'], false);\n        const compoUID = get(schema, ['attributes', current, 'component'], '');\n        const compoSchema = get(components, compoUID, {});\n\n        if (isRepeatable) {\n          currentData.forEach(curr => {\n            acc += getDraftRelationsCount(curr, compoSchema);\n          });\n        } else {\n          acc += getDraftRelationsCount(currentData, compoSchema);\n        }\n      }\n\n      if (type === 'relation' && !isMorph) {\n        if (oneWayTypes.includes(relationType)) {\n          const hasDraftAndPublish = has(currentData, 'published_at');\n\n          if (hasDraftAndPublish && isEmpty(currentData.published_at)) {\n            acc += 1;\n          }\n        } else {\n          currentData.forEach(value => {\n            if (has(value, 'published_at') && isEmpty(value.published_at)) {\n              acc += 1;\n            }\n          });\n        }\n      }\n\n      return acc;\n    }, 0);\n\n  const count = getDraftRelationsCount(data, ctSchema, components);\n\n  return count;\n};\n\nexport default getDraftRelations;\n"]},"metadata":{},"sourceType":"script"}