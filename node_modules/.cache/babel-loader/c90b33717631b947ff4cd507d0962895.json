{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _LocaleListCell = _interopRequireDefault(require(\"../components/LocaleListCell/LocaleListCell\"));\n\nvar addLocaleColumnToListViewMiddleware = function addLocaleColumnToListViewMiddleware() {\n  return function (_ref) {\n    var getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (action.type !== 'ContentManager/ListView/SET_LIST_LAYOUT ') {\n          return next(action);\n        }\n\n        var isFieldLocalized = (0, _get[\"default\"])(action, 'contentType.pluginOptions.i18n.localized', false);\n\n        if (!isFieldLocalized) {\n          return next(action);\n        }\n\n        var store = getState();\n\n        var _store$get = store.get('i18n_locales'),\n            locales = _store$get.locales;\n\n        var locale = {\n          key: '__locale_key__',\n          fieldSchema: {\n            type: 'string'\n          },\n          metadatas: {\n            label: 'Content available in',\n            searchable: false,\n            sortable: false\n          },\n          name: 'locales',\n          cellFormatter: function cellFormatter(props) {\n            return /*#__PURE__*/_react[\"default\"].createElement(_LocaleListCell[\"default\"], (0, _extends2[\"default\"])({}, props, {\n              locales: locales\n            }));\n          }\n        };\n        action.displayedHeaders = [].concat((0, _toConsumableArray2[\"default\"])(action.displayedHeaders), [locale]);\n        return next(action);\n      };\n    };\n  };\n};\n\nvar _default = addLocaleColumnToListViewMiddleware;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-i18n/admin/src/middlewares/addLocaleColumnToListViewMiddleware.js"],"names":["addLocaleColumnToListViewMiddleware","getState","next","action","type","isFieldLocalized","store","get","locales","locale","key","fieldSchema","metadatas","label","searchable","sortable","name","cellFormatter","props","displayedHeaders"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,mCAAmC,GAAG,SAAtCA,mCAAsC;AAAA,SAAM;AAAA,QAAGC,QAAH,QAAGA,QAAH;AAAA,WAAkB,UAAAC,IAAI;AAAA,aAAI,UAAAC,MAAM,EAAI;AACpF,YAAIA,MAAM,CAACC,IAAP,KAAgB,0CAApB,EAAgE;AAC9D,iBAAOF,IAAI,CAACC,MAAD,CAAX;AACD;;AAED,YAAME,gBAAgB,GAAG,qBAAIF,MAAJ,EAAY,0CAAZ,EAAwD,KAAxD,CAAzB;;AAEA,YAAI,CAACE,gBAAL,EAAuB;AACrB,iBAAOH,IAAI,CAACC,MAAD,CAAX;AACD;;AAED,YAAMG,KAAK,GAAGL,QAAQ,EAAtB;;AACA,yBAAoBK,KAAK,CAACC,GAAN,CAAU,cAAV,CAApB;AAAA,YAAQC,OAAR,cAAQA,OAAR;;AAEA,YAAMC,MAAM,GAAG;AACbC,UAAAA,GAAG,EAAE,gBADQ;AAEbC,UAAAA,WAAW,EAAE;AAAEP,YAAAA,IAAI,EAAE;AAAR,WAFA;AAGbQ,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE,sBAAT;AAAiCC,YAAAA,UAAU,EAAE,KAA7C;AAAoDC,YAAAA,QAAQ,EAAE;AAA9D,WAHE;AAIbC,UAAAA,IAAI,EAAE,SAJO;AAKbC,UAAAA,aAAa,EAAE,uBAAAC,KAAK;AAAA,gCAAI,gCAAC,0BAAD,gCAAoBA,KAApB;AAA2B,cAAA,OAAO,EAAEV;AAApC,eAAJ;AAAA;AALP,SAAf;AAQAL,QAAAA,MAAM,CAACgB,gBAAP,iDAA8BhB,MAAM,CAACgB,gBAArC,IAAuDV,MAAvD;AAEA,eAAOP,IAAI,CAACC,MAAD,CAAX;AACD,OAzBuE;AAAA,KAAtB;AAAA,GAAN;AAAA,CAA5C;;eA2BeH,mC","sourcesContent":["import React from 'react';\nimport get from 'lodash/get';\nimport LocaleListCell from '../components/LocaleListCell/LocaleListCell';\n\nconst addLocaleColumnToListViewMiddleware = () => ({ getState }) => next => action => {\n  if (action.type !== 'ContentManager/ListView/SET_LIST_LAYOUT ') {\n    return next(action);\n  }\n\n  const isFieldLocalized = get(action, 'contentType.pluginOptions.i18n.localized', false);\n\n  if (!isFieldLocalized) {\n    return next(action);\n  }\n\n  const store = getState();\n  const { locales } = store.get('i18n_locales');\n\n  const locale = {\n    key: '__locale_key__',\n    fieldSchema: { type: 'string' },\n    metadatas: { label: 'Content available in', searchable: false, sortable: false },\n    name: 'locales',\n    cellFormatter: props => <LocaleListCell {...props} locales={locales} />,\n  };\n\n  action.displayedHeaders = [...action.displayedHeaders, locale];\n\n  return next(action);\n};\n\nexport default addLocaleColumnToListViewMiddleware;\n"]},"metadata":{},"sourceType":"script"}