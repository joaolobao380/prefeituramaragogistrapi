{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _constants = _interopRequireDefault(require(\"ee_else_ce/components/Roles/ContentTypeCollapse/Collapse/utils/constants\"));\n\nvar _hooks = require(\"../../../../hooks\");\n\nvar _utils = require(\"../../utils\");\n\nvar _CheckboxWithCondition = _interopRequireDefault(require(\"../../CheckboxWithCondition\"));\n\nvar _Chevron = _interopRequireDefault(require(\"../../Chevron\"));\n\nvar _ConditionsButton = _interopRequireDefault(require(\"../../ConditionsButton\"));\n\nvar _ConditionsModal = _interopRequireDefault(require(\"../../ConditionsModal\"));\n\nvar _HiddenAction = _interopRequireDefault(require(\"../../HiddenAction\"));\n\nvar _RowLabelWithCheckbox = _interopRequireDefault(require(\"../../RowLabelWithCheckbox\"));\n\nvar _Wrapper = _interopRequireDefault(require(\"./Wrapper\"));\n\nvar _generateCheckboxesActions = _interopRequireDefault(require(\"./utils/generateCheckboxesActions\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Collapse = function Collapse(_ref) {\n  var availableActions = _ref.availableActions,\n      isActive = _ref.isActive,\n      isGrey = _ref.isGrey,\n      isFormDisabled = _ref.isFormDisabled,\n      label = _ref.label,\n      onClickToggle = _ref.onClickToggle,\n      pathToData = _ref.pathToData;\n\n  var _useState = (0, _react.useState)({\n    isOpen: false,\n    isMounted: false\n  }),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      modalState = _useState2[0],\n      setModalState = _useState2[1];\n\n  var _usePermissionsDataMa = (0, _hooks.usePermissionsDataManager)(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var handleToggleModalIsOpen = function handleToggleModalIsOpen() {\n    setModalState(function (prevState) {\n      return {\n        isMounted: true,\n        isOpen: !prevState.isOpen\n      };\n    });\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setModalState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        isMounted: false\n      });\n    });\n  }; // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n\n\n  var mainData = (0, _lodash.get)(modifiedData, pathToData.split('..'), {}); // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n\n  var dataWithoutCondition = (0, _react.useMemo)(function () {\n    return Object.keys(mainData).reduce(function (acc, current) {\n      acc[current] = (0, _lodash.omit)(mainData[current], 'conditions');\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  var _getCheckboxState = (0, _utils.getCheckboxState)(dataWithoutCondition),\n      hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n      hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected; // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n\n\n  var checkboxesActions = (0, _react.useMemo)(function () {\n    return (0, _generateCheckboxesActions[\"default\"])(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n  var doesConditionButtonHasConditions = checkboxesActions.some(function (_ref2) {\n    var hasConditions = _ref2.hasConditions;\n    return hasConditions;\n  });\n  return /*#__PURE__*/_react[\"default\"].createElement(_Wrapper[\"default\"], {\n    isActive: isActive,\n    isGrey: isGrey\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    style: {\n      flex: 1\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    left: true,\n    size: \"sm\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_RowLabelWithCheckbox[\"default\"], {\n    isCollapsable: true,\n    isFormDisabled: isFormDisabled,\n    label: label,\n    checkboxName: pathToData,\n    onChange: onChangeParentCheckbox,\n    onClick: onClickToggle,\n    someChecked: hasSomeActionsSelected,\n    value: hasAllActionsSelected\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Chevron[\"default\"], {\n    icon: isActive ? 'chevron-up' : 'chevron-down'\n  })), /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    style: {\n      flex: 1\n    }\n  }, checkboxesActions.map(function (_ref3) {\n    var actionId = _ref3.actionId,\n        hasConditions = _ref3.hasConditions,\n        hasAllActionsSelected = _ref3.hasAllActionsSelected,\n        hasSomeActionsSelected = _ref3.hasSomeActionsSelected,\n        isDisplayed = _ref3.isDisplayed,\n        isParentCheckbox = _ref3.isParentCheckbox,\n        checkboxName = _ref3.checkboxName;\n\n    if (!isDisplayed) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_HiddenAction[\"default\"], {\n        key: actionId\n      });\n    }\n\n    if (isParentCheckbox) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWithCondition[\"default\"], {\n        key: actionId,\n        disabled: isFormDisabled || _constants[\"default\"],\n        hasConditions: hasConditions,\n        name: checkboxName,\n        onChange: onChangeParentCheckbox,\n        someChecked: hasSomeActionsSelected,\n        value: hasAllActionsSelected\n      });\n    }\n\n    return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWithCondition[\"default\"], {\n      key: actionId,\n      disabled: isFormDisabled || _constants[\"default\"],\n      hasConditions: hasConditions,\n      name: checkboxName,\n      onChange: onChangeSimpleCheckbox,\n      value: hasAllActionsSelected\n    });\n  })), /*#__PURE__*/_react[\"default\"].createElement(_ConditionsButton[\"default\"], {\n    isRight: true,\n    onClick: handleToggleModalIsOpen,\n    hasConditions: doesConditionButtonHasConditions\n  })), modalState.isMounted && /*#__PURE__*/_react[\"default\"].createElement(_ConditionsModal[\"default\"], {\n    headerBreadCrumbs: [label, 'app.components.LeftMenuLinkContainer.settings'],\n    actions: checkboxesActions,\n    isOpen: modalState.isOpen,\n    isFormDisabled: isFormDisabled,\n    onClosed: handleModalClose,\n    onToggle: handleToggleModalIsOpen\n  }));\n};\n\nCollapse.propTypes = {\n  availableActions: _propTypes[\"default\"].array.isRequired,\n  isActive: _propTypes[\"default\"].bool.isRequired,\n  isGrey: _propTypes[\"default\"].bool.isRequired,\n  isFormDisabled: _propTypes[\"default\"].bool.isRequired,\n  label: _propTypes[\"default\"].string.isRequired,\n  onClickToggle: _propTypes[\"default\"].func.isRequired,\n  pathToData: _propTypes[\"default\"].string.isRequired\n};\nvar _default = Collapse;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/ContentTypeCollapse/Collapse/index.js"],"names":["Collapse","availableActions","isActive","isGrey","isFormDisabled","label","onClickToggle","pathToData","isOpen","isMounted","modalState","setModalState","modifiedData","onChangeParentCheckbox","onChangeSimpleCheckbox","handleToggleModalIsOpen","prevState","handleModalClose","mainData","split","dataWithoutCondition","Object","keys","reduce","acc","current","hasAllActionsSelected","hasSomeActionsSelected","checkboxesActions","doesConditionButtonHasConditions","some","hasConditions","flex","map","actionId","isDisplayed","isParentCheckbox","checkboxName","IS_DISABLED","propTypes","PropTypes","array","isRequired","bool","string","func"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { get, omit } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Flex, Padded } from '@buffetjs/core';\nimport IS_DISABLED from 'ee_else_ce/components/Roles/ContentTypeCollapse/Collapse/utils/constants';\nimport { usePermissionsDataManager } from '../../../../hooks';\nimport { getCheckboxState } from '../../utils';\nimport CheckboxWithCondition from '../../CheckboxWithCondition';\nimport Chevron from '../../Chevron';\nimport ConditionsButton from '../../ConditionsButton';\nimport ConditionsModal from '../../ConditionsModal';\nimport HiddenAction from '../../HiddenAction';\nimport RowLabelWithCheckbox from '../../RowLabelWithCheckbox';\nimport Wrapper from './Wrapper';\nimport generateCheckboxesActions from './utils/generateCheckboxesActions';\n\nconst Collapse = ({\n  availableActions,\n  isActive,\n  isGrey,\n  isFormDisabled,\n  label,\n  onClickToggle,\n  pathToData,\n}) => {\n  const [modalState, setModalState] = useState({ isOpen: false, isMounted: false });\n  const {\n    modifiedData,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const handleToggleModalIsOpen = () => {\n    setModalState(prevState => ({ isMounted: true, isOpen: !prevState.isOpen }));\n  };\n\n  const handleModalClose = () => {\n    setModalState(prevState => ({ ...prevState, isMounted: false }));\n  };\n\n  // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n  const mainData = get(modifiedData, pathToData.split('..'), {});\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n  const dataWithoutCondition = useMemo(() => {\n    return Object.keys(mainData).reduce((acc, current) => {\n      acc[current] = omit(mainData[current], 'conditions');\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n  const checkboxesActions = useMemo(() => {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n\n  const doesConditionButtonHasConditions = checkboxesActions.some(\n    ({ hasConditions }) => hasConditions\n  );\n\n  return (\n    <Wrapper isActive={isActive} isGrey={isGrey}>\n      <Flex style={{ flex: 1 }}>\n        <Padded left size=\"sm\" />\n        <RowLabelWithCheckbox\n          isCollapsable\n          isFormDisabled={isFormDisabled}\n          label={label}\n          checkboxName={pathToData}\n          onChange={onChangeParentCheckbox}\n          onClick={onClickToggle}\n          someChecked={hasSomeActionsSelected}\n          value={hasAllActionsSelected}\n        >\n          <Chevron icon={isActive ? 'chevron-up' : 'chevron-down'} />\n        </RowLabelWithCheckbox>\n\n        <Flex style={{ flex: 1 }}>\n          {checkboxesActions.map(\n            ({\n              actionId,\n              hasConditions,\n              hasAllActionsSelected,\n              hasSomeActionsSelected,\n              isDisplayed,\n              isParentCheckbox,\n              checkboxName,\n            }) => {\n              if (!isDisplayed) {\n                return <HiddenAction key={actionId} />;\n              }\n\n              if (isParentCheckbox) {\n                return (\n                  <CheckboxWithCondition\n                    key={actionId}\n                    disabled={isFormDisabled || IS_DISABLED}\n                    hasConditions={hasConditions}\n                    name={checkboxName}\n                    onChange={onChangeParentCheckbox}\n                    someChecked={hasSomeActionsSelected}\n                    value={hasAllActionsSelected}\n                  />\n                );\n              }\n\n              return (\n                <CheckboxWithCondition\n                  key={actionId}\n                  disabled={isFormDisabled || IS_DISABLED}\n                  hasConditions={hasConditions}\n                  name={checkboxName}\n                  onChange={onChangeSimpleCheckbox}\n                  value={hasAllActionsSelected}\n                />\n              );\n            }\n          )}\n        </Flex>\n        <ConditionsButton\n          isRight\n          onClick={handleToggleModalIsOpen}\n          hasConditions={doesConditionButtonHasConditions}\n        />\n      </Flex>\n      {modalState.isMounted && (\n        <ConditionsModal\n          headerBreadCrumbs={[label, 'app.components.LeftMenuLinkContainer.settings']}\n          actions={checkboxesActions}\n          isOpen={modalState.isOpen}\n          isFormDisabled={isFormDisabled}\n          onClosed={handleModalClose}\n          onToggle={handleToggleModalIsOpen}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nCollapse.propTypes = {\n  availableActions: PropTypes.array.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  isGrey: PropTypes.bool.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  onClickToggle: PropTypes.func.isRequired,\n  pathToData: PropTypes.string.isRequired,\n};\n\nexport default Collapse;\n"]},"metadata":{},"sourceType":"script"}