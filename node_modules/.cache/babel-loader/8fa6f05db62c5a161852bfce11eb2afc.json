{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../../utils\");\n\nvar generateCheckboxesActions = function generateCheckboxesActions(availableActions, modifiedData, pathToData) {\n  return availableActions.map(function (_ref) {\n    var actionId = _ref.actionId,\n        isDisplayed = _ref.isDisplayed,\n        applyToProperties = _ref.applyToProperties,\n        label = _ref.label;\n\n    if (!isDisplayed) {\n      return {\n        actionId: actionId,\n        hasSomeActionsSelected: false,\n        isDisplayed: isDisplayed\n      };\n    }\n\n    var baseCheckboxNameArray = [].concat((0, _toConsumableArray2[\"default\"])(pathToData.split('..')), [actionId]);\n    var checkboxNameArray = (0, _lodash.isEmpty)(applyToProperties) ? [].concat((0, _toConsumableArray2[\"default\"])(baseCheckboxNameArray), ['properties', 'enabled']) : baseCheckboxNameArray;\n    var checkboxName = checkboxNameArray.join('..');\n    var conditionsValue = (0, _lodash.get)(modifiedData, [].concat((0, _toConsumableArray2[\"default\"])(baseCheckboxNameArray), ['conditions']), null);\n    var hasConditions = (0, _utils.createArrayOfValues)(conditionsValue).some(function (val) {\n      return val;\n    });\n\n    if ((0, _lodash.isEmpty)(applyToProperties)) {\n      var value = (0, _lodash.get)(modifiedData, checkboxNameArray, false); // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n\n      return {\n        actionId: actionId,\n        checkboxName: checkboxName,\n        hasAllActionsSelected: value,\n        hasConditions: hasConditions,\n        hasSomeActionsSelected: value,\n        isDisplayed: isDisplayed,\n        isParentCheckbox: false,\n        label: label,\n        pathToConditionsObject: baseCheckboxNameArray\n      };\n    }\n\n    var mainData = (0, _lodash.get)(modifiedData, checkboxNameArray, null);\n\n    var _getCheckboxState = (0, _utils.getCheckboxState)(mainData),\n        hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n        hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected;\n\n    return {\n      actionId: actionId,\n      checkboxName: checkboxName,\n      hasAllActionsSelected: hasAllActionsSelected,\n      hasConditions: hasConditions,\n      hasSomeActionsSelected: hasSomeActionsSelected,\n      isDisplayed: isDisplayed,\n      isParentCheckbox: true,\n      label: label,\n      pathToConditionsObject: baseCheckboxNameArray\n    };\n  });\n};\n\nvar _default = generateCheckboxesActions;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/ContentTypeCollapse/Collapse/utils/generateCheckboxesActions.js"],"names":["generateCheckboxesActions","availableActions","modifiedData","pathToData","map","actionId","isDisplayed","applyToProperties","label","hasSomeActionsSelected","baseCheckboxNameArray","split","checkboxNameArray","checkboxName","join","conditionsValue","hasConditions","some","val","value","hasAllActionsSelected","isParentCheckbox","pathToConditionsObject","mainData"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,gBAAD,EAAmBC,YAAnB,EAAiCC,UAAjC,EAAgD;AAChF,SAAOF,gBAAgB,CAACG,GAAjB,CAAqB,gBAAyD;AAAA,QAAtDC,QAAsD,QAAtDA,QAAsD;AAAA,QAA5CC,WAA4C,QAA5CA,WAA4C;AAAA,QAA/BC,iBAA+B,QAA/BA,iBAA+B;AAAA,QAAZC,KAAY,QAAZA,KAAY;;AACnF,QAAI,CAACF,WAAL,EAAkB;AAChB,aAAO;AAAED,QAAAA,QAAQ,EAARA,QAAF;AAAYI,QAAAA,sBAAsB,EAAE,KAApC;AAA2CH,QAAAA,WAAW,EAAXA;AAA3C,OAAP;AACD;;AAED,QAAMI,qBAAqB,iDAAOP,UAAU,CAACQ,KAAX,CAAiB,IAAjB,CAAP,IAA+BN,QAA/B,EAA3B;AACA,QAAMO,iBAAiB,GAAG,qBAAQL,iBAAR,kDAClBG,qBADkB,IACK,YADL,EACmB,SADnB,KAEtBA,qBAFJ;AAGA,QAAMG,YAAY,GAAGD,iBAAiB,CAACE,IAAlB,CAAuB,IAAvB,CAArB;AACA,QAAMC,eAAe,GAAG,iBAAIb,YAAJ,gDAAsBQ,qBAAtB,IAA6C,YAA7C,IAA4D,IAA5D,CAAxB;AAEA,QAAMM,aAAa,GAAG,gCAAoBD,eAApB,EAAqCE,IAArC,CAA0C,UAAAC,GAAG;AAAA,aAAIA,GAAJ;AAAA,KAA7C,CAAtB;;AAEA,QAAI,qBAAQX,iBAAR,CAAJ,EAAgC;AAC9B,UAAMY,KAAK,GAAG,iBAAIjB,YAAJ,EAAkBU,iBAAlB,EAAqC,KAArC,CAAd,CAD8B,CAG9B;AACA;;AACA,aAAO;AACLP,QAAAA,QAAQ,EAARA,QADK;AAELQ,QAAAA,YAAY,EAAZA,YAFK;AAGLO,QAAAA,qBAAqB,EAAED,KAHlB;AAILH,QAAAA,aAAa,EAAbA,aAJK;AAKLP,QAAAA,sBAAsB,EAAEU,KALnB;AAMLb,QAAAA,WAAW,EAAXA,WANK;AAOLe,QAAAA,gBAAgB,EAAE,KAPb;AAQLb,QAAAA,KAAK,EAALA,KARK;AASLc,QAAAA,sBAAsB,EAAEZ;AATnB,OAAP;AAWD;;AAED,QAAMa,QAAQ,GAAG,iBAAIrB,YAAJ,EAAkBU,iBAAlB,EAAqC,IAArC,CAAjB;;AAEA,4BAA0D,6BAAiBW,QAAjB,CAA1D;AAAA,QAAQH,qBAAR,qBAAQA,qBAAR;AAAA,QAA+BX,sBAA/B,qBAA+BA,sBAA/B;;AAEA,WAAO;AACLJ,MAAAA,QAAQ,EAARA,QADK;AAELQ,MAAAA,YAAY,EAAZA,YAFK;AAGLO,MAAAA,qBAAqB,EAArBA,qBAHK;AAILJ,MAAAA,aAAa,EAAbA,aAJK;AAKLP,MAAAA,sBAAsB,EAAtBA,sBALK;AAMLH,MAAAA,WAAW,EAAXA,WANK;AAOLe,MAAAA,gBAAgB,EAAE,IAPb;AAQLb,MAAAA,KAAK,EAALA,KARK;AASLc,MAAAA,sBAAsB,EAAEZ;AATnB,KAAP;AAWD,GA/CM,CAAP;AAgDD,CAjDD;;eAmDeV,yB","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport { createArrayOfValues, getCheckboxState } from '../../../utils';\n\nconst generateCheckboxesActions = (availableActions, modifiedData, pathToData) => {\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\n    if (!isDisplayed) {\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\n    }\n\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\n    const checkboxNameArray = isEmpty(applyToProperties)\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\n      : baseCheckboxNameArray;\n    const checkboxName = checkboxNameArray.join('..');\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\n\n    const hasConditions = createArrayOfValues(conditionsValue).some(val => val);\n\n    if (isEmpty(applyToProperties)) {\n      const value = get(modifiedData, checkboxNameArray, false);\n\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n      return {\n        actionId,\n        checkboxName,\n        hasAllActionsSelected: value,\n        hasConditions,\n        hasSomeActionsSelected: value,\n        isDisplayed,\n        isParentCheckbox: false,\n        label,\n        pathToConditionsObject: baseCheckboxNameArray,\n      };\n    }\n\n    const mainData = get(modifiedData, checkboxNameArray, null);\n\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\n\n    return {\n      actionId,\n      checkboxName,\n      hasAllActionsSelected,\n      hasConditions,\n      hasSomeActionsSelected,\n      isDisplayed,\n      isParentCheckbox: true,\n      label,\n      pathToConditionsObject: baseCheckboxNameArray,\n    };\n  });\n};\n\nexport default generateCheckboxesActions;\n"]},"metadata":{},"sourceType":"script"}