{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar mergeMetasWithSchema = function mergeMetasWithSchema(data, schemas, mainSchemaKey) {\n  var findSchema = function findSchema(refUid) {\n    return schemas.find(function (obj) {\n      return obj.uid === refUid;\n    });\n  };\n\n  var merged = Object.assign({}, data);\n  var mainUID = data[mainSchemaKey].uid;\n  var mainSchema = findSchema(mainUID);\n  (0, _lodash.set)(merged, [mainSchemaKey], _objectSpread(_objectSpread({}, data[mainSchemaKey]), mainSchema));\n  Object.keys(data.components).forEach(function (compoUID) {\n    var compoSchema = findSchema(compoUID);\n    (0, _lodash.set)(merged, ['components', compoUID], _objectSpread(_objectSpread({}, data.components[compoUID]), compoSchema));\n  });\n  return merged;\n};\n\nvar _default = mergeMetasWithSchema;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/utils/mergeMetasWithSchema.js"],"names":["mergeMetasWithSchema","data","schemas","mainSchemaKey","findSchema","refUid","find","obj","uid","merged","Object","assign","mainUID","mainSchema","keys","components","forEach","compoUID","compoSchema"],"mappings":";;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,aAAhB,EAAkC;AAC7D,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,MAAM;AAAA,WAAIH,OAAO,CAACI,IAAR,CAAa,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,GAAJ,KAAYH,MAAhB;AAAA,KAAhB,CAAJ;AAAA,GAAzB;;AACA,MAAMI,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,IAAlB,CAAf;AACA,MAAMW,OAAO,GAAGX,IAAI,CAACE,aAAD,CAAJ,CAAoBK,GAApC;AACA,MAAMK,UAAU,GAAGT,UAAU,CAACQ,OAAD,CAA7B;AAEA,mBAAIH,MAAJ,EAAY,CAACN,aAAD,CAAZ,kCAAkCF,IAAI,CAACE,aAAD,CAAtC,GAA0DU,UAA1D;AAEAH,EAAAA,MAAM,CAACI,IAAP,CAAYb,IAAI,CAACc,UAAjB,EAA6BC,OAA7B,CAAqC,UAAAC,QAAQ,EAAI;AAC/C,QAAMC,WAAW,GAAGd,UAAU,CAACa,QAAD,CAA9B;AAEA,qBAAIR,MAAJ,EAAY,CAAC,YAAD,EAAeQ,QAAf,CAAZ,kCAA2ChB,IAAI,CAACc,UAAL,CAAgBE,QAAhB,CAA3C,GAAyEC,WAAzE;AACD,GAJD;AAMA,SAAOT,MAAP;AACD,CAfD;;eAiBeT,oB","sourcesContent":["import { set } from 'lodash';\n\nconst mergeMetasWithSchema = (data, schemas, mainSchemaKey) => {\n  const findSchema = refUid => schemas.find(obj => obj.uid === refUid);\n  const merged = Object.assign({}, data);\n  const mainUID = data[mainSchemaKey].uid;\n  const mainSchema = findSchema(mainUID);\n\n  set(merged, [mainSchemaKey], { ...data[mainSchemaKey], ...mainSchema });\n\n  Object.keys(data.components).forEach(compoUID => {\n    const compoSchema = findSchema(compoUID);\n\n    set(merged, ['components', compoUID], { ...data.components[compoUID], ...compoSchema });\n  });\n\n  return merged;\n};\n\nexport default mergeMetasWithSchema;\n"]},"metadata":{},"sourceType":"script"}