{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _taggedTemplateLiteral2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteral\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _constants = _interopRequireDefault(require(\"ee_else_ce/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/SubActionRow/utils/constants\"));\n\nvar _hooks = require(\"../../../../../hooks\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _CheckboxWithCondition = _interopRequireDefault(require(\"../../../CheckboxWithCondition\"));\n\nvar _Chevron = _interopRequireDefault(require(\"../../../Chevron\"));\n\nvar _CollapseLabel = _interopRequireDefault(require(\"../../../CollapseLabel\"));\n\nvar _Curve = _interopRequireDefault(require(\"../../../Curve\"));\n\nvar _HiddenAction = _interopRequireDefault(require(\"../../../HiddenAction\"));\n\nvar _RequiredSign = _interopRequireDefault(require(\"../../../RequiredSign\"));\n\nvar _row = require(\"./row\");\n\nvar _timeline = require(\"./timeline\");\n\nvar _Wrapper = _interopRequireDefault(require(\"./Wrapper\"));\n\nvar _templateObject;\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar SubLevelWrapper = _styledComponents[\"default\"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  padding-bottom: 8px;\\n\"])));\n\nvar SubActionRow = function SubActionRow(_ref) {\n  var childrenForm = _ref.childrenForm,\n      isFormDisabled = _ref.isFormDisabled,\n      recursiveLevel = _ref.recursiveLevel,\n      pathToDataFromActionRow = _ref.pathToDataFromActionRow,\n      propertyActions = _ref.propertyActions,\n      parentName = _ref.parentName,\n      propertyName = _ref.propertyName;\n\n  var _usePermissionsDataMa = (0, _hooks.usePermissionsDataManager)(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      rowToOpen = _useState2[0],\n      setRowToOpen = _useState2[1];\n\n  var handleClickToggleSubLevel = function handleClickToggleSubLevel(name) {\n    setRowToOpen(function (prev) {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  var displayedRecursiveChildren = (0, _react.useMemo)(function () {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(function (_ref2) {\n      var value = _ref2.value;\n      return value === rowToOpen;\n    });\n  }, [rowToOpen, childrenForm]);\n  return /*#__PURE__*/_react[\"default\"].createElement(_Wrapper[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_timeline.TopTimeline, null), childrenForm.map(function (_ref3, index) {\n    var label = _ref3.label,\n        value = _ref3.value,\n        required = _ref3.required,\n        subChildrenForm = _ref3.children;\n    var isVisible = index + 1 < childrenForm.length;\n    var isArrayType = Array.isArray(subChildrenForm);\n    var isSmall = isArrayType || index + 1 === childrenForm.length;\n    var isActive = rowToOpen === value;\n    return /*#__PURE__*/_react[\"default\"].createElement(_timeline.LeftBorderTimeline, {\n      key: value,\n      isVisible: isVisible\n    }, /*#__PURE__*/_react[\"default\"].createElement(_row.RowWrapper, {\n      isSmall: isSmall\n    }, /*#__PURE__*/_react[\"default\"].createElement(_Curve[\"default\"], {\n      fill: \"#a5d5ff\"\n    }), /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n      style: {\n        flex: 1\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(_row.RowStyle, {\n      level: recursiveLevel,\n      isActive: isActive,\n      isCollapsable: isArrayType\n    }, /*#__PURE__*/_react[\"default\"].createElement(_CollapseLabel[\"default\"], {\n      alignItems: \"center\",\n      isCollapsable: isArrayType,\n      onClick: function onClick() {\n        if (isArrayType) {\n          handleClickToggleSubLevel(value);\n        }\n      },\n      title: label\n    }, /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n      color: isActive ? 'mediumBlue' : 'grey',\n      ellipsis: true,\n      fontSize: \"xs\",\n      fontWeight: \"bold\",\n      lineHeight: \"20px\",\n      textTransform: \"uppercase\"\n    }, label), required && /*#__PURE__*/_react[\"default\"].createElement(_RequiredSign[\"default\"], null), /*#__PURE__*/_react[\"default\"].createElement(_Chevron[\"default\"], {\n      icon: isActive ? 'caret-up' : 'caret-down'\n    }))), /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n      style: {\n        flex: 1\n      }\n    }, propertyActions.map(function (_ref4) {\n      var actionId = _ref4.actionId,\n          label = _ref4.label,\n          isActionRelatedToCurrentProperty = _ref4.isActionRelatedToCurrentProperty;\n\n      if (!isActionRelatedToCurrentProperty) {\n        return /*#__PURE__*/_react[\"default\"].createElement(_HiddenAction[\"default\"], {\n          key: actionId\n        });\n      }\n      /*\n       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n       */\n\n\n      var checkboxName = [].concat((0, _toConsumableArray2[\"default\"])(pathToDataFromActionRow.split('..')), [actionId, 'properties', propertyName], (0, _toConsumableArray2[\"default\"])(parentName.split('..')), [value]);\n      var checkboxValue = (0, _lodash.get)(modifiedData, checkboxName, false);\n\n      if (!subChildrenForm) {\n        return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWithCondition[\"default\"], {\n          key: label,\n          disabled: isFormDisabled || _constants[\"default\"],\n          name: checkboxName.join('..'),\n          onChange: onChangeSimpleCheckbox,\n          value: checkboxValue\n        });\n      }\n\n      var _getCheckboxState = (0, _utils.getCheckboxState)(checkboxValue),\n          hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n          hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected;\n\n      return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWithCondition[\"default\"], {\n        key: label,\n        disabled: isFormDisabled || _constants[\"default\"],\n        name: checkboxName.join('..'),\n        onChange: onChangeParentCheckbox,\n        value: hasAllActionsSelected,\n        someChecked: hasSomeActionsSelected\n      });\n    })))), displayedRecursiveChildren && isActive && /*#__PURE__*/_react[\"default\"].createElement(SubLevelWrapper, null, /*#__PURE__*/_react[\"default\"].createElement(SubActionRow, {\n      isFormDisabled: isFormDisabled,\n      parentName: \"\".concat(parentName, \"..\").concat(value),\n      pathToDataFromActionRow: pathToDataFromActionRow,\n      propertyActions: propertyActions,\n      propertyName: propertyName,\n      recursiveLevel: recursiveLevel + 1,\n      childrenForm: displayedRecursiveChildren.children\n    })));\n  }));\n};\n\nSubActionRow.propTypes = {\n  childrenForm: _propTypes[\"default\"].array.isRequired,\n  isFormDisabled: _propTypes[\"default\"].bool.isRequired,\n  parentName: _propTypes[\"default\"].string.isRequired,\n  pathToDataFromActionRow: _propTypes[\"default\"].string.isRequired,\n  propertyActions: _propTypes[\"default\"].array.isRequired,\n  propertyName: _propTypes[\"default\"].string.isRequired,\n  recursiveLevel: _propTypes[\"default\"].number.isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(SubActionRow);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/SubActionRow/index.js"],"names":["SubLevelWrapper","styled","div","SubActionRow","childrenForm","isFormDisabled","recursiveLevel","pathToDataFromActionRow","propertyActions","parentName","propertyName","modifiedData","onChangeParentCheckbox","onChangeSimpleCheckbox","rowToOpen","setRowToOpen","handleClickToggleSubLevel","name","prev","displayedRecursiveChildren","find","value","map","index","label","required","subChildrenForm","children","isVisible","length","isArrayType","Array","isArray","isSmall","isActive","flex","actionId","isActionRelatedToCurrentProperty","checkboxName","split","checkboxValue","IS_DISABLED","join","hasAllActionsSelected","hasSomeActionsSelected","propTypes","PropTypes","array","isRequired","bool","string","number"],"mappings":"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","sourcesContent":["import React, { memo, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\nimport { Flex, Text } from '@buffetjs/core';\nimport styled from 'styled-components';\nimport IS_DISABLED from 'ee_else_ce/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/SubActionRow/utils/constants';\nimport { usePermissionsDataManager } from '../../../../../hooks';\nimport { getCheckboxState } from '../../../utils';\nimport CheckboxWithCondition from '../../../CheckboxWithCondition';\nimport Chevron from '../../../Chevron';\nimport CollapseLabel from '../../../CollapseLabel';\nimport Curve from '../../../Curve';\nimport HiddenAction from '../../../HiddenAction';\nimport RequiredSign from '../../../RequiredSign';\nimport { RowStyle, RowWrapper } from './row';\nimport { LeftBorderTimeline, TopTimeline } from './timeline';\nimport Wrapper from './Wrapper';\n\nconst SubLevelWrapper = styled.div`\n  padding-bottom: 8px;\n`;\n\nconst SubActionRow = ({\n  childrenForm,\n  isFormDisabled,\n  recursiveLevel,\n  pathToDataFromActionRow,\n  propertyActions,\n  parentName,\n  propertyName,\n}) => {\n  const {\n    modifiedData,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n  const [rowToOpen, setRowToOpen] = useState(null);\n\n  const handleClickToggleSubLevel = name => {\n    setRowToOpen(prev => {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  const displayedRecursiveChildren = useMemo(() => {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(({ value }) => value === rowToOpen);\n  }, [rowToOpen, childrenForm]);\n\n  return (\n    <Wrapper>\n      <TopTimeline />\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\n        const isVisible = index + 1 < childrenForm.length;\n        const isArrayType = Array.isArray(subChildrenForm);\n        const isSmall = isArrayType || index + 1 === childrenForm.length;\n        const isActive = rowToOpen === value;\n\n        return (\n          <LeftBorderTimeline key={value} isVisible={isVisible}>\n            <RowWrapper isSmall={isSmall}>\n              <Curve fill=\"#a5d5ff\" />\n              <Flex style={{ flex: 1 }}>\n                <RowStyle level={recursiveLevel} isActive={isActive} isCollapsable={isArrayType}>\n                  <CollapseLabel\n                    alignItems=\"center\"\n                    isCollapsable={isArrayType}\n                    onClick={() => {\n                      if (isArrayType) {\n                        handleClickToggleSubLevel(value);\n                      }\n                    }}\n                    title={label}\n                  >\n                    <Text\n                      color={isActive ? 'mediumBlue' : 'grey'}\n                      ellipsis\n                      fontSize=\"xs\"\n                      fontWeight=\"bold\"\n                      lineHeight=\"20px\"\n                      textTransform=\"uppercase\"\n                    >\n                      {label}\n                    </Text>\n                    {required && <RequiredSign />}\n                    <Chevron icon={isActive ? 'caret-up' : 'caret-down'} />\n                  </CollapseLabel>\n                </RowStyle>\n                <Flex style={{ flex: 1 }}>\n                  {propertyActions.map(({ actionId, label, isActionRelatedToCurrentProperty }) => {\n                    if (!isActionRelatedToCurrentProperty) {\n                      return <HiddenAction key={actionId} />;\n                    }\n                    /*\n                     * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n                     * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n                     */\n                    const checkboxName = [\n                      ...pathToDataFromActionRow.split('..'),\n                      actionId,\n                      'properties',\n                      propertyName,\n                      ...parentName.split('..'),\n                      value,\n                    ];\n\n                    const checkboxValue = get(modifiedData, checkboxName, false);\n\n                    if (!subChildrenForm) {\n                      return (\n                        <CheckboxWithCondition\n                          key={label}\n                          disabled={isFormDisabled || IS_DISABLED}\n                          name={checkboxName.join('..')}\n                          onChange={onChangeSimpleCheckbox}\n                          value={checkboxValue}\n                        />\n                      );\n                    }\n\n                    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(\n                      checkboxValue\n                    );\n\n                    return (\n                      <CheckboxWithCondition\n                        key={label}\n                        disabled={isFormDisabled || IS_DISABLED}\n                        name={checkboxName.join('..')}\n                        onChange={onChangeParentCheckbox}\n                        value={hasAllActionsSelected}\n                        someChecked={hasSomeActionsSelected}\n                      />\n                    );\n                  })}\n                </Flex>\n              </Flex>\n            </RowWrapper>\n            {displayedRecursiveChildren && isActive && (\n              <SubLevelWrapper>\n                <SubActionRow\n                  isFormDisabled={isFormDisabled}\n                  parentName={`${parentName}..${value}`}\n                  pathToDataFromActionRow={pathToDataFromActionRow}\n                  propertyActions={propertyActions}\n                  propertyName={propertyName}\n                  recursiveLevel={recursiveLevel + 1}\n                  childrenForm={displayedRecursiveChildren.children}\n                />\n              </SubLevelWrapper>\n            )}\n          </LeftBorderTimeline>\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nSubActionRow.propTypes = {\n  childrenForm: PropTypes.array.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  parentName: PropTypes.string.isRequired,\n  pathToDataFromActionRow: PropTypes.string.isRequired,\n  propertyActions: PropTypes.array.isRequired,\n  propertyName: PropTypes.string.isRequired,\n  recursiveLevel: PropTypes.number.isRequired,\n};\n\nexport default memo(SubActionRow);\n"]},"metadata":{},"sourceType":"script"}