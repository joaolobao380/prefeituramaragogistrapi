{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DraggedItem = exports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactstrap = require(\"reactstrap\");\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _reactDndHtml5Backend = require(\"react-dnd-html5-backend\");\n\nvar _ItemTypes = _interopRequireDefault(require(\"../../../utils/ItemTypes\"));\n\nvar _Inputs = _interopRequireDefault(require(\"../../Inputs\"));\n\nvar _FieldComponent = _interopRequireDefault(require(\"../../FieldComponent\"));\n\nvar _Banner = _interopRequireDefault(require(\"../Banner\"));\n\nvar _FormWrapper = _interopRequireDefault(require(\"../FormWrapper\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/* eslint-disable import/no-cycle */\n\n/* eslint-disable react/no-array-index-key */\n// Issues:\n// https://github.com/react-dnd/react-dnd/issues/1368\n// https://github.com/frontend-collective/react-sortable-tree/issues/490\nvar DraggedItem = function DraggedItem(_ref) {\n  var componentFieldName = _ref.componentFieldName,\n      doesPreviousFieldContainErrorsAndIsOpen = _ref.doesPreviousFieldContainErrorsAndIsOpen,\n      hasErrors = _ref.hasErrors,\n      hasMinError = _ref.hasMinError,\n      isFirst = _ref.isFirst,\n      isReadOnly = _ref.isReadOnly,\n      isOpen = _ref.isOpen,\n      onClickToggle = _ref.onClickToggle,\n      schema = _ref.schema,\n      toggleCollapses = _ref.toggleCollapses,\n      moveComponentField = _ref.moveComponentField,\n      removeRepeatableField = _ref.removeRepeatableField,\n      triggerFormValidation = _ref.triggerFormValidation,\n      checkFormErrors = _ref.checkFormErrors,\n      displayedValue = _ref.displayedValue;\n  var dragRef = (0, _react.useRef)(null);\n  var dropRef = (0, _react.useRef)(null);\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      showForm = _useState2[0],\n      setShowForm = _useState2[1];\n\n  var fields = schema.layouts.edit;\n  (0, _react.useEffect)(function () {\n    if (isOpen) {\n      setShowForm(true);\n    }\n  }, [isOpen]);\n\n  var _useDrop = (0, _reactDnd.useDrop)({\n    accept: _ItemTypes[\"default\"].COMPONENT,\n    canDrop: function canDrop() {\n      return false;\n    },\n    hover: function hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n\n      var dragPath = item.originalPath;\n      var hoverPath = componentFieldName;\n      var fullPathToComponentArray = dragPath.split('.');\n      var dragIndexString = fullPathToComponentArray.slice().splice(-1).join('');\n      var hoverIndexString = hoverPath.split('.').splice(-1).join('');\n      var pathToComponentArray = fullPathToComponentArray.slice(0, fullPathToComponentArray.length - 1);\n      var dragIndex = parseInt(dragIndexString, 10);\n      var hoverIndex = parseInt(hoverIndexString, 10); // Don't replace items with themselves\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      // Determine rectangle on screen\n      var hoverBoundingRect = dropRef.current.getBoundingClientRect(); // Get vertical middle\n\n      // Get vertical middle\n      var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      // Determine mouse position\n      var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      // Get pixels to the top\n      var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action in the data\n\n\n      // Time to actually perform the action in the data\n      moveComponentField(pathToComponentArray, dragIndex, hoverIndex);\n      item.originalPath = hoverPath;\n    }\n  }),\n      _useDrop2 = (0, _slicedToArray2[\"default\"])(_useDrop, 2),\n      drop = _useDrop2[1];\n\n  var _useDrag = (0, _reactDnd.useDrag)({\n    item: {\n      type: _ItemTypes[\"default\"].COMPONENT,\n      displayedValue: displayedValue,\n      originalPath: componentFieldName\n    },\n    begin: function begin() {\n      // Close all collapses\n      toggleCollapses(-1);\n    },\n    end: function end() {\n      // Update the errors\n      triggerFormValidation();\n    },\n    collect: function collect(monitor) {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  }),\n      _useDrag2 = (0, _slicedToArray2[\"default\"])(_useDrag, 3),\n      isDragging = _useDrag2[0].isDragging,\n      drag = _useDrag2[1],\n      preview = _useDrag2[2];\n\n  (0, _react.useEffect)(function () {\n    preview((0, _reactDndHtml5Backend.getEmptyImage)(), {\n      captureDraggingState: false\n    });\n  }, [preview]); // Create the refs\n  // We need 1 for the drop target\n  // 1 for the drag target\n\n  var refs = {\n    dragRef: drag(dragRef),\n    dropRef: drop(dropRef)\n  };\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_Banner[\"default\"], {\n    componentFieldName: componentFieldName,\n    hasErrors: hasErrors,\n    hasMinError: hasMinError,\n    isFirst: isFirst,\n    displayedValue: displayedValue,\n    doesPreviousFieldContainErrorsAndIsOpen: doesPreviousFieldContainErrorsAndIsOpen,\n    isDragging: isDragging,\n    isOpen: isOpen,\n    isReadOnly: isReadOnly,\n    onClickToggle: onClickToggle,\n    onClickRemove: function onClickRemove() {\n      removeRepeatableField(componentFieldName);\n      toggleCollapses();\n    },\n    ref: refs\n  }), /*#__PURE__*/_react[\"default\"].createElement(_reactstrap.Collapse, {\n    isOpen: isOpen,\n    style: {\n      backgroundColor: '#FAFAFB'\n    },\n    onExited: function onExited() {\n      return setShowForm(false);\n    }\n  }, !isDragging && /*#__PURE__*/_react[\"default\"].createElement(_FormWrapper[\"default\"], {\n    hasErrors: hasErrors,\n    isOpen: isOpen,\n    isReadOnly: isReadOnly\n  }, showForm && fields.map(function (fieldRow, key) {\n    return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n      className: \"row\",\n      key: key\n    }, fieldRow.map(function (_ref2) {\n      var name = _ref2.name,\n          fieldSchema = _ref2.fieldSchema,\n          metadatas = _ref2.metadatas,\n          queryInfos = _ref2.queryInfos,\n          size = _ref2.size;\n      var isComponent = fieldSchema.type === 'component';\n      var keys = \"\".concat(componentFieldName, \".\").concat(name);\n\n      if (isComponent) {\n        var componentUid = fieldSchema.component;\n        return /*#__PURE__*/_react[\"default\"].createElement(_FieldComponent[\"default\"], {\n          componentUid: componentUid,\n          isRepeatable: fieldSchema.repeatable,\n          key: name,\n          label: metadatas.label,\n          isNested: true,\n          name: keys,\n          max: fieldSchema.max,\n          min: fieldSchema.min\n        });\n      }\n\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        key: name,\n        className: \"col-\".concat(size)\n      }, /*#__PURE__*/_react[\"default\"].createElement(_Inputs[\"default\"], {\n        autoFocus: false,\n        fieldSchema: fieldSchema,\n        keys: keys,\n        metadatas: metadatas,\n        onBlur: hasErrors ? checkFormErrors : null,\n        queryInfos: queryInfos\n      }));\n    }));\n  }))));\n};\n\nexports.DraggedItem = DraggedItem;\nDraggedItem.defaultProps = {\n  doesPreviousFieldContainErrorsAndIsOpen: false,\n  hasErrors: false,\n  hasMinError: false,\n  isFirst: false,\n  isOpen: false,\n  toggleCollapses: function toggleCollapses() {}\n};\nDraggedItem.propTypes = {\n  componentFieldName: _propTypes[\"default\"].string.isRequired,\n  doesPreviousFieldContainErrorsAndIsOpen: _propTypes[\"default\"].bool,\n  hasErrors: _propTypes[\"default\"].bool,\n  hasMinError: _propTypes[\"default\"].bool,\n  isFirst: _propTypes[\"default\"].bool,\n  isOpen: _propTypes[\"default\"].bool,\n  isReadOnly: _propTypes[\"default\"].bool.isRequired,\n  onClickToggle: _propTypes[\"default\"].func.isRequired,\n  schema: _propTypes[\"default\"].object.isRequired,\n  toggleCollapses: _propTypes[\"default\"].func,\n  moveComponentField: _propTypes[\"default\"].func.isRequired,\n  removeRepeatableField: _propTypes[\"default\"].func.isRequired,\n  triggerFormValidation: _propTypes[\"default\"].func.isRequired,\n  checkFormErrors: _propTypes[\"default\"].func.isRequired,\n  displayedValue: _propTypes[\"default\"].string.isRequired\n};\nvar Memoized = /*#__PURE__*/(0, _react.memo)(DraggedItem);\n\nvar _default = (0, _utils.connect)(Memoized, _utils.select);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/components/RepeatableComponent/DraggedItem/index.js"],"names":["DraggedItem","componentFieldName","doesPreviousFieldContainErrorsAndIsOpen","hasErrors","hasMinError","isFirst","isReadOnly","isOpen","onClickToggle","schema","toggleCollapses","moveComponentField","removeRepeatableField","triggerFormValidation","checkFormErrors","displayedValue","dragRef","dropRef","showForm","setShowForm","fields","layouts","edit","accept","ItemTypes","COMPONENT","canDrop","hover","item","monitor","current","dragPath","originalPath","hoverPath","fullPathToComponentArray","split","dragIndexString","slice","splice","join","hoverIndexString","pathToComponentArray","length","dragIndex","parseInt","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","drop","type","begin","end","collect","isDragging","drag","preview","captureDraggingState","refs","backgroundColor","map","fieldRow","key","name","fieldSchema","metadatas","queryInfos","size","isComponent","keys","componentUid","component","repeatable","label","max","min","defaultProps","propTypes","PropTypes","string","isRequired","bool","func","object","Memoized","select"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport React, { memo, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Collapse } from 'reactstrap';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport ItemTypes from '../../../utils/ItemTypes';\nimport Inputs from '../../Inputs';\nimport FieldComponent from '../../FieldComponent';\nimport Banner from '../Banner';\nimport FormWrapper from '../FormWrapper';\nimport { connect, select } from './utils';\n\n/* eslint-disable react/no-array-index-key */\n\n// Issues:\n// https://github.com/react-dnd/react-dnd/issues/1368\n// https://github.com/frontend-collective/react-sortable-tree/issues/490\n\nconst DraggedItem = ({\n  componentFieldName,\n  doesPreviousFieldContainErrorsAndIsOpen,\n  hasErrors,\n  hasMinError,\n  isFirst,\n  isReadOnly,\n  isOpen,\n  onClickToggle,\n  schema,\n  toggleCollapses,\n  // Retrieved from the select function\n  moveComponentField,\n  removeRepeatableField,\n  triggerFormValidation,\n  checkFormErrors,\n  displayedValue,\n}) => {\n  const dragRef = useRef(null);\n  const dropRef = useRef(null);\n  const [showForm, setShowForm] = useState(false);\n\n  const fields = schema.layouts.edit;\n\n  useEffect(() => {\n    if (isOpen) {\n      setShowForm(true);\n    }\n  }, [isOpen]);\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.COMPONENT,\n    canDrop() {\n      return false;\n    },\n    hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n\n      const dragPath = item.originalPath;\n      const hoverPath = componentFieldName;\n      const fullPathToComponentArray = dragPath.split('.');\n      const dragIndexString = fullPathToComponentArray\n        .slice()\n        .splice(-1)\n        .join('');\n      const hoverIndexString = hoverPath\n        .split('.')\n        .splice(-1)\n        .join('');\n      const pathToComponentArray = fullPathToComponentArray.slice(\n        0,\n        fullPathToComponentArray.length - 1\n      );\n      const dragIndex = parseInt(dragIndexString, 10);\n      const hoverIndex = parseInt(hoverIndexString, 10);\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action in the data\n      moveComponentField(pathToComponentArray, dragIndex, hoverIndex);\n\n      item.originalPath = hoverPath;\n    },\n  });\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: {\n      type: ItemTypes.COMPONENT,\n      displayedValue,\n      originalPath: componentFieldName,\n    },\n    begin: () => {\n      // Close all collapses\n      toggleCollapses(-1);\n    },\n    end: () => {\n      // Update the errors\n      triggerFormValidation();\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: false });\n  }, [preview]);\n\n  // Create the refs\n  // We need 1 for the drop target\n  // 1 for the drag target\n  const refs = {\n    dragRef: drag(dragRef),\n    dropRef: drop(dropRef),\n  };\n\n  return (\n    <>\n      <Banner\n        componentFieldName={componentFieldName}\n        hasErrors={hasErrors}\n        hasMinError={hasMinError}\n        isFirst={isFirst}\n        displayedValue={displayedValue}\n        doesPreviousFieldContainErrorsAndIsOpen={doesPreviousFieldContainErrorsAndIsOpen}\n        isDragging={isDragging}\n        isOpen={isOpen}\n        isReadOnly={isReadOnly}\n        onClickToggle={onClickToggle}\n        onClickRemove={() => {\n          removeRepeatableField(componentFieldName);\n          toggleCollapses();\n        }}\n        ref={refs}\n      />\n      <Collapse\n        isOpen={isOpen}\n        style={{ backgroundColor: '#FAFAFB' }}\n        onExited={() => setShowForm(false)}\n      >\n        {!isDragging && (\n          <FormWrapper hasErrors={hasErrors} isOpen={isOpen} isReadOnly={isReadOnly}>\n            {showForm &&\n              fields.map((fieldRow, key) => {\n                return (\n                  <div className=\"row\" key={key}>\n                    {fieldRow.map(({ name, fieldSchema, metadatas, queryInfos, size }) => {\n                      const isComponent = fieldSchema.type === 'component';\n                      const keys = `${componentFieldName}.${name}`;\n\n                      if (isComponent) {\n                        const componentUid = fieldSchema.component;\n\n                        return (\n                          <FieldComponent\n                            componentUid={componentUid}\n                            isRepeatable={fieldSchema.repeatable}\n                            key={name}\n                            label={metadatas.label}\n                            isNested\n                            name={keys}\n                            max={fieldSchema.max}\n                            min={fieldSchema.min}\n                          />\n                        );\n                      }\n\n                      return (\n                        <div key={name} className={`col-${size}`}>\n                          <Inputs\n                            autoFocus={false}\n                            fieldSchema={fieldSchema}\n                            keys={keys}\n                            metadatas={metadatas}\n                            onBlur={hasErrors ? checkFormErrors : null}\n                            queryInfos={queryInfos}\n                          />\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n          </FormWrapper>\n        )}\n      </Collapse>\n    </>\n  );\n};\n\nDraggedItem.defaultProps = {\n  doesPreviousFieldContainErrorsAndIsOpen: false,\n  hasErrors: false,\n  hasMinError: false,\n  isFirst: false,\n  isOpen: false,\n  toggleCollapses: () => {},\n};\n\nDraggedItem.propTypes = {\n  componentFieldName: PropTypes.string.isRequired,\n  doesPreviousFieldContainErrorsAndIsOpen: PropTypes.bool,\n  hasErrors: PropTypes.bool,\n  hasMinError: PropTypes.bool,\n  isFirst: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  isReadOnly: PropTypes.bool.isRequired,\n  onClickToggle: PropTypes.func.isRequired,\n  schema: PropTypes.object.isRequired,\n  toggleCollapses: PropTypes.func,\n  moveComponentField: PropTypes.func.isRequired,\n  removeRepeatableField: PropTypes.func.isRequired,\n  triggerFormValidation: PropTypes.func.isRequired,\n  checkFormErrors: PropTypes.func.isRequired,\n  displayedValue: PropTypes.string.isRequired,\n};\n\nconst Memoized = memo(DraggedItem);\n\nexport default connect(Memoized, select);\n\nexport { DraggedItem };\n"]},"metadata":{},"sourceType":"script"}