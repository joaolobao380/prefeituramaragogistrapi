{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactSelect = require(\"react-select\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _styles = require(\"@buffetjs/styles\");\n\nvar _getTrad = _interopRequireDefault(require(\"../../utils/getTrad\"));\n\nvar _SelectCheckbox = _interopRequireDefault(require(\"../SelectCheckbox\"));\n\nvar _SelectMenuSubUl = _interopRequireDefault(require(\"../SelectMenuSubUl\"));\n\nvar _UpperFirst = _interopRequireDefault(require(\"../UpperFirst\"));\n\nvar _SelectMenuUl = _interopRequireDefault(require(\"../SelectMenuUl\"));\n\nvar _Text = _interopRequireDefault(require(\"./Text\"));\n\nvar MenuList = function MenuList(_ref) {\n  var _ref$selectProps = _ref.selectProps,\n      changeMediaAllowedTypes = _ref$selectProps.changeMediaAllowedTypes,\n      value = _ref$selectProps.value,\n      rest = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"selectProps\"]);\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      formatMessage = _useGlobalContext.formatMessage;\n\n  var Component = _reactSelect.components.MenuList;\n  var areAllAllowedTypesSelected = value.value && value.value.length === 3;\n  var someChecked = value.value && !areAllAllowedTypesSelected && value.value.length > 0;\n  var options = [{\n    name: 'images',\n    infos: '(JPEG, PNG, GIF, SVG, TIFF, ICO, DVU)'\n  }, {\n    name: 'videos',\n    infos: '(MPEG, MP4, Quicktime, WMV, AVI, FLV)'\n  }, {\n    name: 'files',\n    infos: '(CSV, ZIP, MP3, PDF, Excel, JSON, ...)'\n  }];\n  return /*#__PURE__*/_react[\"default\"].createElement(Component, rest, /*#__PURE__*/_react[\"default\"].createElement(_SelectMenuUl[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"li\", {\n    className: \"li-multi-menu\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    style: {\n      marginTop: 3\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_styles.CheckboxWrapper, null, /*#__PURE__*/_react[\"default\"].createElement(_styles.Label, {\n    htmlFor: \"overrideReactSelectBehavior\",\n    onClick: function onClick() {\n      changeMediaAllowedTypes({\n        target: {\n          name: 'all',\n          value: !areAllAllowedTypesSelected\n        }\n      });\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_SelectCheckbox[\"default\"], {\n    id: \"checkAll\",\n    checked: areAllAllowedTypesSelected,\n    someChecked: someChecked,\n    name: \"all\",\n    onChange: function onChange() {}\n  }), /*#__PURE__*/_react[\"default\"].createElement(_UpperFirst[\"default\"], {\n    content: \"All\"\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_SelectMenuSubUl[\"default\"], {\n    tad: \"ul\",\n    isOpen: true\n  }, options.map(function (_ref2) {\n    var name = _ref2.name,\n        infos = _ref2.infos;\n    var isChecked = value.value && value.value.includes(name);\n    var target = {\n      name: name,\n      value: !isChecked\n    };\n    return /*#__PURE__*/_react[\"default\"].createElement(\"li\", {\n      key: name\n    }, /*#__PURE__*/_react[\"default\"].createElement(_styles.CheckboxWrapper, null, /*#__PURE__*/_react[\"default\"].createElement(_styles.Label, {\n      htmlFor: name,\n      onClick: function onClick() {\n        changeMediaAllowedTypes({\n          target: target\n        });\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(_SelectCheckbox[\"default\"], {\n      id: \"check\",\n      name: name // Remove the handler\n      ,\n      onChange: function onChange() {},\n      checked: isChecked\n    }), /*#__PURE__*/_react[\"default\"].createElement(_Text[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_UpperFirst[\"default\"], {\n      content: formatMessage({\n        id: (0, _getTrad[\"default\"])(\"form.attribute.media.allowed-types.option-\".concat(name))\n      })\n    })), /*#__PURE__*/_react[\"default\"].createElement(_Text[\"default\"], {\n      fontSize: \"sm\",\n      color: \"#B3B5B9\",\n      textTransform: \"italic\"\n    }, \"\\xA0\", infos))));\n  })))));\n};\n\nMenuList.defaultProps = {\n  selectProps: {\n    value: {}\n  }\n};\nMenuList.propTypes = {\n  selectProps: _propTypes[\"default\"].shape({\n    changeMediaAllowedTypes: _propTypes[\"default\"].func.isRequired,\n    value: _propTypes[\"default\"].object\n  })\n};\nvar _default = MenuList;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/components/AllowedTypesSelect/MenuList.js"],"names":["MenuList","selectProps","changeMediaAllowedTypes","value","rest","formatMessage","Component","components","areAllAllowedTypesSelected","length","someChecked","options","name","infos","marginTop","target","map","isChecked","includes","id","defaultProps","propTypes","PropTypes","shape","func","isRequired","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { components } from 'react-select';\nimport { useGlobalContext } from 'strapi-helper-plugin';\nimport { CheckboxWrapper, Label } from '@buffetjs/styles';\nimport getTrad from '../../utils/getTrad';\nimport SelectCheckbox from '../SelectCheckbox';\nimport SubUl from '../SelectMenuSubUl';\nimport UpperFirst from '../UpperFirst';\nimport Ul from '../SelectMenuUl';\nimport Text from './Text';\n\nconst MenuList = ({ selectProps: { changeMediaAllowedTypes, value }, ...rest }) => {\n  const { formatMessage } = useGlobalContext();\n  const Component = components.MenuList;\n  const areAllAllowedTypesSelected = value.value && value.value.length === 3;\n  const someChecked = value.value && !areAllAllowedTypesSelected && value.value.length > 0;\n  const options = [\n    {\n      name: 'images',\n      infos: '(JPEG, PNG, GIF, SVG, TIFF, ICO, DVU)',\n    },\n    {\n      name: 'videos',\n      infos: '(MPEG, MP4, Quicktime, WMV, AVI, FLV)',\n    },\n\n    {\n      name: 'files',\n      infos: '(CSV, ZIP, MP3, PDF, Excel, JSON, ...)',\n    },\n  ];\n\n  return (\n    <Component {...rest}>\n      <Ul>\n        <li className=\"li-multi-menu\">\n          <div style={{ marginTop: 3 }}>\n            <CheckboxWrapper>\n              <Label\n                htmlFor=\"overrideReactSelectBehavior\"\n                onClick={() => {\n                  changeMediaAllowedTypes({\n                    target: { name: 'all', value: !areAllAllowedTypesSelected },\n                  });\n                }}\n              >\n                <SelectCheckbox\n                  id=\"checkAll\"\n                  checked={areAllAllowedTypesSelected}\n                  someChecked={someChecked}\n                  name=\"all\"\n                  onChange={() => {}}\n                />\n                <UpperFirst content=\"All\" />\n              </Label>\n            </CheckboxWrapper>\n          </div>\n          <SubUl tad=\"ul\" isOpen>\n            {options.map(({ name, infos }) => {\n              const isChecked = value.value && value.value.includes(name);\n              const target = { name, value: !isChecked };\n\n              return (\n                <li key={name}>\n                  <CheckboxWrapper>\n                    <Label\n                      htmlFor={name}\n                      onClick={() => {\n                        changeMediaAllowedTypes({ target });\n                      }}\n                    >\n                      <SelectCheckbox\n                        id=\"check\"\n                        name={name}\n                        // Remove the handler\n                        onChange={() => {}}\n                        checked={isChecked}\n                      />\n                      <Text>\n                        <UpperFirst\n                          content={formatMessage({\n                            id: getTrad(`form.attribute.media.allowed-types.option-${name}`),\n                          })}\n                        />\n                      </Text>\n                      <Text fontSize=\"sm\" color=\"#B3B5B9\" textTransform=\"italic\">\n                        &nbsp;{infos}\n                      </Text>\n                    </Label>\n                  </CheckboxWrapper>\n                </li>\n              );\n            })}\n          </SubUl>\n        </li>\n      </Ul>\n    </Component>\n  );\n};\n\nMenuList.defaultProps = {\n  selectProps: {\n    value: {},\n  },\n};\n\nMenuList.propTypes = {\n  selectProps: PropTypes.shape({\n    changeMediaAllowedTypes: PropTypes.func.isRequired,\n    value: PropTypes.object,\n  }),\n};\n\nexport default MenuList;\n"]},"metadata":{},"sourceType":"script"}