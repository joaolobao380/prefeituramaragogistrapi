{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = require(\"react\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _getCtOrStLinks = _interopRequireDefault(require(\"./utils/getCtOrStLinks\"));\n\nvar _getPluginSectionLinks = _interopRequireDefault(require(\"./utils/getPluginSectionLinks\"));\n\nvar _getGeneralLinks = _interopRequireDefault(require(\"./utils/getGeneralLinks\"));\n\nvar _actions = require(\"./actions\");\n\nvar _useSettingsMenu2 = _interopRequireDefault(require(\"../../hooks/useSettingsMenu\"));\n\nvar _toPluginLinks = _interopRequireDefault(require(\"./utils/toPluginLinks\"));\n\nvar _selectors = _interopRequireDefault(require(\"./selectors\"));\n\nvar useMenuSections = function useMenuSections(plugins, shouldUpdateStrapi) {\n  var state = (0, _reactRedux.useSelector)(_selectors[\"default\"]);\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  var _useUser = (0, _strapiHelperPlugin.useUser)(),\n      userPermissions = _useUser.userPermissions;\n\n  var _useSettingsMenu = (0, _useSettingsMenu2[\"default\"])(true),\n      settingsMenu = _useSettingsMenu.menu; // We are using a ref because we don't want our effect to have this in its dependencies array\n\n\n  var generalSectionLinksRef = (0, _react.useRef)(state.generalSectionLinks);\n  var shouldUpdateStrapiRef = (0, _react.useRef)(shouldUpdateStrapi); // Since the settingsMenu is not managing any state because of the true argument we can use a ref here\n  // so we don't need to add it to the effect dependencies array\n\n  var settingsMenuRef = (0, _react.useRef)(settingsMenu); // Once in the app lifecycle the plugins should not be added into any dependencies array, in order to prevent\n  // the effect to be run when another plugin is using one plugins internal api for instance\n  // so it's definitely ok to use a ref here\n\n  var pluginsRef = (0, _react.useRef)(plugins);\n\n  var toggleLoading = function toggleLoading() {\n    return dispatch((0, _actions.toggleIsLoading)());\n  };\n\n  var resolvePermissions = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      var permissions,\n          pluginsSectionLinks,\n          _yield$getCtOrStLinks,\n          authorizedCtLinks,\n          authorizedStLinks,\n          contentTypes,\n          authorizedPluginSectionLinks,\n          authorizedGeneralSectionLinks,\n          _args = arguments;\n\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              permissions = _args.length > 0 && _args[0] !== undefined ? _args[0] : userPermissions;\n              pluginsSectionLinks = (0, _toPluginLinks[\"default\"])(pluginsRef.current);\n              _context.next = 4;\n              return (0, _getCtOrStLinks[\"default\"])(permissions);\n\n            case 4:\n              _yield$getCtOrStLinks = _context.sent;\n              authorizedCtLinks = _yield$getCtOrStLinks.authorizedCtLinks;\n              authorizedStLinks = _yield$getCtOrStLinks.authorizedStLinks;\n              contentTypes = _yield$getCtOrStLinks.contentTypes;\n              _context.next = 10;\n              return (0, _getPluginSectionLinks[\"default\"])(permissions, pluginsSectionLinks);\n\n            case 10:\n              authorizedPluginSectionLinks = _context.sent;\n              _context.next = 13;\n              return (0, _getGeneralLinks[\"default\"])(permissions, generalSectionLinksRef.current, settingsMenuRef.current, shouldUpdateStrapiRef.current);\n\n            case 13:\n              authorizedGeneralSectionLinks = _context.sent;\n              dispatch((0, _actions.setCtOrStLinks)(authorizedCtLinks, authorizedStLinks, contentTypes));\n              dispatch((0, _actions.setSectionLinks)(authorizedGeneralSectionLinks, authorizedPluginSectionLinks));\n              dispatch((0, _actions.unsetIsLoading)());\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function resolvePermissions() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var resolvePermissionsRef = (0, _react.useRef)(resolvePermissions);\n  (0, _react.useEffect)(function () {\n    resolvePermissionsRef.current(userPermissions);\n  }, [userPermissions, dispatch]);\n  return {\n    state: state,\n    generateMenu: resolvePermissionsRef.current,\n    toggleLoading: toggleLoading\n  };\n};\n\nvar _default = useMenuSections;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/containers/LeftMenu/useMenuSections.js"],"names":["useMenuSections","plugins","shouldUpdateStrapi","state","selectMenuLinks","dispatch","userPermissions","settingsMenu","menu","generalSectionLinksRef","generalSectionLinks","shouldUpdateStrapiRef","settingsMenuRef","pluginsRef","toggleLoading","resolvePermissions","permissions","pluginsSectionLinks","current","authorizedCtLinks","authorizedStLinks","contentTypes","authorizedPluginSectionLinks","authorizedGeneralSectionLinks","resolvePermissionsRef","generateMenu"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAUC,kBAAV,EAAiC;AACvD,MAAMC,KAAK,GAAG,6BAAYC,qBAAZ,CAAd;AACA,MAAMC,QAAQ,GAAG,8BAAjB;;AACA,iBAA4B,kCAA5B;AAAA,MAAQC,eAAR,YAAQA,eAAR;;AACA,yBAA+B,kCAAgB,IAAhB,CAA/B;AAAA,MAAcC,YAAd,oBAAQC,IAAR,CAJuD,CAKvD;;;AACA,MAAMC,sBAAsB,GAAG,mBAAON,KAAK,CAACO,mBAAb,CAA/B;AACA,MAAMC,qBAAqB,GAAG,mBAAOT,kBAAP,CAA9B,CAPuD,CAQvD;AACA;;AACA,MAAMU,eAAe,GAAG,mBAAOL,YAAP,CAAxB,CAVuD,CAWvD;AACA;AACA;;AACA,MAAMM,UAAU,GAAG,mBAAOZ,OAAP,CAAnB;;AAEA,MAAMa,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMT,QAAQ,CAAC,+BAAD,CAAd;AAAA,GAAtB;;AAEA,MAAMU,kBAAkB;AAAA,6FAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOC,cAAAA,WAAP,2DAAqBV,eAArB;AACnBW,cAAAA,mBADmB,GACG,+BAAcJ,UAAU,CAACK,OAAzB,CADH;AAAA;AAAA,qBAE4C,gCACnEF,WADmE,CAF5C;;AAAA;AAAA;AAEjBG,cAAAA,iBAFiB,yBAEjBA,iBAFiB;AAEEC,cAAAA,iBAFF,yBAEEA,iBAFF;AAEqBC,cAAAA,YAFrB,yBAEqBA,YAFrB;AAAA;AAAA,qBAMkB,uCACzCL,WADyC,EAEzCC,mBAFyC,CANlB;;AAAA;AAMnBK,cAAAA,4BANmB;AAAA;AAAA,qBAWmB,iCAC1CN,WAD0C,EAE1CP,sBAAsB,CAACS,OAFmB,EAG1CN,eAAe,CAACM,OAH0B,EAI1CP,qBAAqB,CAACO,OAJoB,CAXnB;;AAAA;AAWnBK,cAAAA,6BAXmB;AAkBzBlB,cAAAA,QAAQ,CAAC,6BAAec,iBAAf,EAAkCC,iBAAlC,EAAqDC,YAArD,CAAD,CAAR;AACAhB,cAAAA,QAAQ,CAAC,8BAAgBkB,6BAAhB,EAA+CD,4BAA/C,CAAD,CAAR;AACAjB,cAAAA,QAAQ,CAAC,8BAAD,CAAR;;AApByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBU,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAuBA,MAAMS,qBAAqB,GAAG,mBAAOT,kBAAP,CAA9B;AAEA,wBAAU,YAAM;AACdS,IAAAA,qBAAqB,CAACN,OAAtB,CAA8BZ,eAA9B;AACD,GAFD,EAEG,CAACA,eAAD,EAAkBD,QAAlB,CAFH;AAIA,SAAO;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASsB,IAAAA,YAAY,EAAED,qBAAqB,CAACN,OAA7C;AAAsDJ,IAAAA,aAAa,EAAbA;AAAtD,GAAP;AACD,CAhDD;;eAkDed,e","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useUser } from 'strapi-helper-plugin';\nimport { useSelector, useDispatch } from 'react-redux';\nimport getCtOrStLinks from './utils/getCtOrStLinks';\nimport getPluginSectionLinks from './utils/getPluginSectionLinks';\nimport getGeneralLinks from './utils/getGeneralLinks';\nimport { setCtOrStLinks, setSectionLinks, toggleIsLoading, unsetIsLoading } from './actions';\nimport useSettingsMenu from '../../hooks/useSettingsMenu';\nimport toPluginLinks from './utils/toPluginLinks';\nimport selectMenuLinks from './selectors';\n\nconst useMenuSections = (plugins, shouldUpdateStrapi) => {\n  const state = useSelector(selectMenuLinks);\n  const dispatch = useDispatch();\n  const { userPermissions } = useUser();\n  const { menu: settingsMenu } = useSettingsMenu(true);\n  // We are using a ref because we don't want our effect to have this in its dependencies array\n  const generalSectionLinksRef = useRef(state.generalSectionLinks);\n  const shouldUpdateStrapiRef = useRef(shouldUpdateStrapi);\n  // Since the settingsMenu is not managing any state because of the true argument we can use a ref here\n  // so we don't need to add it to the effect dependencies array\n  const settingsMenuRef = useRef(settingsMenu);\n  // Once in the app lifecycle the plugins should not be added into any dependencies array, in order to prevent\n  // the effect to be run when another plugin is using one plugins internal api for instance\n  // so it's definitely ok to use a ref here\n  const pluginsRef = useRef(plugins);\n\n  const toggleLoading = () => dispatch(toggleIsLoading());\n\n  const resolvePermissions = async (permissions = userPermissions) => {\n    const pluginsSectionLinks = toPluginLinks(pluginsRef.current);\n    const { authorizedCtLinks, authorizedStLinks, contentTypes } = await getCtOrStLinks(\n      permissions\n    );\n\n    const authorizedPluginSectionLinks = await getPluginSectionLinks(\n      permissions,\n      pluginsSectionLinks\n    );\n\n    const authorizedGeneralSectionLinks = await getGeneralLinks(\n      permissions,\n      generalSectionLinksRef.current,\n      settingsMenuRef.current,\n      shouldUpdateStrapiRef.current\n    );\n\n    dispatch(setCtOrStLinks(authorizedCtLinks, authorizedStLinks, contentTypes));\n    dispatch(setSectionLinks(authorizedGeneralSectionLinks, authorizedPluginSectionLinks));\n    dispatch(unsetIsLoading());\n  };\n\n  const resolvePermissionsRef = useRef(resolvePermissions);\n\n  useEffect(() => {\n    resolvePermissionsRef.current(userPermissions);\n  }, [userPermissions, dispatch]);\n\n  return { state, generateMenu: resolvePermissionsRef.current, toggleLoading };\n};\n\nexport default useMenuSections;\n"]},"metadata":{},"sourceType":"script"}