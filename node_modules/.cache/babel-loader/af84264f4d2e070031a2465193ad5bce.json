{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _taggedTemplateLiteral2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteral\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _lodash = require(\"lodash\");\n\nvar _constants = _interopRequireDefault(require(\"ee_else_ce/components/Roles/PluginsAndSettings/SubCategory/utils/constants\"));\n\nvar _hooks = require(\"../../../../hooks\");\n\nvar _utils = require(\"../../utils\");\n\nvar _ConditionsButton = _interopRequireDefault(require(\"../../ConditionsButton\"));\n\nvar _ConditionsModal = _interopRequireDefault(require(\"../../ConditionsModal\"));\n\nvar _CheckboxWrapper = _interopRequireDefault(require(\"./CheckboxWrapper\"));\n\nvar _ConditionsButtonWrapper = _interopRequireDefault(require(\"./ConditionsButtonWrapper\"));\n\nvar _Wrapper = _interopRequireDefault(require(\"./Wrapper\"));\n\nvar _utils2 = require(\"./utils\");\n\nvar _templateObject;\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Border = _styledComponents[\"default\"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  flex: 1;\\n  align-self: center;\\n  border-top: 1px solid #f6f6f6;\\n  padding: 0px 10px;\\n\"])));\n\nvar SubCategory = function SubCategory(_ref) {\n  var categoryName = _ref.categoryName,\n      isFormDisabled = _ref.isFormDisabled,\n      subCategoryName = _ref.subCategoryName,\n      actions = _ref.actions,\n      pathToData = _ref.pathToData;\n\n  var _useState = (0, _react.useState)({\n    isOpen: false,\n    isMounted: false\n  }),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      modalState = _useState2[0],\n      setModalState = _useState2[1];\n\n  var _usePermissionsDataMa = (0, _hooks.usePermissionsDataManager)(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var mainData = (0, _lodash.get)(modifiedData, pathToData, {});\n  var dataWithoutCondition = (0, _react.useMemo)(function () {\n    return Object.keys(mainData).reduce(function (acc, current) {\n      acc[current] = (0, _utils.removeConditionKeyFromData)(mainData[current]);\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  var _getCheckboxState = (0, _utils.getCheckboxState)(dataWithoutCondition),\n      hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n      hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected;\n\n  var handleToggleModalIsOpen = function handleToggleModalIsOpen() {\n    setModalState(function (prevState) {\n      return {\n        isMounted: true,\n        isOpen: !prevState.isOpen\n      };\n    });\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setModalState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        isMounted: false\n      });\n    });\n  }; // We need to format the actions so it matches the shape of the ConditionsModal actions props\n\n\n  var formattedActions = (0, _utils2.formatActions)(actions, modifiedData, pathToData);\n  var doesButtonHasCondition = (0, _utils2.getConditionsButtonState)((0, _lodash.get)(modifiedData, (0, _toConsumableArray2[\"default\"])(pathToData), {}));\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_Wrapper[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    right: true,\n    size: \"sm\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    lineHeight: \"18px\",\n    color: \"#919bae\",\n    fontWeight: \"bold\",\n    fontSize: \"xs\",\n    textTransform: \"uppercase\"\n  }, subCategoryName)), /*#__PURE__*/_react[\"default\"].createElement(Border, null), /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    left: true,\n    size: \"sm\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.BaselineAlignment, {\n    top: true,\n    size: \"1px\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_core.Checkbox, {\n    name: pathToData.join('..'),\n    message: formatMessage({\n      id: 'app.utils.select-all'\n    }),\n    disabled: isFormDisabled || _constants[\"default\"],\n    onChange: onChangeParentCheckbox,\n    someChecked: hasSomeActionsSelected,\n    value: hasAllActionsSelected\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.BaselineAlignment, {\n    top: true,\n    size: \"1px\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    top: true,\n    size: \"xs\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    flexWrap: \"wrap\"\n  }, formattedActions.map(function (_ref2) {\n    var checkboxName = _ref2.checkboxName,\n        value = _ref2.value,\n        action = _ref2.action,\n        displayName = _ref2.displayName,\n        hasConditions = _ref2.hasConditions;\n    return /*#__PURE__*/_react[\"default\"].createElement(_CheckboxWrapper[\"default\"], {\n      disabled: isFormDisabled || _constants[\"default\"],\n      hasConditions: hasConditions,\n      key: action\n    }, /*#__PURE__*/_react[\"default\"].createElement(_core.Checkbox, {\n      name: checkboxName,\n      disabled: isFormDisabled || _constants[\"default\"],\n      message: displayName,\n      onChange: onChangeSimpleCheckbox,\n      value: value\n    }));\n  })), /*#__PURE__*/_react[\"default\"].createElement(_ConditionsButtonWrapper[\"default\"], {\n    disabled: isFormDisabled,\n    hasConditions: doesButtonHasCondition\n  }, /*#__PURE__*/_react[\"default\"].createElement(_ConditionsButton[\"default\"], {\n    hasConditions: doesButtonHasCondition,\n    onClick: handleToggleModalIsOpen\n  })))), modalState.isMounted && /*#__PURE__*/_react[\"default\"].createElement(_ConditionsModal[\"default\"], {\n    headerBreadCrumbs: [categoryName, subCategoryName],\n    actions: formattedActions,\n    isOpen: modalState.isOpen,\n    isFormDisabled: isFormDisabled,\n    onClosed: handleModalClose,\n    onToggle: handleToggleModalIsOpen\n  }));\n};\n\nSubCategory.propTypes = {\n  actions: _propTypes[\"default\"].array.isRequired,\n  categoryName: _propTypes[\"default\"].string.isRequired,\n  isFormDisabled: _propTypes[\"default\"].bool.isRequired,\n  subCategoryName: _propTypes[\"default\"].string.isRequired,\n  pathToData: _propTypes[\"default\"].array.isRequired\n};\nvar _default = SubCategory;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/PluginsAndSettings/SubCategory/index.js"],"names":["Border","styled","div","SubCategory","categoryName","isFormDisabled","subCategoryName","actions","pathToData","isOpen","isMounted","modalState","setModalState","modifiedData","onChangeParentCheckbox","onChangeSimpleCheckbox","formatMessage","mainData","dataWithoutCondition","Object","keys","reduce","acc","current","hasAllActionsSelected","hasSomeActionsSelected","handleToggleModalIsOpen","prevState","handleModalClose","formattedActions","doesButtonHasCondition","join","id","IS_DISABLED","map","checkboxName","value","action","displayName","hasConditions","propTypes","PropTypes","array","isRequired","string","bool"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Flex, Padded, Text, Checkbox } from '@buffetjs/core';\nimport { useIntl } from 'react-intl';\nimport { BaselineAlignment } from 'strapi-helper-plugin';\nimport { get } from 'lodash';\nimport IS_DISABLED from 'ee_else_ce/components/Roles/PluginsAndSettings/SubCategory/utils/constants';\nimport { usePermissionsDataManager } from '../../../../hooks';\nimport { getCheckboxState, removeConditionKeyFromData } from '../../utils';\nimport ConditionsButton from '../../ConditionsButton';\nimport ConditionsModal from '../../ConditionsModal';\nimport CheckboxWrapper from './CheckboxWrapper';\nimport ConditionsButtonWrapper from './ConditionsButtonWrapper';\nimport Wrapper from './Wrapper';\nimport { formatActions, getConditionsButtonState } from './utils';\n\nconst Border = styled.div`\n  flex: 1;\n  align-self: center;\n  border-top: 1px solid #f6f6f6;\n  padding: 0px 10px;\n`;\n\nconst SubCategory = ({ categoryName, isFormDisabled, subCategoryName, actions, pathToData }) => {\n  const [modalState, setModalState] = useState({ isOpen: false, isMounted: false });\n  const {\n    modifiedData,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n  const { formatMessage } = useIntl();\n\n  const mainData = get(modifiedData, pathToData, {});\n  const dataWithoutCondition = useMemo(() => {\n    return Object.keys(mainData).reduce((acc, current) => {\n      acc[current] = removeConditionKeyFromData(mainData[current]);\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  const handleToggleModalIsOpen = () => {\n    setModalState(prevState => ({ isMounted: true, isOpen: !prevState.isOpen }));\n  };\n\n  const handleModalClose = () => {\n    setModalState(prevState => ({ ...prevState, isMounted: false }));\n  };\n\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\n  const formattedActions = formatActions(actions, modifiedData, pathToData);\n  const doesButtonHasCondition = getConditionsButtonState(get(modifiedData, [...pathToData], {}));\n\n  return (\n    <>\n      <Wrapper>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Padded right size=\"sm\">\n            <Text\n              lineHeight=\"18px\"\n              color=\"#919bae\"\n              fontWeight=\"bold\"\n              fontSize=\"xs\"\n              textTransform=\"uppercase\"\n            >\n              {subCategoryName}\n            </Text>\n          </Padded>\n          <Border />\n          <Padded left size=\"sm\">\n            <BaselineAlignment top size=\"1px\" />\n            <Checkbox\n              name={pathToData.join('..')}\n              message={formatMessage({ id: 'app.utils.select-all' })}\n              disabled={isFormDisabled || IS_DISABLED}\n              onChange={onChangeParentCheckbox}\n              someChecked={hasSomeActionsSelected}\n              value={hasAllActionsSelected}\n            />\n          </Padded>\n        </Flex>\n        <BaselineAlignment top size=\"1px\" />\n        <Padded top size=\"xs\">\n          <Flex flexWrap=\"wrap\">\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\n              return (\n                <CheckboxWrapper\n                  disabled={isFormDisabled || IS_DISABLED}\n                  hasConditions={hasConditions}\n                  key={action}\n                >\n                  <Checkbox\n                    name={checkboxName}\n                    disabled={isFormDisabled || IS_DISABLED}\n                    message={displayName}\n                    onChange={onChangeSimpleCheckbox}\n                    value={value}\n                  />\n                </CheckboxWrapper>\n              );\n            })}\n          </Flex>\n          <ConditionsButtonWrapper disabled={isFormDisabled} hasConditions={doesButtonHasCondition}>\n            <ConditionsButton\n              hasConditions={doesButtonHasCondition}\n              onClick={handleToggleModalIsOpen}\n            />\n          </ConditionsButtonWrapper>\n        </Padded>\n      </Wrapper>\n      {modalState.isMounted && (\n        <ConditionsModal\n          headerBreadCrumbs={[categoryName, subCategoryName]}\n          actions={formattedActions}\n          isOpen={modalState.isOpen}\n          isFormDisabled={isFormDisabled}\n          onClosed={handleModalClose}\n          onToggle={handleToggleModalIsOpen}\n        />\n      )}\n    </>\n  );\n};\n\nSubCategory.propTypes = {\n  actions: PropTypes.array.isRequired,\n  categoryName: PropTypes.string.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  subCategoryName: PropTypes.string.isRequired,\n  pathToData: PropTypes.array.isRequired,\n};\n\nexport default SubCategory;\n"]},"metadata":{},"sourceType":"script"}