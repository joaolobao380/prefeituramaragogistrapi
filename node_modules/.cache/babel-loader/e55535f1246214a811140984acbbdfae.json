{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _draftJs = require(\"draft-js\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _WysiwygProvider = _interopRequireDefault(require(\"../../containers/WysiwygProvider\"));\n\nvar _WysiwygInlineControls = _interopRequireDefault(require(\"../WysiwygInlineControls\"));\n\nvar _PreviewWysiwyg = _interopRequireDefault(require(\"../PreviewWysiwyg\"));\n\nvar _WysiwygBottomControls = _interopRequireDefault(require(\"../WysiwygBottomControls\"));\n\nvar _WysiwygEditor = _interopRequireDefault(require(\"../WysiwygEditor\"));\n\nvar _MediaLib = _interopRequireDefault(require(\"./MediaLib\"));\n\nvar _customSelect = _interopRequireDefault(require(\"./customSelect\"));\n\nvar _previewControl = _interopRequireDefault(require(\"./previewControl\"));\n\nvar _toggleMode = _interopRequireDefault(require(\"./toggleMode\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _utils = require(\"./utils\");\n\nvar _EditorWrapper = _interopRequireDefault(require(\"./EditorWrapper\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable */\nvar Wysiwyg = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2[\"default\"])(Wysiwyg, _React$Component);\n\n  var _super = _createSuper(Wysiwyg);\n\n  function Wysiwyg(_props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Wysiwyg);\n    _this = _super.call(this, _props);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"setInitialValue\", function (props) {\n      if ((0, _lodash.isEmpty)(props.value)) {\n        return _this.setState({\n          editorState: _draftJs.EditorState.createEmpty()\n        });\n      }\n\n      var contentState = _draftJs.ContentState.createFromText(props.value);\n\n      var newEditorState = _draftJs.EditorState.createWithContent(contentState);\n\n      var editorState = _this.state.isFocused ? _draftJs.EditorState.moveFocusToEnd(newEditorState) : newEditorState;\n      return _this.setState({\n        editorState: editorState\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"addContent\", function (content, style) {\n      var selectedText = _this.getSelectedText(); // Retrieve the associated data for the type to add\n\n\n      var _getBlockContent = (0, _helpers.getBlockContent)(style),\n          innerContent = _getBlockContent.innerContent,\n          endReplacer = _getBlockContent.endReplacer,\n          startReplacer = _getBlockContent.startReplacer; // Replace the selected text by the markdown command or insert default text\n\n\n      var defaultContent = selectedText === '' ? (0, _lodash.replace)(content, 'textToReplace', innerContent) : (0, _lodash.replace)(content, 'textToReplace', selectedText); // Get the current cursor position\n\n      var cursorPosition = (0, _helpers.getOffSets)(_this.getSelection()).start;\n\n      var textWithEntity = _this.modifyBlockContent(defaultContent); // Highlight the text\n\n\n      var _getDefaultSelectionO = (0, _helpers.getDefaultSelectionOffsets)(defaultContent, startReplacer, endReplacer, cursorPosition),\n          anchorOffset = _getDefaultSelectionO.anchorOffset,\n          focusOffset = _getDefaultSelectionO.focusOffset; // Merge the current selection with the new one\n\n\n      var updatedSelection = _this.getSelection().merge({\n        anchorOffset: anchorOffset,\n        focusOffset: focusOffset\n      });\n\n      var newEditorState = _draftJs.EditorState.push(_this.getEditorState(), textWithEntity, 'insert-character');\n\n      if (selectedText.length === 0) {\n        _this.setState({\n          // Highlight the text if the selection was empty\n          editorState: _draftJs.EditorState.forceSelection(newEditorState, updatedSelection)\n        }, function () {\n          _this.focus(); // Update the parent reducer\n\n        });\n\n        _this.sendData(newEditorState);\n\n        return;\n      } // Don't handle selection: the user has selected some text to be changed with the appropriate markdown\n\n\n      _this.setState({\n        editorState: newEditorState\n      }, function () {\n        _this.focus();\n      });\n\n      _this.sendData(newEditorState);\n\n      return;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"addOlBlock\", function () {\n      // Get all the selected blocks\n      var selectedBlocksList = (0, _utils.getSelectedBlocksList)(_this.getEditorState());\n\n      var newEditorState = _this.getEditorState(); // Check if the cursor is NOT at the beginning of a new line\n      // So we need to move all the next blocks\n\n\n      if ((0, _helpers.getOffSets)(_this.getSelection()).start !== 0) {\n        // Retrieve all the blocks after the current position\n        var nextBlocks = (0, _utils.getNextBlocksList)(newEditorState, _this.getSelection().getStartKey());\n        var liNumber = 1; // Loop to update each block after the inserted li\n\n        nextBlocks.map(function (block, index) {\n          var previousContent = index === 0 ? _this.getEditorState().getCurrentContent().getBlockForKey(_this.getCurrentAnchorKey()) : newEditorState.getCurrentContent().getBlockBefore(block.getKey()); // Check if there was an li before the position so we update the entire list bullets\n\n          var number = previousContent ? parseInt(previousContent.getText().split('.')[0], 10) : 0;\n          liNumber = (0, _lodash.isNaN)(number) ? 1 : number + 1;\n          var nextBlockText = index === 0 ? \"\".concat(liNumber, \". \") : nextBlocks.get(index - 1).getText(); // Update the current block\n\n          var newBlock = (0, _utils.createNewBlock)(nextBlockText, 'block-list', block.getKey()); // Update the contentState\n\n          var newContentState = _this.createNewContentStateFromBlock(newBlock, newEditorState.getCurrentContent());\n\n          newEditorState = _draftJs.EditorState.push(newEditorState, newContentState);\n        }); // Move the cursor to the correct position and add a space after '.'\n        // 2 for the dot and the space after, we add the number length (10 = offset of 2)\n\n        var offset = 2 + liNumber.toString().length;\n        var updatedSelection = (0, _utils.updateSelection)(_this.getSelection(), nextBlocks, offset);\n        return _this.setState({\n          editorState: _draftJs.EditorState.acceptSelection(newEditorState, updatedSelection)\n        });\n      } // If the cursor is at the beginning we need to move all the content after the cursor so we don't loose the data\n\n\n      selectedBlocksList.map(function (block, i) {\n        var selectedText = block.getText();\n        var li = selectedText === '' ? \"\".concat(i + 1, \". \") : \"\".concat(i + 1, \". \").concat(selectedText);\n        var newBlock = (0, _utils.createNewBlock)(li, 'block-list', block.getKey());\n\n        var newContentState = _this.createNewContentStateFromBlock(newBlock, newEditorState.getCurrentContent());\n\n        newEditorState = _draftJs.EditorState.push(newEditorState, newContentState);\n      }); // Update the parent reducer\n\n      _this.sendData(newEditorState);\n\n      return _this.setState({\n        editorState: _draftJs.EditorState.moveFocusToEnd(newEditorState)\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"addUlBlock\", function () {\n      var selectedBlocksList = (0, _utils.getSelectedBlocksList)(_this.getEditorState());\n\n      var newEditorState = _this.getEditorState();\n\n      if ((0, _helpers.getOffSets)(_this.getSelection()).start !== 0) {\n        var nextBlocks = (0, _utils.getNextBlocksList)(newEditorState, _this.getSelection().getStartKey());\n        nextBlocks.map(function (block, index) {\n          var nextBlockText = index === 0 ? '- ' : nextBlocks.get(index - 1).getText();\n          var newBlock = (0, _utils.createNewBlock)(nextBlockText, 'block-list', block.getKey());\n\n          var newContentState = _this.createNewContentStateFromBlock(newBlock, newEditorState.getCurrentContent());\n\n          newEditorState = _draftJs.EditorState.push(newEditorState, newContentState);\n        });\n        var updatedSelection = (0, _utils.updateSelection)(_this.getSelection(), nextBlocks, 2);\n        return _this.setState({\n          editorState: _draftJs.EditorState.acceptSelection(newEditorState, updatedSelection)\n        });\n      }\n\n      selectedBlocksList.map(function (block) {\n        var selectedText = block.getText();\n        var li = selectedText === '' ? '- ' : \"- \".concat(selectedText);\n        var newBlock = (0, _utils.createNewBlock)(li, 'block-list', block.getKey());\n\n        var newContentState = _this.createNewContentStateFromBlock(newBlock, newEditorState.getCurrentContent());\n\n        newEditorState = _draftJs.EditorState.push(newEditorState, newContentState);\n      });\n\n      _this.sendData(newEditorState);\n\n      return _this.setState({\n        editorState: _draftJs.EditorState.moveFocusToEnd(newEditorState)\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"addBlock\", function (text) {\n      var nextBlockKey = _this.getNextBlockKey(_this.getCurrentAnchorKey()) || (0, _draftJs.genKey)();\n      var newBlock = (0, _utils.createNewBlock)(text, 'header', nextBlockKey);\n\n      var newContentState = _this.createNewContentStateFromBlock(newBlock);\n\n      var newEditorState = _this.createNewEditorState(newContentState, text);\n\n      _this.sendData(newEditorState);\n\n      return _this.setState({\n        editorState: newEditorState\n      }, function () {\n        _this.focus();\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"addLinks\", function (data) {\n      var links = data.reduce(function (acc, _ref) {\n        var alt = _ref.alt,\n            url = _ref.url;\n        return \"\".concat(acc, \"![\").concat(alt, \"](\").concat(url, \")\\n\");\n      }, '');\n      var selection = _this.state.selection;\n      var newBlock = (0, _utils.createNewBlock)(links);\n\n      var newContentState = _this.createNewContentStateFromBlock(newBlock);\n\n      var anchorOffset = links.length;\n      var focusOffset = links.length;\n\n      var newEditorState = _this.createNewEditorState(newContentState, links);\n\n      var updatedSelection = (0, _helpers.getOffSets)(selection).start === 0 ? _this.getSelection().merge({\n        anchorOffset: anchorOffset,\n        focusOffset: focusOffset\n      }) : new _draftJs.SelectionState({\n        anchorKey: newBlock.getKey(),\n        anchorOffset: anchorOffset,\n        focusOffset: focusOffset,\n        focusKey: newBlock.getKey(),\n        isBackward: false\n      });\n      newEditorState = _draftJs.EditorState.forceSelection(newEditorState, updatedSelection);\n\n      _this.setState({\n        isFocused: true\n      });\n\n      _this.sendData(newEditorState);\n\n      return _this.setState({\n        editorState: newEditorState\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"addSimpleBlockWithSelection\", function (content, style) {\n      // Retrieve the selected text by the user\n      var selectedText = _this.getSelectedText();\n\n      var _getBlockContent2 = (0, _helpers.getBlockContent)(style),\n          innerContent = _getBlockContent2.innerContent,\n          endReplacer = _getBlockContent2.endReplacer,\n          startReplacer = _getBlockContent2.startReplacer;\n\n      var defaultContent = selectedText === '' ? (0, _lodash.replace)(content, 'textToReplace', innerContent) : (0, _lodash.replace)(content, 'textToReplace', selectedText);\n      var newBlock = (0, _utils.createNewBlock)(defaultContent);\n\n      var newContentState = _this.createNewContentStateFromBlock(newBlock);\n\n      var _getDefaultSelectionO2 = (0, _helpers.getDefaultSelectionOffsets)(defaultContent, startReplacer, endReplacer),\n          anchorOffset = _getDefaultSelectionO2.anchorOffset,\n          focusOffset = _getDefaultSelectionO2.focusOffset;\n\n      var newEditorState = _this.createNewEditorState(newContentState, defaultContent);\n\n      var updatedSelection = (0, _helpers.getOffSets)(_this.getSelection()).start === 0 ? _this.getSelection().merge({\n        anchorOffset: anchorOffset,\n        focusOffset: focusOffset\n      }) : new _draftJs.SelectionState({\n        anchorKey: newBlock.getKey(),\n        anchorOffset: anchorOffset,\n        focusOffset: focusOffset,\n        focusKey: newBlock.getKey(),\n        isBackward: false\n      });\n      newEditorState = _draftJs.EditorState.acceptSelection(newEditorState, updatedSelection);\n      return _this.setState({\n        editorState: _draftJs.EditorState.forceSelection(newEditorState, newEditorState.getSelection())\n      }, function () {\n        _this.focus(); // Update the parent reducer\n\n\n        _this.sendData(newEditorState);\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createNewEditorState\", function (newContentState, text) {\n      var newEditorState;\n\n      if ((0, _helpers.getOffSets)(_this.getSelection()).start !== 0) {\n        newEditorState = _draftJs.EditorState.push(_this.getEditorState(), newContentState);\n      } else {\n        var textWithEntity = _this.modifyBlockContent(text);\n\n        newEditorState = _draftJs.EditorState.push(_this.getEditorState(), textWithEntity, 'insert-characters');\n      }\n\n      return newEditorState;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createNewBlockMap\", function (newBlock, contentState) {\n      return contentState.getBlockMap().set(newBlock.key, newBlock);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createNewContentStateFromBlock\", function (newBlock) {\n      var contentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.getEditorState().getCurrentContent();\n      return _draftJs.ContentState.createFromBlockArray(_this.createNewBlockMap(newBlock, contentState).toArray()).set('selectionBefore', contentState.getSelectionBefore()).set('selectionAfter', contentState.getSelectionAfter());\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getCharactersNumber\", function () {\n      var editorState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.getEditorState();\n      var plainText = editorState.getCurrentContent().getPlainText();\n      var spacesNumber = plainText.split(' ').length;\n      return (0, _lodash.words)(plainText).join('').length + spacesNumber - 1;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getEditorState\", function () {\n      return _this.state.editorState;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getSelection\", function () {\n      return _this.getEditorState().getSelection();\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getCurrentAnchorKey\", function () {\n      return _this.getSelection().getAnchorKey();\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getCurrentContentBlock\", function () {\n      return _this.getEditorState().getCurrentContent().getBlockForKey(_this.getSelection().getAnchorKey());\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getNextBlockKey\", function (currentBlockKey) {\n      var editorState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.getEditorState();\n      return editorState.getCurrentContent().getKeyAfter(currentBlockKey);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getSelectedText\", function () {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _helpers.getOffSets)(_this.getSelection()),\n          start = _ref2.start,\n          end = _ref2.end;\n\n      return _this.getCurrentContentBlock().getText().slice(start, end);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleBlur\", function () {\n      var target = {\n        name: _this.props.name,\n        type: 'textarea',\n        value: _this.getEditorState().getCurrentContent().getPlainText()\n      };\n\n      _this.props.onBlur({\n        target: target\n      });\n\n      _this.blur();\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleChangeSelect\", function (_ref3) {\n      var target = _ref3.target;\n\n      _this.setState({\n        headerValue: target.value\n      });\n\n      var selectedText = _this.getSelectedText();\n\n      var title = selectedText === '' ? \"\".concat(target.value, \" \") : \"\".concat(target.value, \" \").concat(selectedText);\n\n      _this.addBlock(title);\n\n      return _this.setState({\n        headerValue: ''\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleClickPreview\", function () {\n      return _this.setState({\n        isPreviewMode: !_this.state.isPreviewMode\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleKeyCommand\", function (command, editorState) {\n      var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);\n\n      if (command === 'bold' || command === 'italic' || command === 'underline') {\n        var _getKeyCommandData = (0, _helpers.getKeyCommandData)(command),\n            content = _getKeyCommandData.content,\n            style = _getKeyCommandData.style;\n\n        _this.addContent(content, style);\n\n        return false;\n      }\n\n      if (newState && command !== 'backspace') {\n        _this.onChange(newState);\n\n        return true;\n      }\n\n      return false;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleOpenMediaLibrary\", function () {\n      return _this.setState({\n        isMediaLibraryOpened: true,\n        isFullscreen: false,\n        selection: _this.getSelection()\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleReturn\", function (e, editorState) {\n      var selection = editorState.getSelection();\n      var currentBlock = editorState.getCurrentContent().getBlockForKey(selection.getStartKey());\n\n      if (currentBlock.getText().split('')[0] === '-') {\n        _this.addUlBlock();\n\n        return true;\n      }\n\n      if (currentBlock.getText().split('.').length > 1 && !(0, _lodash.isNaN)(parseInt(currentBlock.getText().split('.')[0], 10))) {\n        _this.addOlBlock();\n\n        return true;\n      }\n\n      return false;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"mapKeyToEditorCommand\", function (e) {\n      if (e.keyCode === 9\n      /* TAB */\n      ) {\n          var newEditorState = _draftJs.RichUtils.onTab(e, _this.state.editorState, 4\n          /* maxDepth */\n          );\n\n          if (newEditorState !== _this.state.editorState) {\n            _this.onChange(newEditorState);\n          }\n\n          return;\n        }\n\n      return (0, _draftJs.getDefaultKeyBinding)(e);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"modifyBlockContent\", function (text) {\n      var contentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.getEditorState().getCurrentContent();\n      return _draftJs.Modifier.replaceText(contentState, _this.getSelection(), text);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"onChange\", function (editorState) {\n      var disabled = _this.props.disabled;\n\n      if (!disabled) {\n        _this.sendData(editorState);\n\n        _this.setState({\n          editorState: editorState\n        });\n      }\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleTab\", function (e) {\n      e.preventDefault();\n      var newEditorState = (0, _utils.onTab)(_this.getEditorState());\n      return _this.onChange(newEditorState);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleToggle\", function () {\n      _this.setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isMediaLibraryOpened: !prevState.isMediaLibraryOpened\n        });\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"sendData\", function (editorState) {\n      if (_this.getEditorState().getCurrentContent() !== editorState.getCurrentContent() || editorState.getLastChangeType() === 'remove-range') {\n        _this.props.onChange({\n          target: {\n            value: editorState.getCurrentContent().getPlainText(),\n            name: _this.props.name,\n            type: 'textarea'\n          }\n        });\n      } else return;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"toggleFullScreen\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        isFullscreen: !_this.state.isFullscreen,\n        isPreviewMode: false\n      });\n    });\n    _this.state = {\n      editorState: _draftJs.EditorState.createEmpty(),\n      isFocused: false,\n      isFullscreen: false,\n      isMediaLibraryOpened: false,\n      isPreviewMode: false,\n      headerValue: '',\n      selection: null\n    };\n\n    _this.focus = function () {\n      _this.setState({\n        isFocused: true\n      });\n\n      return _this.domEditor.focus();\n    };\n\n    _this.blur = function () {\n      _this.setState({\n        isFocused: false\n      });\n\n      return _this.domEditor.blur();\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Wysiwyg, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.autoFocus) {\n        this.focus();\n      }\n\n      if (!(0, _lodash.isEmpty)(this.props.value)) {\n        this.setInitialValue(this.props);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.value !== this.props.value && !this.state.isFocused) {\n        return true;\n      }\n\n      if (nextState.editorState !== this.state.editorState) {\n        return true;\n      }\n\n      if (nextProps.resetProps !== this.props.resetProps) {\n        return true;\n      }\n\n      if (nextState.isFocused !== this.state.isFocused) {\n        return true;\n      }\n\n      if (nextState.isFullscreen !== this.state.isFullscreen) {\n        return true;\n      }\n\n      if (nextState.isPreviewMode !== this.state.isPreviewMode) {\n        return true;\n      }\n\n      if (nextState.headerValue !== this.state.headerValue) {\n        return true;\n      }\n\n      if (nextProps.error !== this.props.error) {\n        return true;\n      }\n\n      if (nextState.isMediaLibraryOpened !== this.state.isMediaLibraryOpened) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Handle resetProps\n      if (prevProps.resetProps !== this.props.resetProps) {\n        this.setInitialValue(this.props);\n      } // Update the content when used in a dynamiczone\n      // We cannot update the value of the component each time there is a onChange event\n      // fired otherwise the component gets very slow\n\n\n      if (prevProps.value !== this.props.value && !this.state.isFocused) {\n        this.setInitialValue(this.props);\n      } // Here we need to update the content of editorState for the edition case\n      // With the current architecture of the EditView we cannot rely on the componentDidMount lifecycle\n      // Since we need to perform some operations in the reducer the loading phase stops before all the operations\n      // are computed which in some case causes the inputs component to be initialised with a null value.\n\n\n      if (!prevProps.value && this.props.value) {\n        // This is also called if the first thing you add in the editor is\n        // a markdown formatting block (b, i, u, etc.) which results in\n        // the selection being pushed to the end after the first character is added.\n        // Basically, setInitialValue is always called whenever\n        // you start typing in an empty editor (even after the initial load)\n        this.setInitialValue(this.props);\n      }\n    }\n    /**\n     * Init the editor with data from\n     * @param {[type]} props [description]\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          editorState = _this$state.editorState,\n          isMediaLibraryOpened = _this$state.isMediaLibraryOpened,\n          isPreviewMode = _this$state.isPreviewMode,\n          isFullscreen = _this$state.isFullscreen;\n      var editorStyle = isFullscreen ? {\n        marginTop: '0'\n      } : this.props.style;\n      var disabled = this.props.disabled;\n      return /*#__PURE__*/_react[\"default\"].createElement(_WysiwygProvider[\"default\"], {\n        handleChangeSelect: this.handleChangeSelect,\n        headerValue: this.state.headerValue,\n        html: this.props.value,\n        isPreviewMode: this.state.isPreviewMode,\n        isFullscreen: this.state.isFullscreen,\n        placeholder: this.props.placeholder\n      }, /*#__PURE__*/_react[\"default\"].createElement(_EditorWrapper[\"default\"], {\n        isFullscreen: isFullscreen,\n        disabled: disabled\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        className: (0, _classnames[\"default\"])('editorWrapper', !this.props.deactivateErrorHighlight && this.props.error && 'editorError', !(0, _lodash.isEmpty)(this.props.className) && this.props.className),\n        onClick: function onClick(e) {\n          if (isFullscreen) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        },\n        style: editorStyle\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        className: \"controlsContainer\"\n      }, /*#__PURE__*/_react[\"default\"].createElement(_customSelect[\"default\"], {\n        disabled: isPreviewMode || disabled\n      }), _constants.CONTROLS.map(function (value, key) {\n        return /*#__PURE__*/_react[\"default\"].createElement(_WysiwygInlineControls[\"default\"], {\n          key: key,\n          buttons: value,\n          disabled: isPreviewMode || disabled,\n          editorState: editorState,\n          handlers: {\n            addContent: _this2.addContent,\n            addOlBlock: _this2.addOlBlock,\n            addSimpleBlockWithSelection: _this2.addSimpleBlockWithSelection,\n            addUlBlock: _this2.addUlBlock,\n            handleOpenMediaLibrary: _this2.handleOpenMediaLibrary\n          },\n          onToggle: _this2.toggleInlineStyle,\n          onToggleBlock: _this2.toggleBlockType\n        });\n      }), !isFullscreen ? /*#__PURE__*/_react[\"default\"].createElement(_toggleMode[\"default\"], {\n        isPreviewMode: isPreviewMode,\n        onClick: this.handleClickPreview\n      }) : /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        style: {\n          marginRight: '10px'\n        }\n      })), isPreviewMode ? /*#__PURE__*/_react[\"default\"].createElement(_PreviewWysiwyg[\"default\"], {\n        data: this.props.value\n      }) : /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        className: (0, _classnames[\"default\"])('editor', isFullscreen && 'editorFullScreen'),\n        onClick: this.focus\n      }, /*#__PURE__*/_react[\"default\"].createElement(_WysiwygEditor[\"default\"], {\n        blockStyleFn: _helpers.getBlockStyle,\n        editorState: editorState,\n        handleKeyCommand: this.handleKeyCommand,\n        handleReturn: this.handleReturn,\n        keyBindingFn: this.mapKeyToEditorCommand,\n        onBlur: this.handleBlur,\n        onChange: this.onChange,\n        onTab: this.handleTab,\n        placeholder: this.props.placeholder,\n        setRef: function setRef(editor) {\n          return _this2.domEditor = editor;\n        },\n        stripPastedStyles: true,\n        tabIndex: this.props.tabIndex,\n        spellCheck: true\n      }), /*#__PURE__*/_react[\"default\"].createElement(\"input\", {\n        className: \"editorInput\",\n        tabIndex: \"-1\"\n      })), !isFullscreen && /*#__PURE__*/_react[\"default\"].createElement(_WysiwygBottomControls[\"default\"], {\n        isPreviewMode: isPreviewMode,\n        onClick: this.toggleFullScreen,\n        onChange: this.handleDrop\n      })), isFullscreen && /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        className: (0, _classnames[\"default\"])('editorWrapper'),\n        onClick: function onClick(e) {\n          e.preventDefault();\n          e.stopPropagation();\n        },\n        style: {\n          marginTop: '0'\n        }\n      }, /*#__PURE__*/_react[\"default\"].createElement(_previewControl[\"default\"], {\n        onClick: this.toggleFullScreen,\n        characters: this.getCharactersNumber()\n      }), /*#__PURE__*/_react[\"default\"].createElement(_PreviewWysiwyg[\"default\"], {\n        data: this.props.value\n      }))), /*#__PURE__*/_react[\"default\"].createElement(_MediaLib[\"default\"], {\n        onToggle: this.handleToggle,\n        isOpen: isMediaLibraryOpened,\n        onChange: this.addLinks\n      }));\n    }\n  }]);\n  return Wysiwyg;\n}(_react[\"default\"].Component);\n\nWysiwyg.defaultProps = {\n  autoFocus: false,\n  className: '',\n  deactivateErrorHighlight: false,\n  disabled: false,\n  error: false,\n  onBlur: function onBlur() {},\n  onChange: function onChange() {},\n  placeholder: '',\n  resetProps: false,\n  style: {},\n  tabIndex: '0',\n  value: ''\n};\nWysiwyg.propTypes = {\n  autoFocus: _propTypes[\"default\"].bool,\n  className: _propTypes[\"default\"].string,\n  deactivateErrorHighlight: _propTypes[\"default\"].bool,\n  disabled: _propTypes[\"default\"].bool,\n  error: _propTypes[\"default\"].bool,\n  name: _propTypes[\"default\"].string.isRequired,\n  onBlur: _propTypes[\"default\"].func,\n  onChange: _propTypes[\"default\"].func,\n  placeholder: _propTypes[\"default\"].string,\n  resetProps: _propTypes[\"default\"].bool,\n  style: _propTypes[\"default\"].object,\n  tabIndex: _propTypes[\"default\"].string,\n  value: _propTypes[\"default\"].string\n};\nvar _default = Wysiwyg;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/components/Wysiwyg/index.js"],"names":["Wysiwyg","props","value","setState","editorState","EditorState","createEmpty","contentState","ContentState","createFromText","newEditorState","createWithContent","state","isFocused","moveFocusToEnd","content","style","selectedText","getSelectedText","innerContent","endReplacer","startReplacer","defaultContent","cursorPosition","getSelection","start","textWithEntity","modifyBlockContent","anchorOffset","focusOffset","updatedSelection","merge","push","getEditorState","length","forceSelection","focus","sendData","selectedBlocksList","nextBlocks","getStartKey","liNumber","map","block","index","previousContent","getCurrentContent","getBlockForKey","getCurrentAnchorKey","getBlockBefore","getKey","number","parseInt","getText","split","nextBlockText","get","newBlock","newContentState","createNewContentStateFromBlock","offset","toString","acceptSelection","i","li","text","nextBlockKey","getNextBlockKey","createNewEditorState","data","links","reduce","acc","alt","url","selection","SelectionState","anchorKey","focusKey","isBackward","getBlockMap","set","key","createFromBlockArray","createNewBlockMap","toArray","getSelectionBefore","getSelectionAfter","plainText","getPlainText","spacesNumber","join","getAnchorKey","currentBlockKey","getKeyAfter","end","getCurrentContentBlock","slice","target","name","type","onBlur","blur","headerValue","title","addBlock","isPreviewMode","command","newState","RichUtils","handleKeyCommand","addContent","onChange","isMediaLibraryOpened","isFullscreen","e","currentBlock","addUlBlock","addOlBlock","keyCode","onTab","Modifier","replaceText","disabled","preventDefault","prevState","getLastChangeType","domEditor","autoFocus","setInitialValue","nextProps","nextState","resetProps","error","prevProps","editorStyle","marginTop","handleChangeSelect","placeholder","deactivateErrorHighlight","className","stopPropagation","CONTROLS","addSimpleBlockWithSelection","handleOpenMediaLibrary","toggleInlineStyle","toggleBlockType","handleClickPreview","marginRight","getBlockStyle","handleReturn","mapKeyToEditorCommand","handleBlur","handleTab","editor","tabIndex","toggleFullScreen","handleDrop","getCharactersNumber","handleToggle","addLinks","React","Component","defaultProps","propTypes","PropTypes","bool","string","isRequired","func","object"],"mappings":"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","sourcesContent":["/**\n *\n * Wysiwyg\n *\n */\nimport React from 'react';\nimport {\n  ContentState,\n  EditorState,\n  getDefaultKeyBinding,\n  genKey,\n  Modifier,\n  RichUtils,\n  SelectionState,\n} from 'draft-js';\nimport PropTypes from 'prop-types';\nimport { isEmpty, isNaN, replace, words } from 'lodash';\nimport cn from 'classnames';\nimport WysiwygProvider from '../../containers/WysiwygProvider';\nimport Controls from '../WysiwygInlineControls';\nimport PreviewWysiwyg from '../PreviewWysiwyg';\nimport WysiwygBottomControls from '../WysiwygBottomControls';\nimport WysiwygEditor from '../WysiwygEditor';\nimport MediaLib from './MediaLib';\nimport CustomSelect from './customSelect';\nimport PreviewControl from './previewControl';\nimport ToggleMode from './toggleMode';\nimport { CONTROLS } from './constants';\nimport {\n  getBlockContent,\n  getBlockStyle,\n  getDefaultSelectionOffsets,\n  getKeyCommandData,\n  getOffSets,\n} from './helpers';\nimport {\n  createNewBlock,\n  getNextBlocksList,\n  getSelectedBlocksList,\n  onTab,\n  updateSelection,\n} from './utils';\nimport EditorWrapper from './EditorWrapper';\n\n/* eslint-disable */\n\nclass Wysiwyg extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      isFocused: false,\n      isFullscreen: false,\n      isMediaLibraryOpened: false,\n      isPreviewMode: false,\n      headerValue: '',\n      selection: null,\n    };\n    this.focus = () => {\n      this.setState({ isFocused: true });\n\n      return this.domEditor.focus();\n    };\n    this.blur = () => {\n      this.setState({ isFocused: false });\n\n      return this.domEditor.blur();\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.autoFocus) {\n      this.focus();\n    }\n\n    if (!isEmpty(this.props.value)) {\n      this.setInitialValue(this.props);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.value !== this.props.value && !this.state.isFocused) {\n      return true;\n    }\n\n    if (nextState.editorState !== this.state.editorState) {\n      return true;\n    }\n\n    if (nextProps.resetProps !== this.props.resetProps) {\n      return true;\n    }\n\n    if (nextState.isFocused !== this.state.isFocused) {\n      return true;\n    }\n\n    if (nextState.isFullscreen !== this.state.isFullscreen) {\n      return true;\n    }\n\n    if (nextState.isPreviewMode !== this.state.isPreviewMode) {\n      return true;\n    }\n\n    if (nextState.headerValue !== this.state.headerValue) {\n      return true;\n    }\n\n    if (nextProps.error !== this.props.error) {\n      return true;\n    }\n\n    if (nextState.isMediaLibraryOpened !== this.state.isMediaLibraryOpened) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidUpdate(prevProps) {\n    // Handle resetProps\n    if (prevProps.resetProps !== this.props.resetProps) {\n      this.setInitialValue(this.props);\n    }\n\n    // Update the content when used in a dynamiczone\n    // We cannot update the value of the component each time there is a onChange event\n    // fired otherwise the component gets very slow\n    if (prevProps.value !== this.props.value && !this.state.isFocused) {\n      this.setInitialValue(this.props);\n    }\n\n    // Here we need to update the content of editorState for the edition case\n    // With the current architecture of the EditView we cannot rely on the componentDidMount lifecycle\n    // Since we need to perform some operations in the reducer the loading phase stops before all the operations\n    // are computed which in some case causes the inputs component to be initialised with a null value.\n    if (!prevProps.value && this.props.value) {\n      // This is also called if the first thing you add in the editor is\n      // a markdown formatting block (b, i, u, etc.) which results in\n      // the selection being pushed to the end after the first character is added.\n      // Basically, setInitialValue is always called whenever\n      // you start typing in an empty editor (even after the initial load)\n      this.setInitialValue(this.props);\n    }\n  }\n\n  /**\n   * Init the editor with data from\n   * @param {[type]} props [description]\n   */\n  setInitialValue = props => {\n    if (isEmpty(props.value)) {\n      return this.setState({ editorState: EditorState.createEmpty() });\n    }\n\n    const contentState = ContentState.createFromText(props.value);\n    const newEditorState = EditorState.createWithContent(contentState);\n    const editorState = this.state.isFocused\n      ? EditorState.moveFocusToEnd(newEditorState)\n      : newEditorState;\n\n    return this.setState({ editorState });\n  };\n\n  /**\n   * Handler to add B, I, Strike, U, link\n   * @param {String} content usually something like **textToReplace**\n   * @param {String} style\n   */\n  addContent = (content, style) => {\n    const selectedText = this.getSelectedText();\n    // Retrieve the associated data for the type to add\n    const { innerContent, endReplacer, startReplacer } = getBlockContent(style);\n    // Replace the selected text by the markdown command or insert default text\n    const defaultContent =\n      selectedText === ''\n        ? replace(content, 'textToReplace', innerContent)\n        : replace(content, 'textToReplace', selectedText);\n    // Get the current cursor position\n    const cursorPosition = getOffSets(this.getSelection()).start;\n    const textWithEntity = this.modifyBlockContent(defaultContent);\n    // Highlight the text\n    const { anchorOffset, focusOffset } = getDefaultSelectionOffsets(\n      defaultContent,\n      startReplacer,\n      endReplacer,\n      cursorPosition\n    );\n    // Merge the current selection with the new one\n    const updatedSelection = this.getSelection().merge({\n      anchorOffset,\n      focusOffset,\n    });\n    const newEditorState = EditorState.push(\n      this.getEditorState(),\n      textWithEntity,\n      'insert-character'\n    );\n\n    if (selectedText.length === 0) {\n      this.setState(\n        {\n          // Highlight the text if the selection was empty\n          editorState: EditorState.forceSelection(newEditorState, updatedSelection),\n        },\n        () => {\n          this.focus();\n          // Update the parent reducer\n        }\n      );\n      this.sendData(newEditorState);\n      return;\n    }\n\n    // Don't handle selection: the user has selected some text to be changed with the appropriate markdown\n    this.setState(\n      {\n        editorState: newEditorState,\n      },\n      () => {\n        this.focus();\n      }\n    );\n    this.sendData(newEditorState);\n    return;\n  };\n\n  /**\n   * Create an ordered list block\n   * @return ContentBlock\n   */\n  addOlBlock = () => {\n    // Get all the selected blocks\n    const selectedBlocksList = getSelectedBlocksList(this.getEditorState());\n    let newEditorState = this.getEditorState();\n\n    // Check if the cursor is NOT at the beginning of a new line\n    // So we need to move all the next blocks\n    if (getOffSets(this.getSelection()).start !== 0) {\n      // Retrieve all the blocks after the current position\n      const nextBlocks = getNextBlocksList(newEditorState, this.getSelection().getStartKey());\n      let liNumber = 1;\n\n      // Loop to update each block after the inserted li\n      nextBlocks.map((block, index) => {\n        const previousContent =\n          index === 0\n            ? this.getEditorState()\n                .getCurrentContent()\n                .getBlockForKey(this.getCurrentAnchorKey())\n            : newEditorState.getCurrentContent().getBlockBefore(block.getKey());\n        // Check if there was an li before the position so we update the entire list bullets\n        const number = previousContent ? parseInt(previousContent.getText().split('.')[0], 10) : 0;\n        liNumber = isNaN(number) ? 1 : number + 1;\n        const nextBlockText = index === 0 ? `${liNumber}. ` : nextBlocks.get(index - 1).getText();\n        // Update the current block\n        const newBlock = createNewBlock(nextBlockText, 'block-list', block.getKey());\n        // Update the contentState\n        const newContentState = this.createNewContentStateFromBlock(\n          newBlock,\n          newEditorState.getCurrentContent()\n        );\n        newEditorState = EditorState.push(newEditorState, newContentState);\n      });\n\n      // Move the cursor to the correct position and add a space after '.'\n      // 2 for the dot and the space after, we add the number length (10 = offset of 2)\n      const offset = 2 + liNumber.toString().length;\n      const updatedSelection = updateSelection(this.getSelection(), nextBlocks, offset);\n\n      return this.setState({\n        editorState: EditorState.acceptSelection(newEditorState, updatedSelection),\n      });\n    }\n\n    // If the cursor is at the beginning we need to move all the content after the cursor so we don't loose the data\n    selectedBlocksList.map((block, i) => {\n      const selectedText = block.getText();\n      const li = selectedText === '' ? `${i + 1}. ` : `${i + 1}. ${selectedText}`;\n      const newBlock = createNewBlock(li, 'block-list', block.getKey());\n      const newContentState = this.createNewContentStateFromBlock(\n        newBlock,\n        newEditorState.getCurrentContent()\n      );\n      newEditorState = EditorState.push(newEditorState, newContentState);\n    });\n\n    // Update the parent reducer\n    this.sendData(newEditorState);\n\n    return this.setState({\n      editorState: EditorState.moveFocusToEnd(newEditorState),\n    });\n  };\n\n  /**\n   * Create an unordered list\n   * @return ContentBlock\n   */\n  // NOTE: it's pretty much the same dynamic as above\n  // We don't use the same handler because it needs less logic than a ordered list\n  // so it's easier to maintain the code\n  addUlBlock = () => {\n    const selectedBlocksList = getSelectedBlocksList(this.getEditorState());\n    let newEditorState = this.getEditorState();\n\n    if (getOffSets(this.getSelection()).start !== 0) {\n      const nextBlocks = getNextBlocksList(newEditorState, this.getSelection().getStartKey());\n\n      nextBlocks.map((block, index) => {\n        const nextBlockText = index === 0 ? '- ' : nextBlocks.get(index - 1).getText();\n        const newBlock = createNewBlock(nextBlockText, 'block-list', block.getKey());\n        const newContentState = this.createNewContentStateFromBlock(\n          newBlock,\n          newEditorState.getCurrentContent()\n        );\n        newEditorState = EditorState.push(newEditorState, newContentState);\n      });\n\n      const updatedSelection = updateSelection(this.getSelection(), nextBlocks, 2);\n\n      return this.setState({\n        editorState: EditorState.acceptSelection(newEditorState, updatedSelection),\n      });\n    }\n\n    selectedBlocksList.map(block => {\n      const selectedText = block.getText();\n      const li = selectedText === '' ? '- ' : `- ${selectedText}`;\n      const newBlock = createNewBlock(li, 'block-list', block.getKey());\n      const newContentState = this.createNewContentStateFromBlock(\n        newBlock,\n        newEditorState.getCurrentContent()\n      );\n      newEditorState = EditorState.push(newEditorState, newContentState);\n    });\n    this.sendData(newEditorState);\n    return this.setState({\n      editorState: EditorState.moveFocusToEnd(newEditorState),\n    });\n  };\n\n  /**\n   * Handler to create header\n   * @param {String} text header content\n   */\n  addBlock = text => {\n    const nextBlockKey = this.getNextBlockKey(this.getCurrentAnchorKey()) || genKey();\n    const newBlock = createNewBlock(text, 'header', nextBlockKey);\n    const newContentState = this.createNewContentStateFromBlock(newBlock);\n    const newEditorState = this.createNewEditorState(newContentState, text);\n\n    this.sendData(newEditorState);\n\n    return this.setState(\n      {\n        editorState: newEditorState,\n      },\n      () => {\n        this.focus();\n      }\n    );\n  };\n\n  addLinks = data => {\n    const links = data.reduce((acc, { alt, url }) => `${acc}![${alt}](${url})\\n`, '');\n    const { selection } = this.state;\n    const newBlock = createNewBlock(links);\n    const newContentState = this.createNewContentStateFromBlock(newBlock);\n    const anchorOffset = links.length;\n    const focusOffset = links.length;\n    let newEditorState = this.createNewEditorState(newContentState, links);\n\n    const updatedSelection =\n      getOffSets(selection).start === 0\n        ? this.getSelection().merge({ anchorOffset, focusOffset })\n        : new SelectionState({\n            anchorKey: newBlock.getKey(),\n            anchorOffset,\n            focusOffset,\n            focusKey: newBlock.getKey(),\n            isBackward: false,\n          });\n\n    newEditorState = EditorState.forceSelection(newEditorState, updatedSelection);\n\n    this.setState({ isFocused: true });\n    this.sendData(newEditorState);\n\n    return this.setState({\n      editorState: newEditorState,\n    });\n  };\n\n  /**\n   * Handler used for code block and Img controls\n   * @param {String} content the text that will be added\n   * @param {String} style   the type\n   */\n  addSimpleBlockWithSelection = (content, style) => {\n    // Retrieve the selected text by the user\n    const selectedText = this.getSelectedText();\n    const { innerContent, endReplacer, startReplacer } = getBlockContent(style);\n    const defaultContent =\n      selectedText === ''\n        ? replace(content, 'textToReplace', innerContent)\n        : replace(content, 'textToReplace', selectedText);\n    const newBlock = createNewBlock(defaultContent);\n    const newContentState = this.createNewContentStateFromBlock(newBlock);\n    const { anchorOffset, focusOffset } = getDefaultSelectionOffsets(\n      defaultContent,\n      startReplacer,\n      endReplacer\n    );\n\n    let newEditorState = this.createNewEditorState(newContentState, defaultContent);\n    const updatedSelection =\n      getOffSets(this.getSelection()).start === 0\n        ? this.getSelection().merge({ anchorOffset, focusOffset })\n        : new SelectionState({\n            anchorKey: newBlock.getKey(),\n            anchorOffset,\n            focusOffset,\n            focusKey: newBlock.getKey(),\n            isBackward: false,\n          });\n\n    newEditorState = EditorState.acceptSelection(newEditorState, updatedSelection);\n\n    return this.setState(\n      {\n        editorState: EditorState.forceSelection(newEditorState, newEditorState.getSelection()),\n      },\n      () => {\n        this.focus();\n        // Update the parent reducer\n        this.sendData(newEditorState);\n      }\n    );\n  };\n\n  /**\n   * Update the current editorState\n   * @param  {Map} newContentState\n   * @param  {String} text            The text to add\n   * @return {Map}                 EditorState\n   */\n  createNewEditorState = (newContentState, text) => {\n    let newEditorState;\n\n    if (getOffSets(this.getSelection()).start !== 0) {\n      newEditorState = EditorState.push(this.getEditorState(), newContentState);\n    } else {\n      const textWithEntity = this.modifyBlockContent(text);\n      newEditorState = EditorState.push(this.getEditorState(), textWithEntity, 'insert-characters');\n    }\n    return newEditorState;\n  };\n\n  /**\n   * Update the content of a block\n   * @param  {Map} newBlock     The new block\n   * @param  {Map} contentState The ContentState\n   * @return {Map}              The updated block\n   */\n  createNewBlockMap = (newBlock, contentState) =>\n    contentState.getBlockMap().set(newBlock.key, newBlock);\n\n  createNewContentStateFromBlock = (\n    newBlock,\n    contentState = this.getEditorState().getCurrentContent()\n  ) =>\n    ContentState.createFromBlockArray(this.createNewBlockMap(newBlock, contentState).toArray())\n      .set('selectionBefore', contentState.getSelectionBefore())\n      .set('selectionAfter', contentState.getSelectionAfter());\n\n  getCharactersNumber = (editorState = this.getEditorState()) => {\n    const plainText = editorState.getCurrentContent().getPlainText();\n    const spacesNumber = plainText.split(' ').length;\n\n    return words(plainText).join('').length + spacesNumber - 1;\n  };\n\n  getEditorState = () => this.state.editorState;\n\n  /**\n   * Retrieve the selected text\n   * @return {Map}\n   */\n  getSelection = () => this.getEditorState().getSelection();\n\n  /**\n   * Retrieve the cursor anchor key\n   * @return {String}\n   */\n  getCurrentAnchorKey = () => this.getSelection().getAnchorKey();\n\n  /**\n   * Retrieve the current content block\n   * @return {Map} ContentBlock\n   */\n  getCurrentContentBlock = () =>\n    this.getEditorState()\n      .getCurrentContent()\n      .getBlockForKey(this.getSelection().getAnchorKey());\n\n  /**\n   * Retrieve the block key after a specific one\n   * @param  {String} currentBlockKey\n   * @param  {Map} [editorState=this.getEditorState()]  The current EditorState or the updated one\n   * @return {String}                                    The next block key\n   */\n  getNextBlockKey = (currentBlockKey, editorState = this.getEditorState()) =>\n    editorState.getCurrentContent().getKeyAfter(currentBlockKey);\n\n  getSelectedText = ({ start, end } = getOffSets(this.getSelection())) =>\n    this.getCurrentContentBlock()\n      .getText()\n      .slice(start, end);\n\n  handleBlur = () => {\n    const target = {\n      name: this.props.name,\n      type: 'textarea',\n      value: this.getEditorState()\n        .getCurrentContent()\n        .getPlainText(),\n    };\n    this.props.onBlur({ target });\n    this.blur();\n  };\n\n  handleChangeSelect = ({ target }) => {\n    this.setState({ headerValue: target.value });\n    const selectedText = this.getSelectedText();\n    const title = selectedText === '' ? `${target.value} ` : `${target.value} ${selectedText}`;\n    this.addBlock(title);\n\n    return this.setState({ headerValue: '' });\n  };\n\n  handleClickPreview = () => this.setState({ isPreviewMode: !this.state.isPreviewMode });\n\n  /**\n   * Handler that listens for specific key commands\n   * @param  {String} command\n   * @param  {Map} editorState\n   * @return {Bool}\n   */\n  handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (command === 'bold' || command === 'italic' || command === 'underline') {\n      const { content, style } = getKeyCommandData(command);\n      this.addContent(content, style);\n      return false;\n    }\n\n    if (newState && command !== 'backspace') {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  };\n\n  handleOpenMediaLibrary = () => {\n    return this.setState({\n      isMediaLibraryOpened: true,\n      isFullscreen: false,\n      selection: this.getSelection(),\n    });\n  };\n\n  handleReturn = (e, editorState) => {\n    const selection = editorState.getSelection();\n    const currentBlock = editorState.getCurrentContent().getBlockForKey(selection.getStartKey());\n\n    if (currentBlock.getText().split('')[0] === '-') {\n      this.addUlBlock();\n      return true;\n    }\n\n    if (\n      currentBlock.getText().split('.').length > 1 &&\n      !isNaN(parseInt(currentBlock.getText().split('.')[0], 10))\n    ) {\n      this.addOlBlock();\n      return true;\n    }\n\n    return false;\n  };\n\n  mapKeyToEditorCommand = e => {\n    if (e.keyCode === 9 /* TAB */) {\n      const newEditorState = RichUtils.onTab(e, this.state.editorState, 4 /* maxDepth */);\n      if (newEditorState !== this.state.editorState) {\n        this.onChange(newEditorState);\n      }\n      return;\n    }\n\n    return getDefaultKeyBinding(e);\n  };\n\n  /**\n   * Change the content of a block\n   * @param  {String]} text\n   * @param  {Map} [contentState=this.getEditorState().getCurrentContent()]\n   * @return {Map}\n   */\n  modifyBlockContent = (text, contentState = this.getEditorState().getCurrentContent()) =>\n    Modifier.replaceText(contentState, this.getSelection(), text);\n\n  onChange = editorState => {\n    const { disabled } = this.props;\n\n    if (!disabled) {\n      this.sendData(editorState);\n      this.setState({ editorState });\n    }\n  };\n\n  handleTab = e => {\n    e.preventDefault();\n    const newEditorState = onTab(this.getEditorState());\n\n    return this.onChange(newEditorState);\n  };\n\n  /**\n   * Toggle the medialibrary modal\n   */\n\n  handleToggle = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      isMediaLibraryOpened: !prevState.isMediaLibraryOpened,\n    }));\n  };\n\n  /**\n   * Update the parent reducer\n   * @param  {Map} editorState [description]\n   */\n  sendData = editorState => {\n    if (\n      this.getEditorState().getCurrentContent() !== editorState.getCurrentContent() ||\n      editorState.getLastChangeType() === 'remove-range'\n    ) {\n      this.props.onChange({\n        target: {\n          value: editorState.getCurrentContent().getPlainText(),\n          name: this.props.name,\n          type: 'textarea',\n        },\n      });\n    } else return;\n  };\n\n  toggleFullScreen = e => {\n    e.preventDefault();\n    this.setState({\n      isFullscreen: !this.state.isFullscreen,\n      isPreviewMode: false,\n    });\n  };\n\n  render() {\n    const { editorState, isMediaLibraryOpened, isPreviewMode, isFullscreen } = this.state;\n    const editorStyle = isFullscreen ? { marginTop: '0' } : this.props.style;\n    const { disabled } = this.props;\n\n    return (\n      <WysiwygProvider\n        handleChangeSelect={this.handleChangeSelect}\n        headerValue={this.state.headerValue}\n        html={this.props.value}\n        isPreviewMode={this.state.isPreviewMode}\n        isFullscreen={this.state.isFullscreen}\n        placeholder={this.props.placeholder}\n      >\n        <EditorWrapper isFullscreen={isFullscreen} disabled={disabled}>\n          {/* FIRST EDITOR WITH CONTROLS} */}\n          <div\n            className={cn(\n              'editorWrapper',\n              !this.props.deactivateErrorHighlight && this.props.error && 'editorError',\n              !isEmpty(this.props.className) && this.props.className\n            )}\n            onClick={e => {\n              if (isFullscreen) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n            }}\n            style={editorStyle}\n          >\n            <div className=\"controlsContainer\">\n              <CustomSelect disabled={isPreviewMode || disabled} />\n              {CONTROLS.map((value, key) => (\n                <Controls\n                  key={key}\n                  buttons={value}\n                  disabled={isPreviewMode || disabled}\n                  editorState={editorState}\n                  handlers={{\n                    addContent: this.addContent,\n                    addOlBlock: this.addOlBlock,\n                    addSimpleBlockWithSelection: this.addSimpleBlockWithSelection,\n                    addUlBlock: this.addUlBlock,\n                    handleOpenMediaLibrary: this.handleOpenMediaLibrary,\n                  }}\n                  onToggle={this.toggleInlineStyle}\n                  onToggleBlock={this.toggleBlockType}\n                />\n              ))}\n              {!isFullscreen ? (\n                <ToggleMode isPreviewMode={isPreviewMode} onClick={this.handleClickPreview} />\n              ) : (\n                <div style={{ marginRight: '10px' }} />\n              )}\n            </div>\n            {/* WYSIWYG PREVIEW NOT FULLSCREEN */}\n            {isPreviewMode ? (\n              <PreviewWysiwyg data={this.props.value} />\n            ) : (\n              <div\n                className={cn('editor', isFullscreen && 'editorFullScreen')}\n                onClick={this.focus}\n              >\n                <WysiwygEditor\n                  blockStyleFn={getBlockStyle}\n                  editorState={editorState}\n                  handleKeyCommand={this.handleKeyCommand}\n                  handleReturn={this.handleReturn}\n                  keyBindingFn={this.mapKeyToEditorCommand}\n                  onBlur={this.handleBlur}\n                  onChange={this.onChange}\n                  onTab={this.handleTab}\n                  placeholder={this.props.placeholder}\n                  setRef={editor => (this.domEditor = editor)}\n                  stripPastedStyles\n                  tabIndex={this.props.tabIndex}\n                  spellCheck\n                />\n                <input className=\"editorInput\" tabIndex=\"-1\" />\n              </div>\n            )}\n            {!isFullscreen && (\n              <WysiwygBottomControls\n                isPreviewMode={isPreviewMode}\n                onClick={this.toggleFullScreen}\n                onChange={this.handleDrop}\n              />\n            )}\n          </div>\n          {/* PREVIEW WYSIWYG FULLSCREEN */}\n          {isFullscreen && (\n            <div\n              className={cn('editorWrapper')}\n              onClick={e => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              style={{ marginTop: '0' }}\n            >\n              <PreviewControl\n                onClick={this.toggleFullScreen}\n                characters={this.getCharactersNumber()}\n              />\n              <PreviewWysiwyg data={this.props.value} />\n            </div>\n          )}\n        </EditorWrapper>\n        <MediaLib\n          onToggle={this.handleToggle}\n          isOpen={isMediaLibraryOpened}\n          onChange={this.addLinks}\n        />\n      </WysiwygProvider>\n    );\n  }\n}\n\nWysiwyg.defaultProps = {\n  autoFocus: false,\n  className: '',\n  deactivateErrorHighlight: false,\n  disabled: false,\n  error: false,\n  onBlur: () => {},\n  onChange: () => {},\n  placeholder: '',\n  resetProps: false,\n  style: {},\n  tabIndex: '0',\n  value: '',\n};\n\nWysiwyg.propTypes = {\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  deactivateErrorHighlight: PropTypes.bool,\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  resetProps: PropTypes.bool,\n  style: PropTypes.object,\n  tabIndex: PropTypes.string,\n  value: PropTypes.string,\n};\n\nexport default Wysiwyg;\n"]},"metadata":{},"sourceType":"script"}