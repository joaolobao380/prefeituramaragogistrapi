{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _pluginId = _interopRequireDefault(require(\"../pluginId\"));\n\n/**\n * Retrieve external links from injected components\n * @type {Array} List of external links to display\n */\nvar getInjectedComponents = function getInjectedComponents(container, area, plugins, currentEnvironment, slug, push) {\n  for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {\n    rest[_key - 6] = arguments[_key];\n  }\n\n  var componentsToInject = Object.keys(plugins).reduce(function (acc, current) {\n    // Retrieve injected compos from plugin\n    var currentPlugin = plugins[current];\n    var injectedComponents = (0, _lodash.get)(currentPlugin, 'injectedComponents', []);\n    var compos = injectedComponents.filter(function (compo) {\n      return compo.plugin === \"\".concat(_pluginId[\"default\"], \".\").concat(container) && compo.area === area;\n    }).map(function (compo) {\n      var Component = compo.component;\n      return /*#__PURE__*/_react[\"default\"].createElement(Component, (0, _extends2[\"default\"])({\n        viewProps: rest,\n        currentEnvironment: currentEnvironment,\n        getModelName: function getModelName() {\n          return slug;\n        },\n        push: push\n      }, compo.props, {\n        key: compo.key\n      }));\n    });\n    return [].concat((0, _toConsumableArray2[\"default\"])(acc), (0, _toConsumableArray2[\"default\"])(compos));\n  }, []);\n  return componentsToInject;\n};\n\nvar _default = getInjectedComponents;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/utils/getComponents.js"],"names":["getInjectedComponents","container","area","plugins","currentEnvironment","slug","push","rest","componentsToInject","Object","keys","reduce","acc","current","currentPlugin","injectedComponents","compos","filter","compo","plugin","pluginId","map","Component","component","props","key"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BC,SAD4B,EAE5BC,IAF4B,EAG5BC,OAH4B,EAI5BC,kBAJ4B,EAK5BC,IAL4B,EAM5BC,IAN4B,EAQzB;AAAA,oCADAC,IACA;AADAA,IAAAA,IACA;AAAA;;AACH,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBQ,MAArB,CAA4B,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACvE;AACA,QAAMC,aAAa,GAAGX,OAAO,CAACU,OAAD,CAA7B;AACA,QAAME,kBAAkB,GAAG,iBAAID,aAAJ,EAAmB,oBAAnB,EAAyC,EAAzC,CAA3B;AAEA,QAAME,MAAM,GAAGD,kBAAkB,CAC9BE,MADY,CACL,UAAAC,KAAK,EAAI;AACf,aACEA,KAAK,CAACC,MAAN,eAAoBC,oBAApB,cAAgCnB,SAAhC,KAA+CiB,KAAK,CAAChB,IAAN,KAAeA,IADhE;AAGD,KALY,EAMZmB,GANY,CAMR,UAAAH,KAAK,EAAI;AACZ,UAAMI,SAAS,GAAGJ,KAAK,CAACK,SAAxB;AAEA,0BACE,gCAAC,SAAD;AACE,QAAA,SAAS,EAAEhB,IADb;AAEE,QAAA,kBAAkB,EAAEH,kBAFtB;AAGE,QAAA,YAAY,EAAE;AAAA,iBAAMC,IAAN;AAAA,SAHhB;AAIE,QAAA,IAAI,EAAEC;AAJR,SAKMY,KAAK,CAACM,KALZ;AAME,QAAA,GAAG,EAAEN,KAAK,CAACO;AANb,SADF;AAUD,KAnBY,CAAf;AAqBA,yDAAWb,GAAX,uCAAmBI,MAAnB;AACD,GA3B0B,EA2BxB,EA3BwB,CAA3B;AA6BA,SAAOR,kBAAP;AACD,CAvCD;;eAyCeR,qB","sourcesContent":["import React from 'react';\nimport { get } from 'lodash';\nimport pluginId from '../pluginId';\n\n/**\n * Retrieve external links from injected components\n * @type {Array} List of external links to display\n */\nconst getInjectedComponents = (\n  container,\n  area,\n  plugins,\n  currentEnvironment,\n  slug,\n  push,\n  ...rest\n) => {\n  const componentsToInject = Object.keys(plugins).reduce((acc, current) => {\n    // Retrieve injected compos from plugin\n    const currentPlugin = plugins[current];\n    const injectedComponents = get(currentPlugin, 'injectedComponents', []);\n\n    const compos = injectedComponents\n      .filter(compo => {\n        return (\n          compo.plugin === `${pluginId}.${container}` && compo.area === area\n        );\n      })\n      .map(compo => {\n        const Component = compo.component;\n\n        return (\n          <Component\n            viewProps={rest}\n            currentEnvironment={currentEnvironment}\n            getModelName={() => slug}\n            push={push}\n            {...compo.props}\n            key={compo.key}\n          />\n        );\n      });\n\n    return [...acc, ...compos];\n  }, []);\n\n  return componentsToInject;\n};\n\nexport default getInjectedComponents;\n"]},"metadata":{},"sourceType":"script"}