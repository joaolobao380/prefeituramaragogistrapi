{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _lodash = require(\"lodash\");\n\nvar _pluralize = _interopRequireDefault(require(\"pluralize\"));\n\nvar _useDataManager2 = _interopRequireDefault(require(\"../../hooks/useDataManager\"));\n\nvar _ManyToMany = _interopRequireDefault(require(\"../../icons/ManyToMany\"));\n\nvar _ManyToOne = _interopRequireDefault(require(\"../../icons/ManyToOne\"));\n\nvar _ManyWay = _interopRequireDefault(require(\"../../icons/ManyWay\"));\n\nvar _OneToMany = _interopRequireDefault(require(\"../../icons/OneToMany\"));\n\nvar _OneToOne = _interopRequireDefault(require(\"../../icons/OneToOne\"));\n\nvar _OneWay = _interopRequireDefault(require(\"../../icons/OneWay\"));\n\nvar _getTrad = _interopRequireDefault(require(\"../../utils/getTrad\"));\n\nvar _Wrapper = _interopRequireDefault(require(\"./Wrapper\"));\n\nvar relations = {\n  oneWay: _OneWay[\"default\"],\n  oneToOne: _OneToOne[\"default\"],\n  oneToMany: _OneToMany[\"default\"],\n  manyToOne: _ManyToOne[\"default\"],\n  manyToMany: _ManyToMany[\"default\"],\n  manyWay: _ManyWay[\"default\"]\n};\n\nvar RelationFormNaturePicker = function RelationFormNaturePicker(_ref) {\n  var nature = _ref.nature,\n      naturePickerType = _ref.naturePickerType,\n      onChange = _ref.onChange,\n      oneThatIsCreatingARelationWithAnother = _ref.oneThatIsCreatingARelationWithAnother,\n      target = _ref.target;\n\n  var _useDataManager = (0, _useDataManager2[\"default\"])(),\n      contentTypes = _useDataManager.contentTypes,\n      modifiedData = _useDataManager.modifiedData;\n\n  var ctRelations = ['oneWay', 'oneToOne', 'oneToMany', 'manyToOne', 'manyToMany', 'manyWay'];\n  var componentRelations = ['oneWay', 'manyWay'];\n  var dataType = naturePickerType === 'contentType' ? (0, _lodash.get)(modifiedData, [naturePickerType, 'schema', 'kind'], '') : naturePickerType;\n  var relationsType = dataType === 'collectionType' ? ctRelations : componentRelations;\n  var areDisplayedNamesInverted = nature === 'manyToOne';\n  var targetLabel = (0, _lodash.get)(contentTypes, [target, 'schema', 'name'], 'unknown');\n  var leftTarget = areDisplayedNamesInverted ? targetLabel : oneThatIsCreatingARelationWithAnother;\n  var rightTarget = areDisplayedNamesInverted ? oneThatIsCreatingARelationWithAnother : targetLabel;\n  var leftDisplayedValue = (0, _pluralize[\"default\"])(leftTarget, nature === 'manyToMany' ? 2 : 1);\n  var restrictedRelations = (0, _lodash.get)(contentTypes, [target, 'schema', 'restrictRelationsTo'], null);\n  var rightDisplayedValue = (0, _pluralize[\"default\"])(rightTarget, ['manyToMany', 'oneToMany', 'manyToOne', 'manyWay'].includes(nature) ? 2 : 1);\n  return /*#__PURE__*/_react[\"default\"].createElement(_Wrapper[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    className: \"nature-container\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    className: \"nature-buttons\"\n  }, relationsType.map(function (relationNature) {\n    var Asset = relations[relationNature];\n    var isEnabled = restrictedRelations === null || restrictedRelations.includes(relationNature);\n    return /*#__PURE__*/_react[\"default\"].createElement(Asset, {\n      key: relationNature,\n      isSelected: nature === relationNature,\n      style: {\n        cursor: isEnabled ? 'pointer' : 'not-allowed'\n      },\n      onClick: function onClick() {\n        if (isEnabled) {\n          onChange({\n            target: {\n              name: 'nature',\n              value: relationNature,\n              targetContentType: target,\n              oneThatIsCreatingARelationWithAnother: oneThatIsCreatingARelationWithAnother,\n              type: 'relation'\n            }\n          });\n        }\n      }\n    });\n  })), /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    className: \"nature-txt\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"span\", null, (0, _lodash.truncate)(leftDisplayedValue, {\n    length: 24\n  })), \"\\xA0\", /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n    id: (0, _getTrad[\"default\"])(\"relation.\".concat(nature))\n  }), \"\\xA0\", /*#__PURE__*/_react[\"default\"].createElement(\"span\", null, (0, _lodash.truncate)(rightDisplayedValue, {\n    length: 24\n  })))));\n};\n\nRelationFormNaturePicker.defaultProps = {\n  nature: 'oneWay'\n};\nRelationFormNaturePicker.propTypes = {\n  nature: _propTypes[\"default\"].string,\n  naturePickerType: _propTypes[\"default\"].string.isRequired,\n  onChange: _propTypes[\"default\"].func.isRequired,\n  oneThatIsCreatingARelationWithAnother: _propTypes[\"default\"].string.isRequired,\n  target: _propTypes[\"default\"].string.isRequired\n};\nvar _default = RelationFormNaturePicker;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/components/RelationFormNaturePicker/index.js"],"names":["relations","oneWay","OneWay","oneToOne","OneToOne","oneToMany","OneToMany","manyToOne","ManyToOne","manyToMany","ManyToMany","manyWay","ManyWay","RelationFormNaturePicker","nature","naturePickerType","onChange","oneThatIsCreatingARelationWithAnother","target","contentTypes","modifiedData","ctRelations","componentRelations","dataType","relationsType","areDisplayedNamesInverted","targetLabel","leftTarget","rightTarget","leftDisplayedValue","restrictedRelations","rightDisplayedValue","includes","map","relationNature","Asset","isEnabled","cursor","name","value","targetContentType","type","length","defaultProps","propTypes","PropTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { get, truncate } from 'lodash';\nimport pluralize from 'pluralize';\nimport useDataManager from '../../hooks/useDataManager';\nimport ManyToMany from '../../icons/ManyToMany';\nimport ManyToOne from '../../icons/ManyToOne';\nimport ManyWay from '../../icons/ManyWay';\nimport OneToMany from '../../icons/OneToMany';\nimport OneToOne from '../../icons/OneToOne';\nimport OneWay from '../../icons/OneWay';\nimport getTrad from '../../utils/getTrad';\nimport Wrapper from './Wrapper';\n\nconst relations = {\n  oneWay: OneWay,\n  oneToOne: OneToOne,\n  oneToMany: OneToMany,\n  manyToOne: ManyToOne,\n  manyToMany: ManyToMany,\n  manyWay: ManyWay,\n};\n\nconst RelationFormNaturePicker = ({\n  nature,\n  naturePickerType,\n  onChange,\n  oneThatIsCreatingARelationWithAnother,\n  target,\n}) => {\n  const { contentTypes, modifiedData } = useDataManager();\n  const ctRelations = ['oneWay', 'oneToOne', 'oneToMany', 'manyToOne', 'manyToMany', 'manyWay'];\n  const componentRelations = ['oneWay', 'manyWay'];\n  const dataType =\n    naturePickerType === 'contentType'\n      ? get(modifiedData, [naturePickerType, 'schema', 'kind'], '')\n      : naturePickerType;\n  const relationsType = dataType === 'collectionType' ? ctRelations : componentRelations;\n\n  const areDisplayedNamesInverted = nature === 'manyToOne';\n  const targetLabel = get(contentTypes, [target, 'schema', 'name'], 'unknown');\n  const leftTarget = areDisplayedNamesInverted\n    ? targetLabel\n    : oneThatIsCreatingARelationWithAnother;\n  const rightTarget = areDisplayedNamesInverted\n    ? oneThatIsCreatingARelationWithAnother\n    : targetLabel;\n  const leftDisplayedValue = pluralize(leftTarget, nature === 'manyToMany' ? 2 : 1);\n  const restrictedRelations = get(contentTypes, [target, 'schema', 'restrictRelationsTo'], null);\n\n  const rightDisplayedValue = pluralize(\n    rightTarget,\n    ['manyToMany', 'oneToMany', 'manyToOne', 'manyWay'].includes(nature) ? 2 : 1\n  );\n\n  return (\n    <Wrapper>\n      <div className=\"nature-container\">\n        <div className=\"nature-buttons\">\n          {relationsType.map(relationNature => {\n            const Asset = relations[relationNature];\n            const isEnabled =\n              restrictedRelations === null || restrictedRelations.includes(relationNature);\n\n            return (\n              <Asset\n                key={relationNature}\n                isSelected={nature === relationNature}\n                style={{ cursor: isEnabled ? 'pointer' : 'not-allowed' }}\n                onClick={() => {\n                  if (isEnabled) {\n                    onChange({\n                      target: {\n                        name: 'nature',\n                        value: relationNature,\n                        targetContentType: target,\n                        oneThatIsCreatingARelationWithAnother,\n                        type: 'relation',\n                      },\n                    });\n                  }\n                }}\n              />\n            );\n          })}\n        </div>\n        <div className=\"nature-txt\">\n          <span>{truncate(leftDisplayedValue, { length: 24 })}</span>\n          &nbsp;\n          <FormattedMessage id={getTrad(`relation.${nature}`)} />\n          &nbsp;\n          <span>{truncate(rightDisplayedValue, { length: 24 })}</span>\n        </div>\n      </div>\n    </Wrapper>\n  );\n};\n\nRelationFormNaturePicker.defaultProps = {\n  nature: 'oneWay',\n};\n\nRelationFormNaturePicker.propTypes = {\n  nature: PropTypes.string,\n  naturePickerType: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  oneThatIsCreatingARelationWithAnother: PropTypes.string.isRequired,\n  target: PropTypes.string.isRequired,\n};\n\nexport default RelationFormNaturePicker;\n"]},"metadata":{},"sourceType":"script"}