{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reducer = _interopRequireWildcard(require(\"./reducer\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar useFetchRole = function useFetchRole(id) {\n  var _useReducer = (0, _react.useReducer)(_reducer[\"default\"], _reducer.initialState),\n      _useReducer2 = (0, _slicedToArray2[\"default\"])(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  (0, _react.useEffect)(function () {\n    if (id) {\n      fetchRole(id);\n    } else {\n      dispatch({\n        type: 'GET_DATA_SUCCEEDED',\n        role: {},\n        permissions: []\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [id]);\n\n  var fetchRole = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(roleId) {\n      var _yield$Promise$all, _yield$Promise$all2, role, permissions;\n\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Promise.all([\"roles/\".concat(roleId), \"roles/\".concat(roleId, \"/permissions\")].map(function (endPoint) {\n                return (0, _strapiHelperPlugin.request)(\"/admin/\".concat(endPoint), {\n                  method: 'GET'\n                });\n              }));\n\n            case 3:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = (0, _slicedToArray2[\"default\"])(_yield$Promise$all, 2);\n              role = _yield$Promise$all2[0].data;\n              permissions = _yield$Promise$all2[1].data;\n              dispatch({\n                type: 'GET_DATA_SUCCEEDED',\n                role: role,\n                permissions: permissions\n              });\n              _context.next = 15;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              dispatch({\n                type: 'GET_DATA_ERROR'\n              });\n              strapi.notification.toggle({\n                type: 'warning',\n                message: {\n                  id: 'notification.error'\n                }\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function fetchRole(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmitSucceeded = (0, _react.useCallback)(function (data) {\n    dispatch(_objectSpread({\n      type: 'ON_SUBMIT_SUCCEEDED'\n    }, data));\n  }, []);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    onSubmitSucceeded: handleSubmitSucceeded\n  });\n};\n\nvar _default = useFetchRole;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/hooks/useFetchRole/index.js"],"names":["useFetchRole","id","reducer","initialState","state","dispatch","fetchRole","type","role","permissions","roleId","Promise","all","map","endPoint","method","data","console","error","strapi","notification","toggle","message","handleSubmitSucceeded","onSubmitSucceeded"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAAC,EAAE,EAAI;AACzB,oBAA0B,uBAAWC,mBAAX,EAAoBC,qBAApB,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA,wBAAU,YAAM;AACd,QAAIJ,EAAJ,EAAQ;AACNK,MAAAA,SAAS,CAACL,EAAD,CAAT;AACD,KAFD,MAEO;AACLI,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAE,oBADC;AAEPC,QAAAA,IAAI,EAAE,EAFC;AAGPC,QAAAA,WAAW,EAAE;AAHN,OAAD,CAAR;AAKD,KATa,CAWd;;AACD,GAZD,EAYG,CAACR,EAAD,CAZH;;AAcA,MAAMK,SAAS;AAAA,6FAAG,iBAAMI,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEwCC,OAAO,CAACC,GAAR,CACpD,iBAAUF,MAAV,mBAA6BA,MAA7B,mBAAmDG,GAAnD,CAAuD,UAAAC,QAAQ;AAAA,uBAC7D,kDAAkBA,QAAlB,GAA8B;AAAEC,kBAAAA,MAAM,EAAE;AAAV,iBAA9B,CAD6D;AAAA,eAA/D,CADoD,CAFxC;;AAAA;AAAA;AAAA;AAECP,cAAAA,IAFD,0BAELQ,IAFK;AAEiBP,cAAAA,WAFjB,0BAEWO,IAFX;AAQdX,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAE,oBADC;AAEPC,gBAAAA,IAAI,EAAJA,IAFO;AAGPC,gBAAAA,WAAW,EAAXA;AAHO,eAAD,CAAR;AARc;AAAA;;AAAA;AAAA;AAAA;AAcdQ,cAAAA,OAAO,CAACC,KAAR;AAEAb,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAE;AADC,eAAD,CAAR;AAGAY,cAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBd,gBAAAA,IAAI,EAAE,SADmB;AAEzBe,gBAAAA,OAAO,EAAE;AAAErB,kBAAAA,EAAE,EAAE;AAAN;AAFgB,eAA3B;;AAnBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATK,SAAS;AAAA;AAAA;AAAA,KAAf;;AA0BA,MAAMiB,qBAAqB,GAAG,wBAAY,UAAAP,IAAI,EAAI;AAChDX,IAAAA,QAAQ;AACNE,MAAAA,IAAI,EAAE;AADA,OAEHS,IAFG,EAAR;AAID,GAL6B,EAK3B,EAL2B,CAA9B;AAOA,yCAAYZ,KAAZ;AAAmBoB,IAAAA,iBAAiB,EAAED;AAAtC;AACD,CAnDD;;eAqDevB,Y","sourcesContent":["import { useCallback, useReducer, useEffect } from 'react';\nimport { request } from 'strapi-helper-plugin';\nimport reducer, { initialState } from './reducer';\n\nconst useFetchRole = id => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    if (id) {\n      fetchRole(id);\n    } else {\n      dispatch({\n        type: 'GET_DATA_SUCCEEDED',\n        role: {},\n        permissions: [],\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  const fetchRole = async roleId => {\n    try {\n      const [{ data: role }, { data: permissions }] = await Promise.all(\n        [`roles/${roleId}`, `roles/${roleId}/permissions`].map(endPoint =>\n          request(`/admin/${endPoint}`, { method: 'GET' })\n        )\n      );\n\n      dispatch({\n        type: 'GET_DATA_SUCCEEDED',\n        role,\n        permissions,\n      });\n    } catch (err) {\n      console.error(err);\n\n      dispatch({\n        type: 'GET_DATA_ERROR',\n      });\n      strapi.notification.toggle({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    }\n  };\n\n  const handleSubmitSucceeded = useCallback(data => {\n    dispatch({\n      type: 'ON_SUBMIT_SUCCEEDED',\n      ...data,\n    });\n  }, []);\n\n  return { ...state, onSubmitSucceeded: handleSubmitSucceeded };\n};\n\nexport default useFetchRole;\n"]},"metadata":{},"sourceType":"script"}