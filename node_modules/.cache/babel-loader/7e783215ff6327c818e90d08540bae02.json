{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getActionIdsFromPropertyActions = exports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../../../utils\");\n\n/**\n * Returns a filtered array of actionId\n * @param {array<object>} propertyActions\n * @returns {string} actionId\n */\nvar getActionIdsFromPropertyActions = function getActionIdsFromPropertyActions(propertyActions) {\n  var actionIds = propertyActions.reduce(function (acc, current) {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n  return actionIds;\n};\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n * @param {array} propertyActions\n * @param {object} modifiedData\n * @param {string} pathToContentType\n * @param {string} propertyToCheck\n * @param {string} targetKey\n * @returns {object}\n */\n\n\nexports.getActionIdsFromPropertyActions = getActionIdsFromPropertyActions;\n\nvar getRowLabelCheckboxeState = function getRowLabelCheckboxeState(propertyActions, modifiedData, pathToContentType, propertyToCheck, targetKey) {\n  var actionIds = getActionIdsFromPropertyActions(propertyActions);\n  var data = actionIds.reduce(function (acc, current) {\n    var pathToData = [].concat((0, _toConsumableArray2[\"default\"])(pathToContentType.split('..')), [current, 'properties', propertyToCheck, targetKey]);\n    var mainData = (0, _lodash.get)(modifiedData, pathToData, false);\n    acc[current] = mainData;\n    return acc;\n  }, {});\n  return (0, _utils.getCheckboxState)(data);\n};\n\nvar _default = getRowLabelCheckboxeState;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/utils/getRowLabelCheckboxeState.js"],"names":["getActionIdsFromPropertyActions","propertyActions","actionIds","reduce","acc","current","isActionRelatedToCurrentProperty","push","actionId","getRowLabelCheckboxeState","modifiedData","pathToContentType","propertyToCheck","targetKey","data","pathToData","split","mainData"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAMA,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAAC,eAAe,EAAI;AACzD,MAAMC,SAAS,GAAGD,eAAe,CAACE,MAAhB,CAAuB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACzD,QAAIA,OAAO,CAACC,gCAAZ,EAA8C;AAC5CF,MAAAA,GAAG,CAACG,IAAJ,CAASF,OAAO,CAACG,QAAjB;AACD;;AAED,WAAOJ,GAAP;AACD,GANiB,EAMf,EANe,CAAlB;AAQA,SAAOF,SAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,IAAMO,yBAAyB,GAAG,SAA5BA,yBAA4B,CAChCR,eADgC,EAEhCS,YAFgC,EAGhCC,iBAHgC,EAIhCC,eAJgC,EAKhCC,SALgC,EAM7B;AACH,MAAMX,SAAS,GAAGF,+BAA+B,CAACC,eAAD,CAAjD;AAEA,MAAMa,IAAI,GAAGZ,SAAS,CAACC,MAAV,CAAiB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC9C,QAAMU,UAAU,iDACXJ,iBAAiB,CAACK,KAAlB,CAAwB,IAAxB,CADW,IAEdX,OAFc,EAGd,YAHc,EAIdO,eAJc,EAKdC,SALc,EAAhB;AAOA,QAAMI,QAAQ,GAAG,iBAAIP,YAAJ,EAAkBK,UAAlB,EAA8B,KAA9B,CAAjB;AAEAX,IAAAA,GAAG,CAACC,OAAD,CAAH,GAAeY,QAAf;AAEA,WAAOb,GAAP;AACD,GAbY,EAaV,EAbU,CAAb;AAeA,SAAO,6BAAiBU,IAAjB,CAAP;AACD,CAzBD;;eA2BeL,yB","sourcesContent":["import { get } from 'lodash';\nimport { getCheckboxState } from '../../../../utils';\n\n/**\n * Returns a filtered array of actionId\n * @param {array<object>} propertyActions\n * @returns {string} actionId\n */\nconst getActionIdsFromPropertyActions = propertyActions => {\n  const actionIds = propertyActions.reduce((acc, current) => {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n\n  return actionIds;\n};\n\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n * @param {array} propertyActions\n * @param {object} modifiedData\n * @param {string} pathToContentType\n * @param {string} propertyToCheck\n * @param {string} targetKey\n * @returns {object}\n */\nconst getRowLabelCheckboxeState = (\n  propertyActions,\n  modifiedData,\n  pathToContentType,\n  propertyToCheck,\n  targetKey\n) => {\n  const actionIds = getActionIdsFromPropertyActions(propertyActions);\n\n  const data = actionIds.reduce((acc, current) => {\n    const pathToData = [\n      ...pathToContentType.split('..'),\n      current,\n      'properties',\n      propertyToCheck,\n      targetKey,\n    ];\n    const mainData = get(modifiedData, pathToData, false);\n\n    acc[current] = mainData;\n\n    return acc;\n  }, {});\n\n  return getCheckboxState(data);\n};\n\nexport default getRowLabelCheckboxeState;\nexport { getActionIdsFromPropertyActions };\n"]},"metadata":{},"sourceType":"script"}