{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _styles = require(\"@buffetjs/styles\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _utils = require(\"../../utils\");\n\nvar _Truncate = _interopRequireDefault(require(\"../Truncate\"));\n\nvar _Truncated = _interopRequireDefault(require(\"../Truncated\"));\n\nvar _CountWrapper = _interopRequireDefault(require(\"./CountWrapper\"));\n\nvar _RelationPreviewTooltip = _interopRequireDefault(require(\"./RelationPreviewTooltip\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar RelationPreviewList = function RelationPreviewList(_ref) {\n  var _ref$options = _ref.options,\n      mainField = _ref$options.metadatas.mainField,\n      relationType = _ref$options.relationType,\n      value = _ref$options.value,\n      rowId = _ref$options.rowId,\n      cellId = _ref$options.cellId,\n      name = _ref$options.name,\n      queryInfos = _ref$options.queryInfos;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      tooltipIsDisplayed = _useState2[0],\n      setDisplayTooltip = _useState2[1];\n\n  var isSingle = ['oneWay', 'oneToOne', 'manyToOne'].includes(relationType);\n  var tooltipId = (0, _react.useMemo)(function () {\n    return \"\".concat(rowId, \"-\").concat(cellId);\n  }, [rowId, cellId]);\n  var valueToDisplay = value ? value[mainField.name] : '-';\n\n  if (value === undefined) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Truncate[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_Truncated[\"default\"], null, \"-\"));\n  }\n\n  if (isSingle) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_Truncate[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_Truncated[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"span\", {\n      \"data-for\": tooltipId,\n      \"data-tip\": valueToDisplay\n    }, valueToDisplay)), /*#__PURE__*/_react[\"default\"].createElement(_styles.Tooltip, {\n      id: tooltipId\n    }));\n  }\n\n  var size = value ? value.count : 0;\n\n  var handleTooltipToggle = function handleTooltipToggle() {\n    setDisplayTooltip(function (prev) {\n      return !prev;\n    });\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_Truncate[\"default\"], {\n    style: {\n      maxWidth: 'fit-content'\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex // This is useful to avoid the render of every tooltips of the list at the same time.\n  // https://github.com/wwayne/react-tooltip/issues/524\n  , {\n    onMouseEnter: handleTooltipToggle,\n    onMouseLeave: handleTooltipToggle,\n    \"data-for\": tooltipId,\n    \"data-tip\": JSON.stringify(value)\n  }, /*#__PURE__*/_react[\"default\"].createElement(_CountWrapper[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(_core.Count, {\n    count: size\n  })), /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    left: true,\n    size: \"xs\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_Truncated[\"default\"], null, formatMessage({\n    id: (0, _utils.getTrad)(size > 1 ? 'containers.ListPage.items.plural' : 'containers.ListPage.items.singular')\n  }))), size > 0 && tooltipIsDisplayed && /*#__PURE__*/_react[\"default\"].createElement(_RelationPreviewTooltip[\"default\"], {\n    name: name,\n    rowId: rowId,\n    tooltipId: tooltipId,\n    value: value,\n    mainField: mainField,\n    queryInfos: queryInfos,\n    size: size\n  }));\n};\n\nRelationPreviewList.propTypes = {\n  options: _propTypes[\"default\"].shape({\n    cellId: _propTypes[\"default\"].string.isRequired,\n    metadatas: _propTypes[\"default\"].shape({\n      mainField: _propTypes[\"default\"].object.isRequired\n    }).isRequired,\n    name: _propTypes[\"default\"].string.isRequired,\n    relationType: _propTypes[\"default\"].string,\n    rowId: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]).isRequired,\n    type: _propTypes[\"default\"].string,\n    queryInfos: _propTypes[\"default\"].shape({\n      endPoint: _propTypes[\"default\"].string.isRequired\n    }).isRequired,\n    value: _propTypes[\"default\"].any\n  }).isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(RelationPreviewList);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/components/RelationPreviewList/index.js"],"names":["RelationPreviewList","options","mainField","metadatas","relationType","value","rowId","cellId","name","queryInfos","formatMessage","tooltipIsDisplayed","setDisplayTooltip","isSingle","includes","tooltipId","valueToDisplay","undefined","size","count","handleTooltipToggle","prev","maxWidth","JSON","stringify","id","propTypes","PropTypes","shape","string","isRequired","object","oneOfType","number","type","endPoint","any"],"mappings":"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","sourcesContent":["import React, { memo, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Flex, Padded, Count } from '@buffetjs/core';\nimport { Tooltip } from '@buffetjs/styles';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\nimport Truncate from '../Truncate';\nimport Truncated from '../Truncated';\nimport CountWrapper from './CountWrapper';\nimport RelationPreviewTooltip from './RelationPreviewTooltip';\n\nconst RelationPreviewList = ({\n  options: {\n    metadatas: { mainField },\n    relationType,\n    value,\n    rowId,\n    cellId,\n    name,\n    queryInfos,\n  },\n}) => {\n  const { formatMessage } = useIntl();\n  const [tooltipIsDisplayed, setDisplayTooltip] = useState(false);\n  const isSingle = ['oneWay', 'oneToOne', 'manyToOne'].includes(relationType);\n  const tooltipId = useMemo(() => `${rowId}-${cellId}`, [rowId, cellId]);\n  const valueToDisplay = value ? value[mainField.name] : '-';\n\n  if (value === undefined) {\n    return (\n      <Truncate>\n        <Truncated>-</Truncated>\n      </Truncate>\n    );\n  }\n\n  if (isSingle) {\n    return (\n      <Truncate>\n        <Truncated>\n          <span data-for={tooltipId} data-tip={valueToDisplay}>\n            {valueToDisplay}\n          </span>\n        </Truncated>\n        <Tooltip id={tooltipId} />\n      </Truncate>\n    );\n  }\n\n  const size = value ? value.count : 0;\n\n  const handleTooltipToggle = () => {\n    setDisplayTooltip(prev => !prev);\n  };\n\n  return (\n    <Truncate style={{ maxWidth: 'fit-content' }}>\n      <Flex\n        // This is useful to avoid the render of every tooltips of the list at the same time.\n        // https://github.com/wwayne/react-tooltip/issues/524\n        onMouseEnter={handleTooltipToggle}\n        onMouseLeave={handleTooltipToggle}\n        data-for={tooltipId}\n        data-tip={JSON.stringify(value)}\n      >\n        <CountWrapper>\n          <Count count={size} />\n        </CountWrapper>\n        <Padded left size=\"xs\" />\n        <Truncated>\n          {formatMessage({\n            id: getTrad(\n              size > 1 ? 'containers.ListPage.items.plural' : 'containers.ListPage.items.singular'\n            ),\n          })}\n        </Truncated>\n      </Flex>\n      {size > 0 && tooltipIsDisplayed && (\n        <RelationPreviewTooltip\n          name={name}\n          rowId={rowId}\n          tooltipId={tooltipId}\n          value={value}\n          mainField={mainField}\n          queryInfos={queryInfos}\n          size={size}\n        />\n      )}\n    </Truncate>\n  );\n};\n\nRelationPreviewList.propTypes = {\n  options: PropTypes.shape({\n    cellId: PropTypes.string.isRequired,\n    metadatas: PropTypes.shape({\n      mainField: PropTypes.object.isRequired,\n    }).isRequired,\n    name: PropTypes.string.isRequired,\n    relationType: PropTypes.string,\n    rowId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    type: PropTypes.string,\n    queryInfos: PropTypes.shape({\n      endPoint: PropTypes.string.isRequired,\n    }).isRequired,\n    value: PropTypes.any,\n  }).isRequired,\n};\n\nexport default memo(RelationPreviewList);\n"]},"metadata":{},"sourceType":"script"}