{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.disableAttributesLocalisation = exports.addLocalisationToFields = exports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _localizedFields = _interopRequireDefault(require(\"./localizedFields\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar localizedPath = ['pluginOptions', 'i18n', 'localized'];\n\nvar addLocalisationToFields = function addLocalisationToFields(attributes) {\n  return Object.keys(attributes).reduce(function (acc, current) {\n    var currentAttribute = attributes[current];\n\n    if (_localizedFields[\"default\"].includes(currentAttribute.type)) {\n      var i18n = {\n        localized: true\n      };\n      var pluginOptions = currentAttribute.pluginOptions ? _objectSpread(_objectSpread({}, currentAttribute.pluginOptions), {}, {\n        i18n: i18n\n      }) : {\n        i18n: i18n\n      };\n      acc[current] = _objectSpread(_objectSpread({}, currentAttribute), {}, {\n        pluginOptions: pluginOptions\n      });\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n    return acc;\n  }, {});\n};\n\nexports.addLocalisationToFields = addLocalisationToFields;\n\nvar disableAttributesLocalisation = function disableAttributesLocalisation(attributes) {\n  return Object.keys(attributes).reduce(function (acc, current) {\n    acc[current] = (0, _lodash.omit)(attributes[current], 'pluginOptions.i18n');\n    return acc;\n  }, {});\n};\n\nexports.disableAttributesLocalisation = disableAttributesLocalisation;\n\nvar mutateCTBContentTypeSchema = function mutateCTBContentTypeSchema(nextSchema, prevSchema) {\n  // Don't perform mutations components\n  if (!(0, _lodash.has)(nextSchema, localizedPath)) {\n    return nextSchema;\n  }\n\n  var isNextSchemaLocalized = (0, _lodash.get)(nextSchema, localizedPath, false);\n  var isPrevSchemaLocalized = (0, _lodash.get)(prevSchema, ['schema'].concat(localizedPath), false); // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    var attributes = addLocalisationToFields(nextSchema.attributes);\n    return _objectSpread(_objectSpread({}, nextSchema), {}, {\n      attributes: attributes\n    });\n  } // Remove the i18n object from the pluginOptions\n\n\n  if (!isNextSchemaLocalized) {\n    var pluginOptions = (0, _lodash.omit)(nextSchema.pluginOptions, 'i18n');\n\n    var _attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return _objectSpread(_objectSpread({}, nextSchema), {}, {\n      pluginOptions: pluginOptions,\n      attributes: _attributes\n    });\n  }\n\n  return nextSchema;\n};\n\nvar _default = mutateCTBContentTypeSchema;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-i18n/admin/src/utils/mutateCTBContentTypeSchema.js"],"names":["localizedPath","addLocalisationToFields","attributes","Object","keys","reduce","acc","current","currentAttribute","LOCALIZED_FIELDS","includes","type","i18n","localized","pluginOptions","disableAttributesLocalisation","mutateCTBContentTypeSchema","nextSchema","prevSchema","isNextSchemaLocalized","isPrevSchemaLocalized"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,aAAa,GAAG,CAAC,eAAD,EAAkB,MAAlB,EAA0B,WAA1B,CAAtB;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,UAAU;AAAA,SACxCC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAA+B,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,QAAMC,gBAAgB,GAAGN,UAAU,CAACK,OAAD,CAAnC;;AAEA,QAAIE,4BAAiBC,QAAjB,CAA0BF,gBAAgB,CAACG,IAA3C,CAAJ,EAAsD;AACpD,UAAMC,IAAI,GAAG;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAb;AAEA,UAAMC,aAAa,GAAGN,gBAAgB,CAACM,aAAjB,mCACbN,gBAAgB,CAACM,aADJ;AACmBF,QAAAA,IAAI,EAAJA;AADnB,WAElB;AAAEA,QAAAA,IAAI,EAAJA;AAAF,OAFJ;AAIAN,MAAAA,GAAG,CAACC,OAAD,CAAH,mCAAoBC,gBAApB;AAAsCM,QAAAA,aAAa,EAAbA;AAAtC;AAEA,aAAOR,GAAP;AACD;;AAEDA,IAAAA,GAAG,CAACC,OAAD,CAAH,GAAeC,gBAAf;AAEA,WAAOF,GAAP;AACD,GAlBD,EAkBG,EAlBH,CADwC;AAAA,CAA1C;;;;AAqBA,IAAMS,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAAb,UAAU;AAAA,SAC9CC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAA+B,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/CD,IAAAA,GAAG,CAACC,OAAD,CAAH,GAAe,kBAAKL,UAAU,CAACK,OAAD,CAAf,EAA0B,oBAA1B,CAAf;AAEA,WAAOD,GAAP;AACD,GAJD,EAIG,EAJH,CAD8C;AAAA,CAAhD;;;;AAOA,IAAMU,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,UAAD,EAAaC,UAAb,EAA4B;AAC7D;AACA,MAAI,CAAC,iBAAID,UAAJ,EAAgBjB,aAAhB,CAAL,EAAqC;AACnC,WAAOiB,UAAP;AACD;;AAED,MAAME,qBAAqB,GAAG,iBAAIF,UAAJ,EAAgBjB,aAAhB,EAA+B,KAA/B,CAA9B;AACA,MAAMoB,qBAAqB,GAAG,iBAAIF,UAAJ,GAAiB,QAAjB,SAA8BlB,aAA9B,GAA8C,KAA9C,CAA9B,CAP6D,CAS7D;AACA;;AACA,MAAImB,qBAAqB,IAAIC,qBAA7B,EAAoD;AAClD,WAAOH,UAAP;AACD;;AAED,MAAIE,qBAAJ,EAA2B;AACzB,QAAMjB,UAAU,GAAGD,uBAAuB,CAACgB,UAAU,CAACf,UAAZ,CAA1C;AAEA,2CAAYe,UAAZ;AAAwBf,MAAAA,UAAU,EAAVA;AAAxB;AACD,GAnB4D,CAqB7D;;;AACA,MAAI,CAACiB,qBAAL,EAA4B;AAC1B,QAAML,aAAa,GAAG,kBAAKG,UAAU,CAACH,aAAhB,EAA+B,MAA/B,CAAtB;;AACA,QAAMZ,WAAU,GAAGa,6BAA6B,CAACE,UAAU,CAACf,UAAZ,CAAhD;;AAEA,2CAAYe,UAAZ;AAAwBH,MAAAA,aAAa,EAAbA,aAAxB;AAAuCZ,MAAAA,UAAU,EAAVA;AAAvC;AACD;;AAED,SAAOe,UAAP;AACD,CA9BD;;eA+BeD,0B","sourcesContent":["import { has, get, omit } from 'lodash';\nimport LOCALIZED_FIELDS from './localizedFields';\n\nconst localizedPath = ['pluginOptions', 'i18n', 'localized'];\n\nconst addLocalisationToFields = attributes =>\n  Object.keys(attributes).reduce((acc, current) => {\n    const currentAttribute = attributes[current];\n\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\n      const i18n = { localized: true };\n\n      const pluginOptions = currentAttribute.pluginOptions\n        ? { ...currentAttribute.pluginOptions, i18n }\n        : { i18n };\n\n      acc[current] = { ...currentAttribute, pluginOptions };\n\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n\n    return acc;\n  }, {});\n\nconst disableAttributesLocalisation = attributes =>\n  Object.keys(attributes).reduce((acc, current) => {\n    acc[current] = omit(attributes[current], 'pluginOptions.i18n');\n\n    return acc;\n  }, {});\n\nconst mutateCTBContentTypeSchema = (nextSchema, prevSchema) => {\n  // Don't perform mutations components\n  if (!has(nextSchema, localizedPath)) {\n    return nextSchema;\n  }\n\n  const isNextSchemaLocalized = get(nextSchema, localizedPath, false);\n  const isPrevSchemaLocalized = get(prevSchema, ['schema', ...localizedPath], false);\n\n  // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    const attributes = addLocalisationToFields(nextSchema.attributes);\n\n    return { ...nextSchema, attributes };\n  }\n\n  // Remove the i18n object from the pluginOptions\n  if (!isNextSchemaLocalized) {\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return { ...nextSchema, pluginOptions, attributes };\n  }\n\n  return nextSchema;\n};\nexport default mutateCTBContentTypeSchema;\nexport { addLocalisationToFields, disableAttributesLocalisation };\n"]},"metadata":{},"sourceType":"script"}