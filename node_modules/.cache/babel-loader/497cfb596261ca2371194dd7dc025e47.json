{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _lodash = require(\"lodash\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _actions = require(\"../../sharedReducers/crudReducer/actions\");\n\nvar _selectors = _interopRequireDefault(require(\"../../sharedReducers/crudReducer/selectors\"));\n\nvar _utils2 = require(\"./utils\");\n\nvar _buildQueryString = _interopRequireDefault(require(\"../ListView/utils/buildQueryString\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// This container is used to handle the CRUD\nvar SingleTypeFormWrapper = function SingleTypeFormWrapper(_ref) {\n  var allLayoutData = _ref.allLayoutData,\n      children = _ref.children,\n      slug = _ref.slug;\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      emitEvent = _useGlobalContext.emitEvent;\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      push = _useHistory.push;\n\n  var emitEventRef = (0, _react.useRef)(emitEvent);\n\n  var _useState = (0, _react.useState)(true),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isCreatingEntry = _useState2[0],\n      setIsCreatingEntry = _useState2[1];\n\n  var _useQueryParams = (0, _strapiHelperPlugin.useQueryParams)(),\n      _useQueryParams2 = (0, _slicedToArray2[\"default\"])(_useQueryParams, 1),\n      _useQueryParams2$ = _useQueryParams2[0],\n      query = _useQueryParams2$.query,\n      rawQuery = _useQueryParams2$.rawQuery;\n\n  var searchToSend = (0, _buildQueryString[\"default\"])(query);\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  var _useSelector = (0, _reactRedux.useSelector)(_selectors[\"default\"]),\n      componentsDataStructure = _useSelector.componentsDataStructure,\n      contentTypeDataStructure = _useSelector.contentTypeDataStructure,\n      data = _useSelector.data,\n      isLoading = _useSelector.isLoading,\n      status = _useSelector.status;\n\n  var cleanReceivedData = (0, _react.useCallback)(function (data) {\n    var cleaned = (0, _utils.removePasswordFieldsFromData)(data, allLayoutData.contentType, allLayoutData.components); // This is needed in order to add a unique id for the repeatable components, in order to make the reorder easier\n\n    return (0, _strapiHelperPlugin.formatComponentData)(cleaned, allLayoutData.contentType, allLayoutData.components);\n  }, [allLayoutData]);\n  (0, _react.useEffect)(function () {\n    return function () {\n      dispatch((0, _actions.resetProps)());\n    };\n  }, [dispatch]);\n  (0, _react.useEffect)(function () {\n    var componentsDataStructure = Object.keys(allLayoutData.components).reduce(function (acc, current) {\n      var defaultComponentForm = (0, _utils.createDefaultForm)((0, _lodash.get)(allLayoutData, ['components', current, 'attributes'], {}), allLayoutData.components);\n      acc[current] = (0, _strapiHelperPlugin.formatComponentData)(defaultComponentForm, allLayoutData.components[current], allLayoutData.components);\n      return acc;\n    }, {});\n    var contentTypeDataStructure = (0, _utils.createDefaultForm)(allLayoutData.contentType.attributes, allLayoutData.components);\n    var contentTypeDataStructureFormatted = (0, _strapiHelperPlugin.formatComponentData)(contentTypeDataStructure, allLayoutData.contentType, allLayoutData.components);\n    dispatch((0, _actions.setDataStructures)(componentsDataStructure, contentTypeDataStructureFormatted));\n  }, [allLayoutData, dispatch]); // Check if creation mode or editing mode\n\n  (0, _react.useEffect)(function () {\n    var abortController = new AbortController();\n    var signal = abortController.signal;\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(signal) {\n        var _data, responseStatus;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch((0, _actions.getData)());\n                setIsCreatingEntry(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return (0, _strapiHelperPlugin.request)((0, _utils2.getRequestUrl)(\"\".concat(slug).concat(searchToSend)), {\n                  method: 'GET',\n                  signal: signal\n                });\n\n              case 5:\n                _data = _context.sent;\n                dispatch((0, _actions.getDataSucceeded)(cleanReceivedData(_data)));\n                setIsCreatingEntry(false);\n                _context.next = 17;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.name === 'AbortError')) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 14:\n                responseStatus = (0, _lodash.get)(_context.t0, 'response.status', null); // Creating a single type\n\n                if (responseStatus === 404) {\n                  dispatch((0, _actions.initForm)(rawQuery, true));\n                }\n\n                if (responseStatus === 403) {\n                  strapi.notification.info((0, _utils.getTrad)('permissions.not-allowed.update'));\n                  push('/');\n                }\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 10]]);\n      }));\n\n      return function fetchData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData(signal);\n    return function () {\n      return abortController.abort();\n    };\n  }, [cleanReceivedData, push, slug, dispatch, searchToSend, rawQuery]);\n  var displayErrors = (0, _react.useCallback)(function (err) {\n    var errorPayload = err.response.payload;\n    console.error(errorPayload);\n    var errorMessage = (0, _lodash.get)(errorPayload, ['message'], 'Bad Request'); // TODO handle errors correctly when back-end ready\n\n    if (Array.isArray(errorMessage)) {\n      errorMessage = (0, _lodash.get)(errorMessage, ['0', 'messages', '0', 'id']);\n    }\n\n    if (typeof errorMessage === 'string') {\n      strapi.notification.error(errorMessage);\n    }\n  }, []);\n  var onDelete = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(trackerProperty) {\n      var response;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              emitEventRef.current('willDeleteEntry', trackerProperty);\n              _context2.next = 4;\n              return (0, _strapiHelperPlugin.request)((0, _utils2.getRequestUrl)(\"\".concat(slug)), {\n                method: 'DELETE'\n              });\n\n            case 4:\n              response = _context2.sent;\n              strapi.notification.success((0, _utils.getTrad)('success.record.delete'));\n              emitEventRef.current('didDeleteEntry', trackerProperty);\n              return _context2.abrupt(\"return\", Promise.resolve(response));\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              emitEventRef.current('didNotDeleteEntry', _objectSpread({\n                error: _context2.t0\n              }, trackerProperty));\n              return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [slug]);\n  var onDeleteSucceeded = (0, _react.useCallback)(function () {\n    setIsCreatingEntry(true);\n    dispatch((0, _actions.initForm)(rawQuery, true));\n  }, [dispatch, rawQuery]);\n  var onPost = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(body, trackerProperty) {\n      var endPoint, response;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug).concat(rawQuery));\n              _context3.prev = 1;\n              dispatch((0, _actions.setStatus)('submit-pending'));\n              _context3.next = 5;\n              return (0, _strapiHelperPlugin.request)(endPoint, {\n                method: 'PUT',\n                body: body\n              });\n\n            case 5:\n              response = _context3.sent;\n              emitEventRef.current('didCreateEntry', trackerProperty);\n              strapi.notification.toggle({\n                type: 'success',\n                message: {\n                  id: (0, _utils.getTrad)('success.record.save')\n                }\n              });\n              dispatch((0, _actions.submitSucceeded)(cleanReceivedData(response)));\n              setIsCreatingEntry(false);\n              dispatch((0, _actions.setStatus)('resolved'));\n              _context3.next = 18;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](1);\n              emitEventRef.current('didNotCreateEntry', {\n                error: _context3.t0,\n                trackerProperty: trackerProperty\n              });\n              displayErrors(_context3.t0);\n              dispatch((0, _actions.setStatus)('resolved'));\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 13]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [cleanReceivedData, displayErrors, slug, dispatch, rawQuery]);\n  var onPublish = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4() {\n    var endPoint, _data2;\n\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            emitEventRef.current('willPublishEntry');\n            endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug, \"/actions/publish\").concat(searchToSend));\n            dispatch((0, _actions.setStatus)('publish-pending'));\n            _context4.next = 6;\n            return (0, _strapiHelperPlugin.request)(endPoint, {\n              method: 'POST'\n            });\n\n          case 6:\n            _data2 = _context4.sent;\n            emitEventRef.current('didPublishEntry');\n            strapi.notification.toggle({\n              type: 'success',\n              message: {\n                id: (0, _utils.getTrad)('success.record.publish')\n              }\n            });\n            dispatch((0, _actions.submitSucceeded)(cleanReceivedData(_data2)));\n            dispatch((0, _actions.setStatus)('resolved'));\n            _context4.next = 17;\n            break;\n\n          case 13:\n            _context4.prev = 13;\n            _context4.t0 = _context4[\"catch\"](0);\n            displayErrors(_context4.t0);\n            dispatch((0, _actions.setStatus)('resolved'));\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 13]]);\n  })), [cleanReceivedData, displayErrors, slug, searchToSend, dispatch]);\n  var onPut = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref6 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(body, trackerProperty) {\n      var endPoint, response;\n      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug).concat(rawQuery));\n              _context5.prev = 1;\n              emitEventRef.current('willEditEntry', trackerProperty);\n              dispatch((0, _actions.setStatus)('submit-pending'));\n              _context5.next = 6;\n              return (0, _strapiHelperPlugin.request)(endPoint, {\n                method: 'PUT',\n                body: body\n              });\n\n            case 6:\n              response = _context5.sent;\n              strapi.notification.toggle({\n                type: 'success',\n                message: {\n                  id: (0, _utils.getTrad)('success.record.save')\n                }\n              });\n              emitEventRef.current('didEditEntry', {\n                trackerProperty: trackerProperty\n              });\n              dispatch((0, _actions.submitSucceeded)(cleanReceivedData(response)));\n              dispatch((0, _actions.setStatus)('resolved'));\n              _context5.next = 18;\n              break;\n\n            case 13:\n              _context5.prev = 13;\n              _context5.t0 = _context5[\"catch\"](1);\n              displayErrors(_context5.t0);\n              emitEventRef.current('didNotEditEntry', {\n                error: _context5.t0,\n                trackerProperty: trackerProperty\n              });\n              dispatch((0, _actions.setStatus)('resolved'));\n\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[1, 13]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), [cleanReceivedData, displayErrors, slug, dispatch, rawQuery]); // The publish and unpublish method could be refactored but let's leave the duplication for now\n\n  var onUnpublish = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6() {\n    var endPoint, response;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug, \"/actions/unpublish\").concat(searchToSend));\n            dispatch((0, _actions.setStatus)('unpublish-pending'));\n            _context6.prev = 2;\n            emitEventRef.current('willUnpublishEntry');\n            _context6.next = 6;\n            return (0, _strapiHelperPlugin.request)(endPoint, {\n              method: 'POST'\n            });\n\n          case 6:\n            response = _context6.sent;\n            emitEventRef.current('didUnpublishEntry');\n            strapi.notification.success((0, _utils.getTrad)('success.record.unpublish'));\n            dispatch((0, _actions.submitSucceeded)(cleanReceivedData(response)));\n            dispatch((0, _actions.setStatus)('resolved'));\n            _context6.next = 17;\n            break;\n\n          case 13:\n            _context6.prev = 13;\n            _context6.t0 = _context6[\"catch\"](2);\n            dispatch((0, _actions.setStatus)('resolved'));\n            displayErrors(_context6.t0);\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 13]]);\n  })), [cleanReceivedData, displayErrors, slug, dispatch, searchToSend]);\n  return children({\n    componentsDataStructure: componentsDataStructure,\n    contentTypeDataStructure: contentTypeDataStructure,\n    data: data,\n    isCreatingEntry: isCreatingEntry,\n    isLoadingForData: isLoading,\n    onDelete: onDelete,\n    onDeleteSucceeded: onDeleteSucceeded,\n    onPost: onPost,\n    onPublish: onPublish,\n    onPut: onPut,\n    onUnpublish: onUnpublish,\n    redirectionLink: '/',\n    status: status\n  });\n};\n\nSingleTypeFormWrapper.propTypes = {\n  allLayoutData: _propTypes[\"default\"].shape({\n    components: _propTypes[\"default\"].object.isRequired,\n    contentType: _propTypes[\"default\"].object.isRequired\n  }).isRequired,\n  children: _propTypes[\"default\"].func.isRequired,\n  slug: _propTypes[\"default\"].string.isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(SingleTypeFormWrapper);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/containers/SingleTypeFormWrapper/index.js"],"names":["SingleTypeFormWrapper","allLayoutData","children","slug","emitEvent","push","emitEventRef","isCreatingEntry","setIsCreatingEntry","query","rawQuery","searchToSend","dispatch","selectCrudReducer","componentsDataStructure","contentTypeDataStructure","data","isLoading","status","cleanReceivedData","cleaned","contentType","components","Object","keys","reduce","acc","current","defaultComponentForm","attributes","contentTypeDataStructureFormatted","abortController","AbortController","signal","fetchData","method","name","responseStatus","strapi","notification","info","abort","displayErrors","err","errorPayload","response","payload","console","error","errorMessage","Array","isArray","onDelete","trackerProperty","success","Promise","resolve","reject","onDeleteSucceeded","onPost","body","endPoint","toggle","type","message","id","onPublish","onPut","onUnpublish","isLoadingForData","redirectionLink","propTypes","PropTypes","shape","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { get } from 'lodash';\nimport {\n  request,\n  useGlobalContext,\n  formatComponentData,\n  useQueryParams,\n} from 'strapi-helper-plugin';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createDefaultForm, getTrad, removePasswordFieldsFromData } from '../../utils';\nimport {\n  getData,\n  getDataSucceeded,\n  initForm,\n  resetProps,\n  setDataStructures,\n  setStatus,\n  submitSucceeded,\n} from '../../sharedReducers/crudReducer/actions';\nimport selectCrudReducer from '../../sharedReducers/crudReducer/selectors';\nimport { getRequestUrl } from './utils';\nimport buildQueryString from '../ListView/utils/buildQueryString';\n\n// This container is used to handle the CRUD\nconst SingleTypeFormWrapper = ({ allLayoutData, children, slug }) => {\n  const { emitEvent } = useGlobalContext();\n  const { push } = useHistory();\n  const emitEventRef = useRef(emitEvent);\n  const [isCreatingEntry, setIsCreatingEntry] = useState(true);\n  const [{ query, rawQuery }] = useQueryParams();\n  const searchToSend = buildQueryString(query);\n\n  const dispatch = useDispatch();\n  const {\n    componentsDataStructure,\n    contentTypeDataStructure,\n    data,\n    isLoading,\n    status,\n  } = useSelector(selectCrudReducer);\n\n  const cleanReceivedData = useCallback(\n    data => {\n      const cleaned = removePasswordFieldsFromData(\n        data,\n        allLayoutData.contentType,\n        allLayoutData.components\n      );\n\n      // This is needed in order to add a unique id for the repeatable components, in order to make the reorder easier\n      return formatComponentData(cleaned, allLayoutData.contentType, allLayoutData.components);\n    },\n    [allLayoutData]\n  );\n\n  useEffect(() => {\n    return () => {\n      dispatch(resetProps());\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    const componentsDataStructure = Object.keys(allLayoutData.components).reduce((acc, current) => {\n      const defaultComponentForm = createDefaultForm(\n        get(allLayoutData, ['components', current, 'attributes'], {}),\n        allLayoutData.components\n      );\n\n      acc[current] = formatComponentData(\n        defaultComponentForm,\n        allLayoutData.components[current],\n        allLayoutData.components\n      );\n\n      return acc;\n    }, {});\n\n    const contentTypeDataStructure = createDefaultForm(\n      allLayoutData.contentType.attributes,\n      allLayoutData.components\n    );\n    const contentTypeDataStructureFormatted = formatComponentData(\n      contentTypeDataStructure,\n      allLayoutData.contentType,\n      allLayoutData.components\n    );\n\n    dispatch(setDataStructures(componentsDataStructure, contentTypeDataStructureFormatted));\n  }, [allLayoutData, dispatch]);\n\n  // Check if creation mode or editing mode\n  useEffect(() => {\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const fetchData = async signal => {\n      dispatch(getData());\n\n      setIsCreatingEntry(true);\n\n      try {\n        const data = await request(getRequestUrl(`${slug}${searchToSend}`), {\n          method: 'GET',\n          signal,\n        });\n\n        dispatch(getDataSucceeded(cleanReceivedData(data)));\n\n        setIsCreatingEntry(false);\n      } catch (err) {\n        if (err.name === 'AbortError') {\n          return;\n        }\n\n        const responseStatus = get(err, 'response.status', null);\n\n        // Creating a single type\n        if (responseStatus === 404) {\n          dispatch(initForm(rawQuery, true));\n        }\n\n        if (responseStatus === 403) {\n          strapi.notification.info(getTrad('permissions.not-allowed.update'));\n\n          push('/');\n        }\n      }\n    };\n\n    fetchData(signal);\n\n    return () => abortController.abort();\n  }, [cleanReceivedData, push, slug, dispatch, searchToSend, rawQuery]);\n\n  const displayErrors = useCallback(err => {\n    const errorPayload = err.response.payload;\n    console.error(errorPayload);\n\n    let errorMessage = get(errorPayload, ['message'], 'Bad Request');\n\n    // TODO handle errors correctly when back-end ready\n    if (Array.isArray(errorMessage)) {\n      errorMessage = get(errorMessage, ['0', 'messages', '0', 'id']);\n    }\n\n    if (typeof errorMessage === 'string') {\n      strapi.notification.error(errorMessage);\n    }\n  }, []);\n\n  const onDelete = useCallback(\n    async trackerProperty => {\n      try {\n        emitEventRef.current('willDeleteEntry', trackerProperty);\n\n        const response = await request(getRequestUrl(`${slug}`), {\n          method: 'DELETE',\n        });\n\n        strapi.notification.success(getTrad('success.record.delete'));\n\n        emitEventRef.current('didDeleteEntry', trackerProperty);\n\n        return Promise.resolve(response);\n      } catch (err) {\n        emitEventRef.current('didNotDeleteEntry', { error: err, ...trackerProperty });\n\n        return Promise.reject(err);\n      }\n    },\n    [slug]\n  );\n\n  const onDeleteSucceeded = useCallback(() => {\n    setIsCreatingEntry(true);\n\n    dispatch(initForm(rawQuery, true));\n  }, [dispatch, rawQuery]);\n\n  const onPost = useCallback(\n    async (body, trackerProperty) => {\n      const endPoint = getRequestUrl(`${slug}${rawQuery}`);\n\n      try {\n        dispatch(setStatus('submit-pending'));\n\n        const response = await request(endPoint, { method: 'PUT', body });\n\n        emitEventRef.current('didCreateEntry', trackerProperty);\n        strapi.notification.toggle({\n          type: 'success',\n          message: { id: getTrad('success.record.save') },\n        });\n\n        dispatch(submitSucceeded(cleanReceivedData(response)));\n        setIsCreatingEntry(false);\n\n        dispatch(setStatus('resolved'));\n      } catch (err) {\n        emitEventRef.current('didNotCreateEntry', { error: err, trackerProperty });\n\n        displayErrors(err);\n\n        dispatch(setStatus('resolved'));\n      }\n    },\n    [cleanReceivedData, displayErrors, slug, dispatch, rawQuery]\n  );\n  const onPublish = useCallback(async () => {\n    try {\n      emitEventRef.current('willPublishEntry');\n      const endPoint = getRequestUrl(`${slug}/actions/publish${searchToSend}`);\n\n      dispatch(setStatus('publish-pending'));\n\n      const data = await request(endPoint, { method: 'POST' });\n\n      emitEventRef.current('didPublishEntry');\n      strapi.notification.toggle({\n        type: 'success',\n        message: { id: getTrad('success.record.publish') },\n      });\n\n      dispatch(submitSucceeded(cleanReceivedData(data)));\n\n      dispatch(setStatus('resolved'));\n    } catch (err) {\n      displayErrors(err);\n\n      dispatch(setStatus('resolved'));\n    }\n  }, [cleanReceivedData, displayErrors, slug, searchToSend, dispatch]);\n\n  const onPut = useCallback(\n    async (body, trackerProperty) => {\n      const endPoint = getRequestUrl(`${slug}${rawQuery}`);\n\n      try {\n        emitEventRef.current('willEditEntry', trackerProperty);\n\n        dispatch(setStatus('submit-pending'));\n\n        const response = await request(endPoint, { method: 'PUT', body });\n\n        strapi.notification.toggle({\n          type: 'success',\n          message: { id: getTrad('success.record.save') },\n        });\n\n        emitEventRef.current('didEditEntry', { trackerProperty });\n\n        dispatch(submitSucceeded(cleanReceivedData(response)));\n\n        dispatch(setStatus('resolved'));\n      } catch (err) {\n        displayErrors(err);\n\n        emitEventRef.current('didNotEditEntry', { error: err, trackerProperty });\n\n        dispatch(setStatus('resolved'));\n      }\n    },\n    [cleanReceivedData, displayErrors, slug, dispatch, rawQuery]\n  );\n\n  // The publish and unpublish method could be refactored but let's leave the duplication for now\n  const onUnpublish = useCallback(async () => {\n    const endPoint = getRequestUrl(`${slug}/actions/unpublish${searchToSend}`);\n\n    dispatch(setStatus('unpublish-pending'));\n\n    try {\n      emitEventRef.current('willUnpublishEntry');\n\n      const response = await request(endPoint, { method: 'POST' });\n\n      emitEventRef.current('didUnpublishEntry');\n      strapi.notification.success(getTrad('success.record.unpublish'));\n\n      dispatch(submitSucceeded(cleanReceivedData(response)));\n\n      dispatch(setStatus('resolved'));\n    } catch (err) {\n      dispatch(setStatus('resolved'));\n      displayErrors(err);\n    }\n  }, [cleanReceivedData, displayErrors, slug, dispatch, searchToSend]);\n\n  return children({\n    componentsDataStructure,\n    contentTypeDataStructure,\n    data,\n    isCreatingEntry,\n    isLoadingForData: isLoading,\n    onDelete,\n    onDeleteSucceeded,\n    onPost,\n    onPublish,\n    onPut,\n    onUnpublish,\n    redirectionLink: '/',\n    status,\n  });\n};\n\nSingleTypeFormWrapper.propTypes = {\n  allLayoutData: PropTypes.shape({\n    components: PropTypes.object.isRequired,\n    contentType: PropTypes.object.isRequired,\n  }).isRequired,\n  children: PropTypes.func.isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nexport default memo(SingleTypeFormWrapper);\n"]},"metadata":{},"sourceType":"script"}