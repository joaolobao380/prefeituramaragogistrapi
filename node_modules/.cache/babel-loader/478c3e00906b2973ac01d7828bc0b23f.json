{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _immutable = require(\"immutable\");\n\nvar _lodash = require(\"lodash\");\n\nvar _translations = _interopRequireDefault(require(\"../../translations\"));\n\nvar _constants = require(\"./constants\");\n\n/*\n *\n * LanguageProvider reducer\n *\n */\n// Import supported languages from the translations folder\nvar languages = Object.keys(_translations[\"default\"]); // Define a key to store and get user preferences in local storage.\n\nvar localStorageKey = 'strapi-admin-language'; // Detect user language.\n\nvar userLanguage = window.localStorage.getItem(localStorageKey) || window.navigator.language || window.navigator.userLanguage;\nvar foundLanguage = (0, _lodash.includes)(languages, userLanguage) && userLanguage;\n\nif (!foundLanguage) {\n  // Split user language in a correct format.\n  var userLanguageShort = (0, _lodash.get)((0, _lodash.split)(userLanguage, '-'), '0'); // Check that the language is included in the admin configuration.\n\n  foundLanguage = (0, _lodash.includes)(languages, userLanguageShort) && userLanguageShort;\n}\n\nvar initialState = (0, _immutable.fromJS)({\n  locale: foundLanguage || 'en'\n});\n\nfunction languageProviderReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case _constants.CHANGE_LOCALE:\n      // Set user language in local storage.\n      window.localStorage.setItem(localStorageKey, action.locale);\n      strapi.currentLanguage = action.locale;\n      return state.set('locale', action.locale);\n\n    default:\n      return state;\n  }\n}\n\nvar _default = languageProviderReducer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/containers/LanguageProvider/reducer.js"],"names":["languages","Object","keys","trads","localStorageKey","userLanguage","window","localStorage","getItem","navigator","language","foundLanguage","userLanguageShort","initialState","locale","languageProviderReducer","state","action","type","CHANGE_LOCALE","setItem","strapi","currentLanguage","set"],"mappings":";;;;;;;;;AAMA;;AACA;;AAGA;;AACA;;AAXA;AACA;AACA;AACA;AACA;AAKA;AAIA,IAAMA,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYC,wBAAZ,CAAlB,C,CAEA;;AACA,IAAMC,eAAe,GAAG,uBAAxB,C,CAEA;;AACA,IAAMC,YAAY,GAChBC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,eAA5B,KACAE,MAAM,CAACG,SAAP,CAAiBC,QADjB,IAEAJ,MAAM,CAACG,SAAP,CAAiBJ,YAHnB;AAKA,IAAIM,aAAa,GAAG,sBAASX,SAAT,EAAoBK,YAApB,KAAqCA,YAAzD;;AAEA,IAAI,CAACM,aAAL,EAAoB;AAClB;AACA,MAAMC,iBAAiB,GAAG,iBAAI,mBAAMP,YAAN,EAAoB,GAApB,CAAJ,EAA8B,GAA9B,CAA1B,CAFkB,CAIlB;;AACAM,EAAAA,aAAa,GAAG,sBAASX,SAAT,EAAoBY,iBAApB,KAA0CA,iBAA1D;AACD;;AAED,IAAMC,YAAY,GAAG,uBAAO;AAC1BC,EAAAA,MAAM,EAAEH,aAAa,IAAI;AADC,CAAP,CAArB;;AAIA,SAASI,uBAAT,GAA+D;AAAA,MAA9BC,KAA8B,uEAAtBH,YAAsB;AAAA,MAARI,MAAQ;;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,wBAAL;AACE;AACAb,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BhB,eAA5B,EAA6Ca,MAAM,CAACH,MAApD;AACAO,MAAAA,MAAM,CAACC,eAAP,GAAyBL,MAAM,CAACH,MAAhC;AAEA,aAAOE,KAAK,CAACO,GAAN,CAAU,QAAV,EAAoBN,MAAM,CAACH,MAA3B,CAAP;;AACF;AACE,aAAOE,KAAP;AARJ;AAUD;;eAEcD,uB","sourcesContent":["/*\n *\n * LanguageProvider reducer\n *\n */\n\nimport { fromJS } from 'immutable';\nimport { get, includes, split } from 'lodash';\n\n// Import supported languages from the translations folder\nimport trads from '../../translations';\nimport { CHANGE_LOCALE } from './constants';\n\nconst languages = Object.keys(trads);\n\n// Define a key to store and get user preferences in local storage.\nconst localStorageKey = 'strapi-admin-language';\n\n// Detect user language.\nconst userLanguage =\n  window.localStorage.getItem(localStorageKey) ||\n  window.navigator.language ||\n  window.navigator.userLanguage;\n\nlet foundLanguage = includes(languages, userLanguage) && userLanguage;\n\nif (!foundLanguage) {\n  // Split user language in a correct format.\n  const userLanguageShort = get(split(userLanguage, '-'), '0');\n\n  // Check that the language is included in the admin configuration.\n  foundLanguage = includes(languages, userLanguageShort) && userLanguageShort;\n}\n\nconst initialState = fromJS({\n  locale: foundLanguage || 'en',\n});\n\nfunction languageProviderReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_LOCALE:\n      // Set user language in local storage.\n      window.localStorage.setItem(localStorageKey, action.locale);\n      strapi.currentLanguage = action.locale;\n\n      return state.set('locale', action.locale);\n    default:\n      return state;\n  }\n}\n\nexport default languageProviderReducer;\n"]},"metadata":{},"sourceType":"script"}