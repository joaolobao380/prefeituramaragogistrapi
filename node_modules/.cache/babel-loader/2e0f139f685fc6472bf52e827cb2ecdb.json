{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialState = exports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _immutable = require(\"immutable\");\n\nvar _layout = require(\"./utils/layout\");\n\nvar initialState = (0, _immutable.fromJS)({\n  fieldForm: {},\n  componentLayouts: {},\n  metaToEdit: '',\n  initialData: {},\n  metaForm: {},\n  modifiedData: {}\n});\nexports.initialState = initialState;\n\nvar reducer = function reducer(state, action) {\n  var layoutPathEdit = ['modifiedData', 'layouts', 'edit'];\n  var layoutPathRelations = ['modifiedData', 'layouts', 'editRelations'];\n\n  switch (action.type) {\n    case 'ADD_RELATION':\n      return state.updateIn(layoutPathRelations, function (list) {\n        return list.push(action.name);\n      });\n\n    case 'MOVE_RELATION':\n      {\n        return state.updateIn(layoutPathRelations, function (list) {\n          return list[\"delete\"](action.dragIndex).insert(action.hoverIndex, state.getIn([].concat(layoutPathRelations, [action.dragIndex])));\n        });\n      }\n\n    case 'MOVE_ROW':\n      return state.updateIn(layoutPathEdit, function (list) {\n        return list[\"delete\"](action.dragRowIndex).insert(action.hoverRowIndex, state.getIn([].concat(layoutPathEdit, [action.dragRowIndex])));\n      });\n\n    case 'ON_ADD_DATA':\n      {\n        var size = (0, _layout.getInputSize)(state.getIn(['modifiedData', 'attributes', action.name, 'type']));\n        var listSize = state.getIn(layoutPathEdit).size;\n        var newList = state.getIn(layoutPathEdit).updateIn([listSize - 1, 'rowContent'], function (list) {\n          if (list) {\n            return list.push({\n              name: action.name,\n              size: size\n            });\n          }\n\n          return (0, _immutable.fromJS)([{\n            name: action.name,\n            size: size\n          }]);\n        });\n        var formattedList = (0, _layout.formatLayout)(newList.toJS());\n        return state.updateIn(layoutPathEdit, function () {\n          return (0, _immutable.fromJS)(formattedList);\n        });\n      }\n\n    case 'ON_CHANGE':\n      return state.updateIn(['modifiedData'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), function () {\n        return action.value;\n      });\n\n    case 'ON_CHANGE_META':\n      return state.updateIn(['metaForm'].concat((0, _toConsumableArray2[\"default\"])(action.keys)), function () {\n        return action.value;\n      });\n\n    case 'ON_RESET':\n      return state.update('modifiedData', function () {\n        return state.get('initialData');\n      });\n\n    case 'REMOVE_FIELD':\n      {\n        var row = state.getIn([].concat(layoutPathEdit, [action.rowIndex, 'rowContent']));\n        var newState; // Delete the entire row if length is one or if lenght is equal to 2 and the second element is the hidden div used to make the dnd exp smoother\n\n        if (row.size === 1 || row.size === 2 && row.getIn([1, 'name']) === '_TEMP_') {\n          newState = state.updateIn(layoutPathEdit, function (list) {\n            return list[\"delete\"](action.rowIndex);\n          });\n        } else {\n          newState = state.updateIn([].concat(layoutPathEdit, [action.rowIndex, 'rowContent']), function (list) {\n            return list[\"delete\"](action.fieldIndex);\n          });\n        }\n\n        var updatedList = (0, _immutable.fromJS)((0, _layout.formatLayout)(newState.getIn(layoutPathEdit).toJS()));\n        return state.updateIn(layoutPathEdit, function () {\n          return updatedList;\n        });\n      }\n\n    case 'REMOVE_RELATION':\n      return state.updateIn(layoutPathRelations, function (list) {\n        return list[\"delete\"](action.index);\n      });\n\n    case 'REORDER_DIFF_ROW':\n      {\n        var _newState = state.updateIn([].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent']), function (list) {\n          return list.remove(action.dragIndex);\n        }).updateIn([].concat(layoutPathEdit, [action.hoverRowIndex, 'rowContent']), function (list) {\n          return list.insert(action.hoverIndex, state.getIn([].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent', action.dragIndex])));\n        });\n\n        var _updatedList = (0, _layout.formatLayout)(_newState.getIn(layoutPathEdit).toJS());\n\n        return state.updateIn(layoutPathEdit, function () {\n          return (0, _immutable.fromJS)(_updatedList);\n        });\n      }\n\n    case 'REORDER_ROW':\n      {\n        var _newState2 = state.updateIn([].concat(layoutPathEdit, [action.dragRowIndex, 'rowContent']), function (list) {\n          return list[\"delete\"](action.dragIndex).insert(action.hoverIndex, list.get(action.dragIndex));\n        });\n\n        var _updatedList2 = (0, _layout.formatLayout)(_newState2.getIn(layoutPathEdit).toJS());\n\n        return state.updateIn(layoutPathEdit, function () {\n          return (0, _immutable.fromJS)(_updatedList2);\n        });\n      }\n\n    case 'SET_FIELD_TO_EDIT':\n      return state.update('metaToEdit', function () {\n        return action.name;\n      }).updateIn(['metaForm'], function () {\n        return state.getIn(['modifiedData', 'metadatas', action.name, 'edit']);\n      });\n\n    case 'SUBMIT_META_FORM':\n      {\n        var metaPath = ['modifiedData', 'metadatas', state.get('metaToEdit'), 'edit'];\n        return state.updateIn(metaPath, function () {\n          return state.getIn(['metaForm']);\n        });\n      }\n\n    case 'SUBMIT_SUCCEEDED':\n      return state.update('initialData', function () {\n        return state.get('modifiedData');\n      });\n\n    case 'UNSET_FIELD_TO_EDIT':\n      return state.update('metaToEdit', function () {\n        return '';\n      }).update('metaForm', function () {\n        return (0, _immutable.fromJS)({});\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar _default = reducer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/containers/EditSettingsView/reducer.js"],"names":["initialState","fieldForm","componentLayouts","metaToEdit","initialData","metaForm","modifiedData","reducer","state","action","layoutPathEdit","layoutPathRelations","type","updateIn","list","push","name","dragIndex","insert","hoverIndex","getIn","dragRowIndex","hoverRowIndex","size","listSize","newList","formattedList","toJS","keys","value","update","get","row","rowIndex","newState","fieldIndex","updatedList","index","remove","metaPath"],"mappings":"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","sourcesContent":["import { fromJS } from 'immutable';\nimport { formatLayout, getInputSize } from './utils/layout';\n\nconst initialState = fromJS({\n  fieldForm: {},\n  componentLayouts: {},\n  metaToEdit: '',\n  initialData: {},\n  metaForm: {},\n  modifiedData: {},\n});\n\nconst reducer = (state, action) => {\n  const layoutPathEdit = ['modifiedData', 'layouts', 'edit'];\n  const layoutPathRelations = ['modifiedData', 'layouts', 'editRelations'];\n\n  switch (action.type) {\n    case 'ADD_RELATION':\n      return state.updateIn(layoutPathRelations, list => list.push(action.name));\n    case 'MOVE_RELATION': {\n      return state.updateIn(layoutPathRelations, list => {\n        return list\n          .delete(action.dragIndex)\n          .insert(action.hoverIndex, state.getIn([...layoutPathRelations, action.dragIndex]));\n      });\n    }\n    case 'MOVE_ROW':\n      return state.updateIn(layoutPathEdit, list => {\n        return list\n          .delete(action.dragRowIndex)\n          .insert(action.hoverRowIndex, state.getIn([...layoutPathEdit, action.dragRowIndex]));\n      });\n    case 'ON_ADD_DATA': {\n      const size = getInputSize(state.getIn(['modifiedData', 'attributes', action.name, 'type']));\n\n      const listSize = state.getIn(layoutPathEdit).size;\n      const newList = state.getIn(layoutPathEdit).updateIn([listSize - 1, 'rowContent'], list => {\n        if (list) {\n          return list.push({\n            name: action.name,\n            size,\n          });\n        }\n\n        return fromJS([{ name: action.name, size }]);\n      });\n      const formattedList = formatLayout(newList.toJS());\n\n      return state.updateIn(layoutPathEdit, () => fromJS(formattedList));\n    }\n    case 'ON_CHANGE':\n      return state.updateIn(['modifiedData', ...action.keys], () => action.value);\n    case 'ON_CHANGE_META':\n      return state.updateIn(['metaForm', ...action.keys], () => action.value);\n    case 'ON_RESET':\n      return state.update('modifiedData', () => state.get('initialData'));\n    case 'REMOVE_FIELD': {\n      const row = state.getIn([...layoutPathEdit, action.rowIndex, 'rowContent']);\n      let newState;\n\n      // Delete the entire row if length is one or if lenght is equal to 2 and the second element is the hidden div used to make the dnd exp smoother\n      if (row.size === 1 || (row.size === 2 && row.getIn([1, 'name']) === '_TEMP_')) {\n        newState = state.updateIn(layoutPathEdit, list => list.delete(action.rowIndex));\n      } else {\n        newState = state.updateIn([...layoutPathEdit, action.rowIndex, 'rowContent'], list =>\n          list.delete(action.fieldIndex)\n        );\n      }\n      const updatedList = fromJS(formatLayout(newState.getIn(layoutPathEdit).toJS()));\n\n      return state.updateIn(layoutPathEdit, () => updatedList);\n    }\n    case 'REMOVE_RELATION':\n      return state.updateIn(layoutPathRelations, list => list.delete(action.index));\n    case 'REORDER_DIFF_ROW': {\n      const newState = state\n        .updateIn([...layoutPathEdit, action.dragRowIndex, 'rowContent'], list => {\n          return list.remove(action.dragIndex);\n        })\n        .updateIn([...layoutPathEdit, action.hoverRowIndex, 'rowContent'], list => {\n          return list.insert(\n            action.hoverIndex,\n            state.getIn([...layoutPathEdit, action.dragRowIndex, 'rowContent', action.dragIndex])\n          );\n        });\n\n      const updatedList = formatLayout(newState.getIn(layoutPathEdit).toJS());\n\n      return state.updateIn(layoutPathEdit, () => fromJS(updatedList));\n    }\n    case 'REORDER_ROW': {\n      const newState = state.updateIn(\n        [...layoutPathEdit, action.dragRowIndex, 'rowContent'],\n        list => {\n          return list\n            .delete(action.dragIndex)\n            .insert(action.hoverIndex, list.get(action.dragIndex));\n        }\n      );\n\n      const updatedList = formatLayout(newState.getIn(layoutPathEdit).toJS());\n\n      return state.updateIn(layoutPathEdit, () => fromJS(updatedList));\n    }\n    case 'SET_FIELD_TO_EDIT':\n      return state\n        .update('metaToEdit', () => action.name)\n        .updateIn(['metaForm'], () =>\n          state.getIn(['modifiedData', 'metadatas', action.name, 'edit'])\n        );\n    case 'SUBMIT_META_FORM': {\n      const metaPath = ['modifiedData', 'metadatas', state.get('metaToEdit'), 'edit'];\n\n      return state.updateIn(metaPath, () => state.getIn(['metaForm']));\n    }\n    case 'SUBMIT_SUCCEEDED':\n      return state.update('initialData', () => state.get('modifiedData'));\n    case 'UNSET_FIELD_TO_EDIT':\n      return state.update('metaToEdit', () => '').update('metaForm', () => fromJS({}));\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\nexport { initialState };\n"]},"metadata":{},"sourceType":"script"}