{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _custom = require(\"@buffetjs/custom\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _icons = require(\"@buffetjs/icons\");\n\nvar _matchSorter = _interopRequireDefault(require(\"match-sorter\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _reactFontawesome = require(\"@fortawesome/react-fontawesome\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _permissions = _interopRequireDefault(require(\"../../../permissions\"));\n\nvar _SettingsPageTitle = _interopRequireDefault(require(\"../../../components/SettingsPageTitle\"));\n\nvar _Roles = require(\"../../../components/Roles\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _UpgradePlanModal = _interopRequireDefault(require(\"../../../components/UpgradePlanModal\"));\n\nvar _BaselineAlignment = _interopRequireDefault(require(\"./BaselineAlignment\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar RoleListPage = function RoleListPage() {\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      push = _useHistory.push;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      emitEvent = _useGlobalContext.emitEvent,\n      settingsBaseURL = _useGlobalContext.settingsBaseURL;\n\n  var _useRolesList = (0, _hooks.useRolesList)(),\n      roles = _useRolesList.roles,\n      isLoading = _useRolesList.isLoading;\n\n  var _useSettingsHeaderSea = (0, _hooks.useSettingsHeaderSearchContext)(),\n      toggleHeaderSearch = _useSettingsHeaderSea.toggleHeaderSearch;\n\n  var _useUserPermissions = (0, _strapiHelperPlugin.useUserPermissions)(_permissions[\"default\"].settings.roles),\n      canUpdate = _useUserPermissions.allowedActions.canUpdate;\n\n  var query = (0, _strapiHelperPlugin.useQuery)();\n\n  var _q = decodeURIComponent(query.get('_q') || '');\n\n  var results = (0, _matchSorter[\"default\"])(roles, _q, {\n    keys: ['name', 'description']\n  });\n  (0, _react.useEffect)(function () {\n    toggleHeaderSearch({\n      id: 'Settings.permissions.menu.link.roles.label'\n    });\n    return function () {\n      toggleHeaderSearch();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleGoTo = (0, _react.useCallback)(function (id) {\n    push(\"\".concat(settingsBaseURL, \"/roles/\").concat(id));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [settingsBaseURL]);\n  var handleToggle = (0, _react.useCallback)(function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsOpen(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var handleToggleModalForCreatingRole = (0, _react.useCallback)(function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    emitEvent('didShowRBACUpgradeModal');\n    setIsOpen(true); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var headerActions = [{\n    label: formatMessage({\n      id: 'Settings.roles.list.button.add',\n      defaultMessage: 'Add new role'\n    }),\n    onClick: handleToggleModalForCreatingRole,\n    color: 'primary',\n    type: 'button',\n    icon: true\n  }];\n  var resultsCount = results.length;\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_SettingsPageTitle[\"default\"], {\n    name: \"Roles\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_custom.Header, {\n    icon: true,\n    title: {\n      label: formatMessage({\n        id: 'Settings.roles.title',\n        defaultMessage: 'roles'\n      })\n    },\n    content: formatMessage({\n      id: 'Settings.roles.list.description',\n      defaultMessage: 'List of roles'\n    }) // Show a loader in the header while requesting data\n    ,\n    isLoading: isLoading,\n    actions: headerActions\n  }), /*#__PURE__*/_react[\"default\"].createElement(_BaselineAlignment[\"default\"], null), /*#__PURE__*/_react[\"default\"].createElement(_Roles.RoleListWrapper, null, /*#__PURE__*/_react[\"default\"].createElement(_custom.List, {\n    title: formatMessage({\n      id: \"Settings.roles.list.title\".concat(results.length > 1 ? '.plural' : '.singular')\n    }, {\n      number: resultsCount\n    }),\n    items: results,\n    isLoading: isLoading,\n    customRowComponent: function customRowComponent(role) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_Roles.RoleRow, {\n        onClick: function onClick() {\n          return handleGoTo(role.id);\n        },\n        canUpdate: canUpdate,\n        links: [{\n          icon: /*#__PURE__*/_react[\"default\"].createElement(_icons.Duplicate, {\n            fill: \"#0e1622\"\n          }),\n          onClick: handleToggle\n        }, {\n          icon: canUpdate ? /*#__PURE__*/_react[\"default\"].createElement(_icons.Pencil, {\n            fill: \"#0e1622\"\n          }) : null,\n          onClick: function onClick() {\n            handleGoTo(role.id);\n          }\n        }, {\n          icon: /*#__PURE__*/_react[\"default\"].createElement(_reactFontawesome.FontAwesomeIcon, {\n            icon: \"trash-alt\"\n          }),\n          onClick: handleToggle\n        }],\n        role: role\n      });\n    }\n  }), !resultsCount && !isLoading && /*#__PURE__*/_react[\"default\"].createElement(_Roles.EmptyRole, null), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.ListButton, null, /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    onClick: handleToggleModalForCreatingRole,\n    icon: /*#__PURE__*/_react[\"default\"].createElement(_icons.Plus, {\n      fill: \"#007eff\",\n      width: \"11px\",\n      height: \"11px\"\n    }),\n    label: formatMessage({\n      id: 'Settings.roles.list.button.add',\n      defaultMessage: 'Add new role'\n    })\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_UpgradePlanModal[\"default\"], {\n    isOpen: isOpen,\n    onToggle: handleToggle\n  }));\n};\n\nvar _default = RoleListPage;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/containers/Roles/ListPage/index.js"],"names":["RoleListPage","formatMessage","push","isOpen","setIsOpen","emitEvent","settingsBaseURL","roles","isLoading","toggleHeaderSearch","adminPermissions","settings","canUpdate","allowedActions","query","_q","decodeURIComponent","get","results","keys","id","handleGoTo","handleToggle","e","preventDefault","stopPropagation","prev","handleToggleModalForCreatingRole","headerActions","label","defaultMessage","onClick","color","type","icon","resultsCount","length","number","role"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { List, Header } from '@buffetjs/custom';\nimport { Button } from '@buffetjs/core';\nimport { Duplicate, Pencil, Plus } from '@buffetjs/icons';\nimport matchSorter from 'match-sorter';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ListButton, useGlobalContext, useQuery, useUserPermissions } from 'strapi-helper-plugin';\nimport adminPermissions from '../../../permissions';\nimport PageTitle from '../../../components/SettingsPageTitle';\nimport { EmptyRole, RoleListWrapper, RoleRow } from '../../../components/Roles';\nimport { useRolesList, useSettingsHeaderSearchContext } from '../../../hooks';\nimport UpgradePlanModal from '../../../components/UpgradePlanModal';\nimport BaselineAlignment from './BaselineAlignment';\n\nconst RoleListPage = () => {\n  const { formatMessage } = useIntl();\n  const { push } = useHistory();\n  const [isOpen, setIsOpen] = useState(false);\n  const { emitEvent, settingsBaseURL } = useGlobalContext();\n  const { roles, isLoading } = useRolesList();\n  const { toggleHeaderSearch } = useSettingsHeaderSearchContext();\n  const {\n    allowedActions: { canUpdate },\n  } = useUserPermissions(adminPermissions.settings.roles);\n  const query = useQuery();\n  const _q = decodeURIComponent(query.get('_q') || '');\n  const results = matchSorter(roles, _q, { keys: ['name', 'description'] });\n\n  useEffect(() => {\n    toggleHeaderSearch({ id: 'Settings.permissions.menu.link.roles.label' });\n\n    return () => {\n      toggleHeaderSearch();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleGoTo = useCallback(\n    id => {\n      push(`${settingsBaseURL}/roles/${id}`);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [settingsBaseURL]\n  );\n\n  const handleToggle = useCallback(e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsOpen(prev => !prev);\n  }, []);\n\n  const handleToggleModalForCreatingRole = useCallback(e => {\n    e.preventDefault();\n    e.stopPropagation();\n    emitEvent('didShowRBACUpgradeModal');\n\n    setIsOpen(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const headerActions = [\n    {\n      label: formatMessage({\n        id: 'Settings.roles.list.button.add',\n        defaultMessage: 'Add new role',\n      }),\n      onClick: handleToggleModalForCreatingRole,\n      color: 'primary',\n      type: 'button',\n      icon: true,\n    },\n  ];\n\n  const resultsCount = results.length;\n\n  return (\n    <>\n      <PageTitle name=\"Roles\" />\n      <Header\n        icon\n        title={{\n          label: formatMessage({\n            id: 'Settings.roles.title',\n            defaultMessage: 'roles',\n          }),\n        }}\n        content={formatMessage({\n          id: 'Settings.roles.list.description',\n          defaultMessage: 'List of roles',\n        })}\n        // Show a loader in the header while requesting data\n        isLoading={isLoading}\n        actions={headerActions}\n      />\n      <BaselineAlignment />\n      <RoleListWrapper>\n        <List\n          title={formatMessage(\n            {\n              id: `Settings.roles.list.title${results.length > 1 ? '.plural' : '.singular'}`,\n            },\n            { number: resultsCount }\n          )}\n          items={results}\n          isLoading={isLoading}\n          customRowComponent={role => (\n            <RoleRow\n              onClick={() => handleGoTo(role.id)}\n              canUpdate={canUpdate}\n              links={[\n                {\n                  icon: <Duplicate fill=\"#0e1622\" />,\n                  onClick: handleToggle,\n                },\n                {\n                  icon: canUpdate ? <Pencil fill=\"#0e1622\" /> : null,\n                  onClick: () => {\n                    handleGoTo(role.id);\n                  },\n                },\n                {\n                  icon: <FontAwesomeIcon icon=\"trash-alt\" />,\n                  onClick: handleToggle,\n                },\n              ]}\n              role={role}\n            />\n          )}\n        />\n        {!resultsCount && !isLoading && <EmptyRole />}\n        <ListButton>\n          <Button\n            onClick={handleToggleModalForCreatingRole}\n            icon={<Plus fill=\"#007eff\" width=\"11px\" height=\"11px\" />}\n            label={formatMessage({\n              id: 'Settings.roles.list.button.add',\n              defaultMessage: 'Add new role',\n            })}\n          />\n        </ListButton>\n      </RoleListWrapper>\n      <UpgradePlanModal isOpen={isOpen} onToggle={handleToggle} />\n    </>\n  );\n};\n\nexport default RoleListPage;\n"]},"metadata":{},"sourceType":"script"}