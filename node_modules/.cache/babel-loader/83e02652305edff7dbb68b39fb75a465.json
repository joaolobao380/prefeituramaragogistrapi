{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _lodash = require(\"lodash\");\n\nvar _reactFastCompare = _interopRequireDefault(require(\"react-fast-compare\"));\n\nvar _reactFontawesome = require(\"@fortawesome/react-fontawesome\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _pluginId = _interopRequireDefault(require(\"../../../pluginId\"));\n\nvar _utils = require(\"../../../utils\");\n\nvar _components = require(\"../components\");\n\nvar _utils2 = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar DeleteLink = function DeleteLink(_ref) {\n  var isCreatingEntry = _ref.isCreatingEntry,\n      onDelete = _ref.onDelete,\n      onDeleteSucceeded = _ref.onDeleteSucceeded,\n      trackerProperty = _ref.trackerProperty;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      showWarningDelete = _useState2[0],\n      setWarningDelete = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      didDeleteEntry = _useState4[0],\n      setDidDeleteEntry = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      isModalConfirmButtonLoading = _useState6[0],\n      setIsModalConfirmButtonLoading = _useState6[1];\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var toggleWarningDelete = function toggleWarningDelete() {\n    return setWarningDelete(function (prevState) {\n      return !prevState;\n    });\n  };\n\n  var handleConfirmDelete = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      var errorMessage;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Show the loading state\n              setIsModalConfirmButtonLoading(true);\n              _context.next = 4;\n              return onDelete(trackerProperty);\n\n            case 4:\n              // This is used to perform action after the modal is closed\n              // so the transitions are smoother\n              // Actions will be performed in the handleClosed function\n              setDidDeleteEntry(true);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              errorMessage = (0, _lodash.get)(_context.t0, 'response.payload.message', formatMessage({\n                id: \"\".concat(_pluginId[\"default\"], \".error.record.delete\")\n              }));\n              strapi.notification.error(errorMessage);\n\n            case 11:\n              _context.prev = 11;\n              setIsModalConfirmButtonLoading(false);\n              toggleWarningDelete();\n              return _context.finish(11);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7, 11, 15]]);\n    }));\n\n    return function handleConfirmDelete() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleClosed = function handleClosed() {\n    setDidDeleteEntry(false);\n\n    if (didDeleteEntry) {\n      onDeleteSucceeded();\n    }\n  };\n\n  if (isCreatingEntry) {\n    return null;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(\"li\", null, /*#__PURE__*/_react[\"default\"].createElement(_components.DeleteButton, {\n    onClick: toggleWarningDelete\n  }, /*#__PURE__*/_react[\"default\"].createElement(_reactFontawesome.FontAwesomeIcon, {\n    icon: \"trash-alt\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    lineHeight: \"22px\",\n    color: \"lightOrange\"\n  }, formatMessage({\n    id: (0, _utils.getTrad)('containers.Edit.delete-entry')\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.PopUpWarning, {\n    isOpen: showWarningDelete,\n    toggleModal: toggleWarningDelete,\n    content: {\n      message: (0, _utils.getTrad)('popUpWarning.bodyMessage.contentType.delete')\n    },\n    popUpWarningType: \"danger\",\n    onConfirm: handleConfirmDelete,\n    onClosed: handleClosed,\n    isConfirmButtonLoading: isModalConfirmButtonLoading\n  }));\n};\n\nDeleteLink.propTypes = {\n  isCreatingEntry: _propTypes[\"default\"].bool.isRequired,\n  onDelete: _propTypes[\"default\"].func.isRequired,\n  onDeleteSucceeded: _propTypes[\"default\"].func.isRequired,\n  trackerProperty: _propTypes[\"default\"].object.isRequired\n};\nvar Memoized = /*#__PURE__*/(0, _react.memo)(DeleteLink, _reactFastCompare[\"default\"]);\n\nvar _default = (0, _utils2.connect)(Memoized, _utils2.select);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/containers/EditView/DeleteLink/index.js"],"names":["DeleteLink","isCreatingEntry","onDelete","onDeleteSucceeded","trackerProperty","showWarningDelete","setWarningDelete","didDeleteEntry","setDidDeleteEntry","isModalConfirmButtonLoading","setIsModalConfirmButtonLoading","formatMessage","toggleWarningDelete","prevState","handleConfirmDelete","errorMessage","id","pluginId","strapi","notification","error","handleClosed","message","propTypes","PropTypes","bool","isRequired","func","object","Memoized","isEqual","select"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { get } from 'lodash';\nimport isEqual from 'react-fast-compare';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Text } from '@buffetjs/core';\nimport { PopUpWarning } from 'strapi-helper-plugin';\nimport PropTypes from 'prop-types';\nimport pluginId from '../../../pluginId';\nimport { getTrad } from '../../../utils';\nimport { DeleteButton } from '../components';\nimport { connect, select } from './utils';\n\nconst DeleteLink = ({ isCreatingEntry, onDelete, onDeleteSucceeded, trackerProperty }) => {\n  const [showWarningDelete, setWarningDelete] = useState(false);\n  const [didDeleteEntry, setDidDeleteEntry] = useState(false);\n  const [isModalConfirmButtonLoading, setIsModalConfirmButtonLoading] = useState(false);\n  const { formatMessage } = useIntl();\n\n  const toggleWarningDelete = () => setWarningDelete(prevState => !prevState);\n\n  const handleConfirmDelete = async () => {\n    try {\n      // Show the loading state\n      setIsModalConfirmButtonLoading(true);\n\n      await onDelete(trackerProperty);\n\n      // This is used to perform action after the modal is closed\n      // so the transitions are smoother\n      // Actions will be performed in the handleClosed function\n      setDidDeleteEntry(true);\n    } catch (err) {\n      const errorMessage = get(\n        err,\n        'response.payload.message',\n        formatMessage({ id: `${pluginId}.error.record.delete` })\n      );\n      strapi.notification.error(errorMessage);\n    } finally {\n      setIsModalConfirmButtonLoading(false);\n      toggleWarningDelete();\n    }\n  };\n\n  const handleClosed = () => {\n    setDidDeleteEntry(false);\n\n    if (didDeleteEntry) {\n      onDeleteSucceeded();\n    }\n  };\n\n  if (isCreatingEntry) {\n    return null;\n  }\n\n  return (\n    <>\n      <li>\n        <DeleteButton onClick={toggleWarningDelete}>\n          <FontAwesomeIcon icon=\"trash-alt\" />\n          <Text lineHeight=\"22px\" color=\"lightOrange\">\n            {formatMessage({\n              id: getTrad('containers.Edit.delete-entry'),\n            })}\n          </Text>\n        </DeleteButton>\n      </li>\n      <PopUpWarning\n        isOpen={showWarningDelete}\n        toggleModal={toggleWarningDelete}\n        content={{\n          message: getTrad('popUpWarning.bodyMessage.contentType.delete'),\n        }}\n        popUpWarningType=\"danger\"\n        onConfirm={handleConfirmDelete}\n        onClosed={handleClosed}\n        isConfirmButtonLoading={isModalConfirmButtonLoading}\n      />\n    </>\n  );\n};\n\nDeleteLink.propTypes = {\n  isCreatingEntry: PropTypes.bool.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onDeleteSucceeded: PropTypes.func.isRequired,\n  trackerProperty: PropTypes.object.isRequired,\n};\n\nconst Memoized = memo(DeleteLink, isEqual);\n\nexport default connect(Memoized, select);\n"]},"metadata":{},"sourceType":"script"}