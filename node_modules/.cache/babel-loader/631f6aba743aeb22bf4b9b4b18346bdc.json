{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNewBlock = createNewBlock;\nexports.getNextBlocksList = getNextBlocksList;\nexports.updateSelection = updateSelection;\nexports.getSelectedBlocksList = getSelectedBlocksList;\nexports.onTab = onTab;\n\nvar _draftJs = require(\"draft-js\");\n\nvar _immutable = require(\"immutable\");\n\nvar _constants = require(\"./constants\");\n\n/**\n *\n * Utils\n *\n */\nfunction createNewBlock() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unstyled';\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _draftJs.genKey)();\n  return new _draftJs.ContentBlock({\n    key: key,\n    type: type,\n    text: text,\n    charaterList: (0, _immutable.List)([])\n  });\n}\n\nfunction getNextBlocksList(editorState, startKey) {\n  return editorState.getCurrentContent().getBlockMap().toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).toList().shift().concat([createNewBlock()]);\n}\n\nfunction updateSelection(selection, blocks, offset) {\n  return selection.merge({\n    anchorKey: blocks.get(0).getKey(),\n    focusKey: blocks.get(0).getKey(),\n    anchorOffset: offset,\n    focusOffset: offset\n  });\n}\n\nfunction getSelectedBlocksList(editorState) {\n  var selectionState = editorState.getSelection();\n  var contentState = editorState.getCurrentContent();\n  var startKey = selectionState.getStartKey();\n  var endKey = selectionState.getEndKey();\n  var blockMap = contentState.getBlockMap();\n  return blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).concat([[endKey, blockMap.get(endKey)]]).toList();\n}\n\nfunction onTab(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var selection = editorState.getSelection();\n  var newContentState;\n\n  if (selection.isCollapsed()) {\n    newContentState = _draftJs.Modifier.insertText(contentState, selection, _constants.DEFAULT_INDENTATION);\n  } else {\n    newContentState = _draftJs.Modifier.replaceText(contentState, selection, _constants.DEFAULT_INDENTATION);\n  }\n\n  return _draftJs.EditorState.push(editorState, newContentState, 'insert-characters');\n}","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/components/Wysiwyg/utils.js"],"names":["createNewBlock","text","type","key","ContentBlock","charaterList","getNextBlocksList","editorState","startKey","getCurrentContent","getBlockMap","toSeq","skipUntil","_","k","toList","shift","concat","updateSelection","selection","blocks","offset","merge","anchorKey","get","getKey","focusKey","anchorOffset","focusOffset","getSelectedBlocksList","selectionState","getSelection","contentState","getStartKey","endKey","getEndKey","blockMap","takeUntil","onTab","newContentState","isCollapsed","Modifier","insertText","DEFAULT_INDENTATION","replaceText","EditorState","push"],"mappings":";;;;;;;;;;;AAMA;;AACA;;AACA;;AARA;AACA;AACA;AACA;AACA;AAMO,SAASA,cAAT,GAAsE;AAAA,MAA9CC,IAA8C,uEAAvC,EAAuC;AAAA,MAAnCC,IAAmC,uEAA5B,UAA4B;AAAA,MAAhBC,GAAgB,uEAAV,sBAAU;AAC3E,SAAO,IAAIC,qBAAJ,CAAiB;AAAED,IAAAA,GAAG,EAAHA,GAAF;AAAOD,IAAAA,IAAI,EAAJA,IAAP;AAAaD,IAAAA,IAAI,EAAJA,IAAb;AAAmBI,IAAAA,YAAY,EAAE,qBAAK,EAAL;AAAjC,GAAjB,CAAP;AACD;;AAEM,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCC,QAAxC,EAAkD;AACvD,SAAOD,WAAW,CACfE,iBADI,GAEJC,WAFI,GAGJC,KAHI,GAIJC,SAJI,CAIM,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,KAAKN,QAAhB;AAAA,GAJN,EAKJO,MALI,GAMJC,KANI,GAOJC,MAPI,CAOG,CAACjB,cAAc,EAAf,CAPH,CAAP;AAQD;;AAEM,SAASkB,eAAT,CAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoD;AACzD,SAAOF,SAAS,CAACG,KAAV,CAAgB;AACrBC,IAAAA,SAAS,EAAEH,MAAM,CAACI,GAAP,CAAW,CAAX,EAAcC,MAAd,EADU;AAErBC,IAAAA,QAAQ,EAAEN,MAAM,CAACI,GAAP,CAAW,CAAX,EAAcC,MAAd,EAFW;AAGrBE,IAAAA,YAAY,EAAEN,MAHO;AAIrBO,IAAAA,WAAW,EAAEP;AAJQ,GAAhB,CAAP;AAMD;;AAEM,SAASQ,qBAAT,CAA+BtB,WAA/B,EAA4C;AACjD,MAAMuB,cAAc,GAAGvB,WAAW,CAACwB,YAAZ,EAAvB;AACA,MAAMC,YAAY,GAAGzB,WAAW,CAACE,iBAAZ,EAArB;AACA,MAAMD,QAAQ,GAAGsB,cAAc,CAACG,WAAf,EAAjB;AACA,MAAMC,MAAM,GAAGJ,cAAc,CAACK,SAAf,EAAf;AACA,MAAMC,QAAQ,GAAGJ,YAAY,CAACtB,WAAb,EAAjB;AAEA,SAAO0B,QAAQ,CACZzB,KADI,GAEJC,SAFI,CAEM,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,KAAKN,QAAhB;AAAA,GAFN,EAGJ6B,SAHI,CAGM,UAACxB,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,KAAKoB,MAAhB;AAAA,GAHN,EAIJjB,MAJI,CAIG,CAAC,CAACiB,MAAD,EAASE,QAAQ,CAACZ,GAAT,CAAaU,MAAb,CAAT,CAAD,CAJH,EAKJnB,MALI,EAAP;AAMD;;AAEM,SAASuB,KAAT,CAAe/B,WAAf,EAA4B;AACjC,MAAMyB,YAAY,GAAGzB,WAAW,CAACE,iBAAZ,EAArB;AACA,MAAMU,SAAS,GAAGZ,WAAW,CAACwB,YAAZ,EAAlB;AACA,MAAIQ,eAAJ;;AAEA,MAAIpB,SAAS,CAACqB,WAAV,EAAJ,EAA6B;AAC3BD,IAAAA,eAAe,GAAGE,kBAASC,UAAT,CAChBV,YADgB,EAEhBb,SAFgB,EAGhBwB,8BAHgB,CAAlB;AAKD,GAND,MAMO;AACLJ,IAAAA,eAAe,GAAGE,kBAASG,WAAT,CAChBZ,YADgB,EAEhBb,SAFgB,EAGhBwB,8BAHgB,CAAlB;AAKD;;AAED,SAAOE,qBAAYC,IAAZ,CAAiBvC,WAAjB,EAA8BgC,eAA9B,EAA+C,mBAA/C,CAAP;AACD","sourcesContent":["/**\n *\n * Utils\n *\n */\n\nimport { ContentBlock, EditorState, genKey, Modifier } from 'draft-js';\nimport { List } from 'immutable';\nimport { DEFAULT_INDENTATION } from './constants';\n\nexport function createNewBlock(text = '', type = 'unstyled', key = genKey()) {\n  return new ContentBlock({ key, type, text, charaterList: List([]) });\n}\n\nexport function getNextBlocksList(editorState, startKey) {\n  return editorState\n    .getCurrentContent()\n    .getBlockMap()\n    .toSeq()\n    .skipUntil((_, k) => k === startKey)\n    .toList()\n    .shift()\n    .concat([createNewBlock()]);\n}\n\nexport function updateSelection(selection, blocks, offset) {\n  return selection.merge({\n    anchorKey: blocks.get(0).getKey(),\n    focusKey: blocks.get(0).getKey(),\n    anchorOffset: offset,\n    focusOffset: offset,\n  });\n}\n\nexport function getSelectedBlocksList(editorState) {\n  const selectionState = editorState.getSelection();\n  const contentState = editorState.getCurrentContent();\n  const startKey = selectionState.getStartKey();\n  const endKey = selectionState.getEndKey();\n  const blockMap = contentState.getBlockMap();\n\n  return blockMap\n    .toSeq()\n    .skipUntil((_, k) => k === startKey)\n    .takeUntil((_, k) => k === endKey)\n    .concat([[endKey, blockMap.get(endKey)]])\n    .toList();\n}\n\nexport function onTab(editorState) {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  let newContentState;\n\n  if (selection.isCollapsed()) {\n    newContentState = Modifier.insertText(\n      contentState,\n      selection,\n      DEFAULT_INDENTATION\n    );\n  } else {\n    newContentState = Modifier.replaceText(\n      contentState,\n      selection,\n      DEFAULT_INDENTATION\n    );\n  }\n\n  return EditorState.push(editorState, newContentState, 'insert-characters');\n}\n"]},"metadata":{},"sourceType":"script"}