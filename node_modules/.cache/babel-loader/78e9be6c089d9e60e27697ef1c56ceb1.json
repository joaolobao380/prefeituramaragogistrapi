{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAppliedFilter = exports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\n// List of all the possible filters\nvar VALID_REST_OPERATORS = ['eq', 'ne', 'in', 'nin', 'contains', 'ncontains', 'containss', 'ncontainss', 'lt', 'lte', 'gt', 'gte', 'null']; // from strapi-utils/convert-rest-query-params\n\nvar findAppliedFilter = function findAppliedFilter(whereClause) {\n  // Useful to remove the mainField of relation fields.\n  var formattedWhereClause = whereClause.split('.')[0];\n  var separatorIndex = whereClause.lastIndexOf('_');\n\n  if (separatorIndex === -1) {\n    return {\n      operator: '=',\n      field: formattedWhereClause\n    };\n  }\n\n  var fieldName = formattedWhereClause.substring(0, separatorIndex);\n  var operator = whereClause.slice(separatorIndex + 1); // the field as underscores\n\n  if (!VALID_REST_OPERATORS.includes(operator)) {\n    return {\n      operator: '=',\n      field: formattedWhereClause\n    };\n  }\n\n  return {\n    operator: \"_\".concat(operator),\n    field: fieldName\n  };\n};\n\nexports.findAppliedFilter = findAppliedFilter;\n\nvar formatFiltersFromQuery = function formatFiltersFromQuery(_ref) {\n  var _where = _ref._where;\n\n  if (!_where) {\n    return [];\n  }\n\n  return _where.map(function (obj) {\n    var _Object$keys = Object.keys(obj),\n        _Object$keys2 = (0, _slicedToArray2[\"default\"])(_Object$keys, 1),\n        key = _Object$keys2[0];\n\n    var _findAppliedFilter = findAppliedFilter(key),\n        field = _findAppliedFilter.field,\n        operator = _findAppliedFilter.operator;\n\n    var value = obj[key];\n    return {\n      name: field,\n      filter: operator,\n      value: value\n    };\n  });\n};\n\nvar _default = formatFiltersFromQuery;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/utils/formatFiltersFromQuery.js"],"names":["VALID_REST_OPERATORS","findAppliedFilter","whereClause","formattedWhereClause","split","separatorIndex","lastIndexOf","operator","field","fieldName","substring","slice","includes","formatFiltersFromQuery","_where","map","obj","Object","keys","key","value","name","filter"],"mappings":";;;;;;;;;;;AAAA;AACA,IAAMA,oBAAoB,GAAG,CAC3B,IAD2B,EAE3B,IAF2B,EAG3B,IAH2B,EAI3B,KAJ2B,EAK3B,UAL2B,EAM3B,WAN2B,EAO3B,WAP2B,EAQ3B,YAR2B,EAS3B,IAT2B,EAU3B,KAV2B,EAW3B,IAX2B,EAY3B,KAZ2B,EAa3B,MAb2B,CAA7B,C,CAgBA;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,WAAW,EAAI;AACvC;AACA,MAAMC,oBAAoB,GAAGD,WAAW,CAACE,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA7B;AACA,MAAMC,cAAc,GAAGH,WAAW,CAACI,WAAZ,CAAwB,GAAxB,CAAvB;;AAEA,MAAID,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACzB,WAAO;AAAEE,MAAAA,QAAQ,EAAE,GAAZ;AAAiBC,MAAAA,KAAK,EAAEL;AAAxB,KAAP;AACD;;AAED,MAAMM,SAAS,GAAGN,oBAAoB,CAACO,SAArB,CAA+B,CAA/B,EAAkCL,cAAlC,CAAlB;AACA,MAAME,QAAQ,GAAGL,WAAW,CAACS,KAAZ,CAAkBN,cAAc,GAAG,CAAnC,CAAjB,CAVuC,CAYvC;;AACA,MAAI,CAACL,oBAAoB,CAACY,QAArB,CAA8BL,QAA9B,CAAL,EAA8C;AAC5C,WAAO;AAAEA,MAAAA,QAAQ,EAAE,GAAZ;AAAiBC,MAAAA,KAAK,EAAEL;AAAxB,KAAP;AACD;;AAED,SAAO;AAAEI,IAAAA,QAAQ,aAAMA,QAAN,CAAV;AAA4BC,IAAAA,KAAK,EAAEC;AAAnC,GAAP;AACD,CAlBD;;;;AAoBA,IAAMI,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAC7C,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AAED,SAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,GAAG,EAAI;AACvB,uBAAcC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAd;AAAA;AAAA,QAAOG,GAAP;;AACA,6BAA4BlB,iBAAiB,CAACkB,GAAD,CAA7C;AAAA,QAAQX,KAAR,sBAAQA,KAAR;AAAA,QAAeD,QAAf,sBAAeA,QAAf;;AAEA,QAAMa,KAAK,GAAGJ,GAAG,CAACG,GAAD,CAAjB;AAEA,WAAO;AAAEE,MAAAA,IAAI,EAAEb,KAAR;AAAec,MAAAA,MAAM,EAAEf,QAAvB;AAAiCa,MAAAA,KAAK,EAALA;AAAjC,KAAP;AACD,GAPM,CAAP;AAQD,CAbD;;eAeeP,sB","sourcesContent":["// List of all the possible filters\nconst VALID_REST_OPERATORS = [\n  'eq',\n  'ne',\n  'in',\n  'nin',\n  'contains',\n  'ncontains',\n  'containss',\n  'ncontainss',\n  'lt',\n  'lte',\n  'gt',\n  'gte',\n  'null',\n];\n\n// from strapi-utils/convert-rest-query-params\nconst findAppliedFilter = whereClause => {\n  // Useful to remove the mainField of relation fields.\n  const formattedWhereClause = whereClause.split('.')[0];\n  const separatorIndex = whereClause.lastIndexOf('_');\n\n  if (separatorIndex === -1) {\n    return { operator: '=', field: formattedWhereClause };\n  }\n\n  const fieldName = formattedWhereClause.substring(0, separatorIndex);\n  const operator = whereClause.slice(separatorIndex + 1);\n\n  // the field as underscores\n  if (!VALID_REST_OPERATORS.includes(operator)) {\n    return { operator: '=', field: formattedWhereClause };\n  }\n\n  return { operator: `_${operator}`, field: fieldName };\n};\n\nconst formatFiltersFromQuery = ({ _where }) => {\n  if (!_where) {\n    return [];\n  }\n\n  return _where.map(obj => {\n    const [key] = Object.keys(obj);\n    const { field, operator } = findAppliedFilter(key);\n\n    const value = obj[key];\n\n    return { name: field, filter: operator, value };\n  });\n};\n\nexport default formatFiltersFromQuery;\nexport { findAppliedFilter };\n"]},"metadata":{},"sourceType":"script"}