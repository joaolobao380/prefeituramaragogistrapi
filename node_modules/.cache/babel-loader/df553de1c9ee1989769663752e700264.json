{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _createUid = require(\"../utils/createUid\");\n\nvar _attributes = require(\"../attributes\");\n\nvar _category = require(\"../category\");\n\nvar _contentType = require(\"../contentType\");\n\nvar _component = require(\"../component\");\n\nvar _dynamicZone = require(\"../dynamicZone\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar forms = {\n  attribute: {\n    schema: function schema(currentSchema, attributeType, reservedNames, alreadyTakenTargetContentTypeAttributes, options, extensions) {\n      var attributes = (0, _lodash.get)(currentSchema, ['schema', 'attributes'], {});\n      var usedAttributeNames = Object.keys(attributes).filter(function (attr) {\n        return attr !== options.initialData.name;\n      });\n\n      try {\n        var attributeShape = _attributes.attributeTypes[attributeType](usedAttributeNames, reservedNames.attributes, alreadyTakenTargetContentTypeAttributes, options);\n\n        return extensions.makeValidator(['attribute', attributeType], attributeShape, usedAttributeNames, reservedNames.attributes, alreadyTakenTargetContentTypeAttributes, options);\n      } catch (err) {\n        console.error('Error yup build schema', err);\n        return _attributes.attributeTypes[\"default\"](usedAttributeNames, reservedNames.attributes);\n      }\n    },\n    form: {\n      advanced: function advanced(_ref) {\n        var data = _ref.data,\n            type = _ref.type,\n            step = _ref.step,\n            extensions = _ref.extensions,\n            rest = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"data\", \"type\", \"step\", \"extensions\"]);\n\n        try {\n          var baseForm = _attributes.attributesForm.advanced[type](data, step).items;\n\n          return extensions.makeAdvancedForm(['attribute', type], baseForm, _objectSpread({\n            data: data,\n            type: type,\n            step: step\n          }, rest));\n        } catch (err) {\n          console.error(err);\n          return {\n            items: []\n          };\n        }\n      },\n      base: function base(_ref2) {\n        var data = _ref2.data,\n            type = _ref2.type,\n            step = _ref2.step,\n            attributes = _ref2.attributes;\n\n        try {\n          return _attributes.attributesForm.base[type](data, step, attributes);\n        } catch (err) {\n          return _attributes.commonBaseForm;\n        }\n      }\n    }\n  },\n  contentType: {\n    schema: function schema(alreadyTakenNames, isEditing, ctUid, reservedNames, extensions) {\n      var takenNames = isEditing ? alreadyTakenNames.filter(function (uid) {\n        return uid !== ctUid;\n      }) : alreadyTakenNames;\n      var contentTypeShape = (0, _contentType.createContentTypeSchema)(takenNames, reservedNames.models);\n      return extensions.makeValidator(['contentType'], contentTypeShape, takenNames, reservedNames.models);\n    },\n    form: {\n      base: function base(_ref3) {\n        var _ref3$data = _ref3.data,\n            data = _ref3$data === void 0 ? {} : _ref3$data,\n            actionType = _ref3.actionType;\n\n        if (actionType === 'create') {\n          var value = data.name ? (0, _createUid.nameToSlug)(data.name) : '';\n          return _contentType.contentTypeForm.base.create(value);\n        }\n\n        return _contentType.contentTypeForm.base.edit();\n      },\n      advanced: function advanced(_ref4) {\n        var extensions = _ref4.extensions;\n\n        var baseForm = _contentType.contentTypeForm.advanced[\"default\"]().items;\n\n        return extensions.makeAdvancedForm(['contentType'], baseForm);\n      }\n    }\n  },\n  component: {\n    schema: function schema(alreadyTakenAttributes, componentCategory, reservedNames) {\n      var isEditing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var compoUid = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var takenNames = isEditing ? alreadyTakenAttributes.filter(function (uid) {\n        return uid !== compoUid;\n      }) : alreadyTakenAttributes;\n      return (0, _component.createComponentSchema)(takenNames, reservedNames.models, componentCategory);\n    },\n    form: {\n      advanced: function advanced() {\n        return {\n          items: _component.componentForm.advanced()\n        };\n      },\n      base: function base() {\n        return {\n          items: _component.componentForm.base()\n        };\n      }\n    }\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced: function advanced() {\n        return _dynamicZone.dynamiczoneForm.advanced[\"default\"]();\n      },\n      base: function base(_ref5) {\n        var data = _ref5.data;\n        var isCreatingComponent = (0, _lodash.get)(data, 'createComponent', false);\n\n        if (isCreatingComponent) {\n          return _dynamicZone.dynamiczoneForm.base.createComponent();\n        }\n\n        return _dynamicZone.dynamiczoneForm.base[\"default\"]();\n      }\n    }\n  },\n  editCategory: {\n    schema: function schema(allCategories, initialData) {\n      var allowedCategories = allCategories.filter(function (cat) {\n        return cat !== initialData.name;\n      }).map(function (cat) {\n        return (0, _lodash.toLower)(cat);\n      });\n      return (0, _category.createCategorySchema)(allowedCategories);\n    },\n    form: {\n      base: function base() {\n        return _category.categoryForm.base;\n      }\n    }\n  }\n};\nvar _default = forms;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/containers/FormModal/forms/index.js"],"names":["forms","attribute","schema","currentSchema","attributeType","reservedNames","alreadyTakenTargetContentTypeAttributes","options","extensions","attributes","usedAttributeNames","Object","keys","filter","attr","initialData","name","attributeShape","attributeTypes","makeValidator","err","console","error","form","advanced","data","type","step","rest","baseForm","attributesForm","items","makeAdvancedForm","base","commonBaseForm","contentType","alreadyTakenNames","isEditing","ctUid","takenNames","uid","contentTypeShape","models","actionType","value","contentTypeForm","create","edit","component","alreadyTakenAttributes","componentCategory","compoUid","componentForm","addComponentToDynamicZone","dynamiczoneForm","isCreatingComponent","createComponent","editCategory","allCategories","allowedCategories","cat","map","categoryForm"],"mappings":"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","sourcesContent":["import { get, toLower } from 'lodash';\nimport { nameToSlug } from '../utils/createUid';\nimport { attributesForm, attributeTypes, commonBaseForm } from '../attributes';\nimport { categoryForm, createCategorySchema } from '../category';\nimport { contentTypeForm, createContentTypeSchema } from '../contentType';\nimport { createComponentSchema, componentForm } from '../component';\nimport { dynamiczoneForm } from '../dynamicZone';\n\nconst forms = {\n  attribute: {\n    schema(\n      currentSchema,\n      attributeType,\n      reservedNames,\n      alreadyTakenTargetContentTypeAttributes,\n      options,\n      extensions\n    ) {\n      const attributes = get(currentSchema, ['schema', 'attributes'], {});\n\n      const usedAttributeNames = Object.keys(attributes).filter(attr => {\n        return attr !== options.initialData.name;\n      });\n\n      try {\n        let attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes,\n          alreadyTakenTargetContentTypeAttributes,\n          options\n        );\n\n        return extensions.makeValidator(\n          ['attribute', attributeType],\n          attributeShape,\n          usedAttributeNames,\n          reservedNames.attributes,\n          alreadyTakenTargetContentTypeAttributes,\n          options\n        );\n      } catch (err) {\n        console.error('Error yup build schema', err);\n\n        return attributeTypes.default(usedAttributeNames, reservedNames.attributes);\n      }\n    },\n    form: {\n      advanced({ data, type, step, extensions, ...rest }) {\n        try {\n          const baseForm = attributesForm.advanced[type](data, step).items;\n\n          return extensions.makeAdvancedForm(['attribute', type], baseForm, {\n            data,\n            type,\n            step,\n            ...rest,\n          });\n        } catch (err) {\n          console.error(err);\n\n          return { items: [] };\n        }\n      },\n      base({ data, type, step, attributes }) {\n        try {\n          return attributesForm.base[type](data, step, attributes);\n        } catch (err) {\n          return commonBaseForm;\n        }\n      },\n    },\n  },\n  contentType: {\n    schema(alreadyTakenNames, isEditing, ctUid, reservedNames, extensions) {\n      const takenNames = isEditing\n        ? alreadyTakenNames.filter(uid => uid !== ctUid)\n        : alreadyTakenNames;\n\n      const contentTypeShape = createContentTypeSchema(takenNames, reservedNames.models);\n\n      return extensions.makeValidator(\n        ['contentType'],\n        contentTypeShape,\n        takenNames,\n        reservedNames.models\n      );\n    },\n    form: {\n      base({ data = {}, actionType }) {\n        if (actionType === 'create') {\n          const value = data.name ? nameToSlug(data.name) : '';\n\n          return contentTypeForm.base.create(value);\n        }\n\n        return contentTypeForm.base.edit();\n      },\n      advanced({ extensions }) {\n        const baseForm = contentTypeForm.advanced.default().items;\n\n        return extensions.makeAdvancedForm(['contentType'], baseForm);\n      },\n    },\n  },\n  component: {\n    schema(\n      alreadyTakenAttributes,\n      componentCategory,\n      reservedNames,\n      isEditing = false,\n      compoUid = null\n    ) {\n      const takenNames = isEditing\n        ? alreadyTakenAttributes.filter(uid => uid !== compoUid)\n        : alreadyTakenAttributes;\n\n      return createComponentSchema(takenNames, reservedNames.models, componentCategory);\n    },\n    form: {\n      advanced() {\n        return {\n          items: componentForm.advanced(),\n        };\n      },\n      base() {\n        return {\n          items: componentForm.base(),\n        };\n      },\n    },\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced() {\n        return dynamiczoneForm.advanced.default();\n      },\n      base({ data }) {\n        const isCreatingComponent = get(data, 'createComponent', false);\n\n        if (isCreatingComponent) {\n          return dynamiczoneForm.base.createComponent();\n        }\n\n        return dynamiczoneForm.base.default();\n      },\n    },\n  },\n  editCategory: {\n    schema(allCategories, initialData) {\n      const allowedCategories = allCategories\n        .filter(cat => cat !== initialData.name)\n        .map(cat => toLower(cat));\n\n      return createCategorySchema(allowedCategories);\n    },\n    form: {\n      base() {\n        return categoryForm.base;\n      },\n    },\n  },\n};\n\nexport default forms;\n"]},"metadata":{},"sourceType":"script"}