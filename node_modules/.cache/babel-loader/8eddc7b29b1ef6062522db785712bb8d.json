{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findLayouts = exports.createDefaultPropertiesForm = exports.createDefaultPropertyForms = exports.createDefaultConditionsForm = exports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _findMatchingPermissions = _interopRequireDefault(require(\"./findMatchingPermissions\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Creates the default condition form: { [conditionId]: false }\n * @param {object} conditions.id Id of the condition\n * @returns {object}\n */\nvar createDefaultConditionsForm = function createDefaultConditionsForm(conditions) {\n  var initialConditions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return conditions.reduce(function (acc, current) {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n    return acc;\n  }, {});\n};\n/**\n * Create the default form a property (fields, locales) with all the values\n * set to false\n * @param {object} property.children ex: {children: [{value: 'foo',}]}\n * @param {array<string>} The found property values retrieved from the role associated permissions\n * @returns {object} ex: { foo: false }\n *\n */\n\n\nexports.createDefaultConditionsForm = createDefaultConditionsForm;\n\nvar createDefaultPropertyForms = function createDefaultPropertyForms(_ref, propertyValues) {\n  var children = _ref.children;\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return children.reduce(function (acc, current) {\n    if (current.children) {\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, current.value, createDefaultPropertyForms(current, propertyValues, \"\".concat(prefix).concat(current.value, \".\"))));\n    }\n\n    var hasProperty = propertyValues.indexOf(\"\".concat(prefix).concat(current.value)) !== -1;\n    acc[current.value] = hasProperty;\n    return acc;\n  }, {});\n};\n/**\n * Creates the default form for all the properties found in a content type's layout\n * @param {array<string>} propertiesArray ex; ['fields', 'locales']\n * @param {object} ctLayout layout of the content type ex:\n * ctLayout = {\n *  properties: [{\n *    value: 'fields',\n *    children: [{value: 'name'}]\n *  }\n * }\n * @returns {object} In this case it will return { fields: { name: false } }\n */\n\n\nexports.createDefaultPropertyForms = createDefaultPropertyForms;\n\nvar createDefaultPropertiesForm = function createDefaultPropertiesForm(propertiesArray, ctLayout, matchingPermission) {\n  return propertiesArray.reduce(function (acc, currentPropertyName) {\n    var foundProperty = ctLayout.properties.find(function (_ref2) {\n      var value = _ref2.value;\n      return value === currentPropertyName;\n    });\n\n    if (foundProperty) {\n      var matchingPermissionPropertyValues = (0, _lodash.get)(matchingPermission, ['properties', foundProperty.value], []);\n      var propertyForm = createDefaultPropertyForms(foundProperty, matchingPermissionPropertyValues);\n      acc.properties[currentPropertyName] = propertyForm;\n    }\n\n    return acc;\n  }, {\n    properties: {}\n  });\n};\n/**\n * Return an object of content types layout of an action's subject ex: { adress: {uid, label, properties } }\n * @param {array<object>} allLayouts All the content types' layout\n * @param {object} subjects\n */\n\n\nexports.createDefaultPropertiesForm = createDefaultPropertiesForm;\n\nvar findLayouts = function findLayouts(allLayouts, subjects) {\n  return subjects.reduce(function (acc, current) {\n    var foundLayout = allLayouts.find(function (_ref3) {\n      var uid = _ref3.uid;\n      return uid === current;\n    }) || null;\n\n    if (foundLayout) {\n      acc[current] = foundLayout;\n    }\n\n    return acc;\n  }, {});\n};\n/**\n * Creates the default for for a content type\n * @param {object} layout.subjects All the content types to display\n * @param {array<object>} actionArray An action has the following shape:\n * action = {label: 'string', actionId: 'string', subjects: [object], applyToProperties: ['string]}\n * @param {array<object>} conditionArray Ex: { id: 'string', category: 'string' }\n * @returns {object} Ex:\n * {\n *  ctUId: {\n *    [actionId]: {\n *      [propertyName]: { enabled: false, conditions: { [id]: false } }\n *    }\n *  }\n * }\n */\n\n\nexports.findLayouts = findLayouts;\n\nvar createDefaultCTFormFromLayout = function createDefaultCTFormFromLayout(_ref4, actionArray, conditionArray) {\n  var subjects = _ref4.subjects;\n  var initialPermissions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return actionArray.reduce(function (defaultForm, current) {\n    var actionSubjects = current.subjects;\n    var subjectLayouts = findLayouts(subjects, actionSubjects); // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n\n    if ((0, _lodash.isEmpty)(subjectLayouts)) {\n      return defaultForm;\n    } // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n\n\n    var contentTypesActions = Object.keys(subjectLayouts).reduce(function (acc, currentCTUID) {\n      var actionId = current.actionId,\n          applyToProperties = current.applyToProperties;\n      var currentSubjectLayout = subjectLayouts[currentCTUID];\n      var properties = currentSubjectLayout.properties.map(function (_ref5) {\n        var value = _ref5.value;\n        return value;\n      });\n      var doesNothaveProperty = properties.every(function (property) {\n        return (applyToProperties || []).indexOf(property) === -1;\n      });\n      var matchingPermission = (0, _findMatchingPermissions[\"default\"])(initialPermissions, actionId, currentCTUID);\n      var conditionsForm = createDefaultConditionsForm(conditionArray, (0, _lodash.get)(matchingPermission, 'conditions', []));\n\n      if ((0, _lodash.isEmpty)(applyToProperties) || doesNothaveProperty) {\n        (0, _lodash.set)(acc, [currentCTUID, actionId], {\n          properties: {\n            enabled: matchingPermission !== undefined\n          },\n          conditions: conditionsForm\n        });\n        return acc;\n      }\n\n      var propertiesForm = createDefaultPropertiesForm(applyToProperties, subjectLayouts[currentCTUID], matchingPermission);\n      (0, _lodash.set)(acc, [currentCTUID, actionId], _objectSpread(_objectSpread({}, propertiesForm), {}, {\n        conditions: conditionsForm\n      }));\n      return acc;\n    }, {});\n    return (0, _lodash.merge)(defaultForm, contentTypesActions);\n  }, {});\n};\n\nvar _default = createDefaultCTFormFromLayout;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/Permissions/utils/createDefaultCTFormFromLayout.js"],"names":["createDefaultConditionsForm","conditions","initialConditions","reduce","acc","current","id","indexOf","createDefaultPropertyForms","propertyValues","children","prefix","value","hasProperty","createDefaultPropertiesForm","propertiesArray","ctLayout","matchingPermission","currentPropertyName","foundProperty","properties","find","matchingPermissionPropertyValues","propertyForm","findLayouts","allLayouts","subjects","foundLayout","uid","createDefaultCTFormFromLayout","actionArray","conditionArray","initialPermissions","defaultForm","actionSubjects","subjectLayouts","contentTypesActions","Object","keys","currentCTUID","actionId","applyToProperties","currentSubjectLayout","map","doesNothaveProperty","every","property","conditionsForm","enabled","undefined","propertiesForm"],"mappings":"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","sourcesContent":["import { merge, get, isEmpty, set } from 'lodash';\nimport findMatchingPermission from './findMatchingPermissions';\n/**\n * Creates the default condition form: { [conditionId]: false }\n * @param {object} conditions.id Id of the condition\n * @returns {object}\n */\nconst createDefaultConditionsForm = (conditions, initialConditions = []) =>\n  conditions.reduce((acc, current) => {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n\n    return acc;\n  }, {});\n\n/**\n * Create the default form a property (fields, locales) with all the values\n * set to false\n * @param {object} property.children ex: {children: [{value: 'foo',}]}\n * @param {array<string>} The found property values retrieved from the role associated permissions\n * @returns {object} ex: { foo: false }\n *\n */\nconst createDefaultPropertyForms = ({ children }, propertyValues, prefix = '') => {\n  return children.reduce((acc, current) => {\n    if (current.children) {\n      return {\n        ...acc,\n        [current.value]: createDefaultPropertyForms(\n          current,\n          propertyValues,\n          `${prefix}${current.value}.`\n        ),\n      };\n    }\n\n    const hasProperty = propertyValues.indexOf(`${prefix}${current.value}`) !== -1;\n\n    acc[current.value] = hasProperty;\n\n    return acc;\n  }, {});\n};\n\n/**\n * Creates the default form for all the properties found in a content type's layout\n * @param {array<string>} propertiesArray ex; ['fields', 'locales']\n * @param {object} ctLayout layout of the content type ex:\n * ctLayout = {\n *  properties: [{\n *    value: 'fields',\n *    children: [{value: 'name'}]\n *  }\n * }\n * @returns {object} In this case it will return { fields: { name: false } }\n */\nconst createDefaultPropertiesForm = (propertiesArray, ctLayout, matchingPermission) => {\n  return propertiesArray.reduce(\n    (acc, currentPropertyName) => {\n      const foundProperty = ctLayout.properties.find(({ value }) => value === currentPropertyName);\n\n      if (foundProperty) {\n        const matchingPermissionPropertyValues = get(\n          matchingPermission,\n          ['properties', foundProperty.value],\n          []\n        );\n        const propertyForm = createDefaultPropertyForms(\n          foundProperty,\n          matchingPermissionPropertyValues\n        );\n\n        acc.properties[currentPropertyName] = propertyForm;\n      }\n\n      return acc;\n    },\n    { properties: {} }\n  );\n};\n\n/**\n * Return an object of content types layout of an action's subject ex: { adress: {uid, label, properties } }\n * @param {array<object>} allLayouts All the content types' layout\n * @param {object} subjects\n */\nconst findLayouts = (allLayouts, subjects) => {\n  return subjects.reduce((acc, current) => {\n    const foundLayout = allLayouts.find(({ uid }) => uid === current) || null;\n\n    if (foundLayout) {\n      acc[current] = foundLayout;\n    }\n\n    return acc;\n  }, {});\n};\n\n/**\n * Creates the default for for a content type\n * @param {object} layout.subjects All the content types to display\n * @param {array<object>} actionArray An action has the following shape:\n * action = {label: 'string', actionId: 'string', subjects: [object], applyToProperties: ['string]}\n * @param {array<object>} conditionArray Ex: { id: 'string', category: 'string' }\n * @returns {object} Ex:\n * {\n *  ctUId: {\n *    [actionId]: {\n *      [propertyName]: { enabled: false, conditions: { [id]: false } }\n *    }\n *  }\n * }\n */\nconst createDefaultCTFormFromLayout = (\n  { subjects },\n  actionArray,\n  conditionArray,\n  initialPermissions = []\n) => {\n  return actionArray.reduce((defaultForm, current) => {\n    const actionSubjects = current.subjects;\n\n    const subjectLayouts = findLayouts(subjects, actionSubjects);\n\n    // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n    if (isEmpty(subjectLayouts)) {\n      return defaultForm;\n    }\n\n    // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n    const contentTypesActions = Object.keys(subjectLayouts).reduce((acc, currentCTUID) => {\n      const { actionId, applyToProperties } = current;\n      const currentSubjectLayout = subjectLayouts[currentCTUID];\n      const properties = currentSubjectLayout.properties.map(({ value }) => value);\n      const doesNothaveProperty = properties.every(\n        property => (applyToProperties || []).indexOf(property) === -1\n      );\n\n      const matchingPermission = findMatchingPermission(initialPermissions, actionId, currentCTUID);\n      const conditionsForm = createDefaultConditionsForm(\n        conditionArray,\n        get(matchingPermission, 'conditions', [])\n      );\n\n      if (isEmpty(applyToProperties) || doesNothaveProperty) {\n        set(acc, [currentCTUID, actionId], {\n          properties: {\n            enabled: matchingPermission !== undefined,\n          },\n          conditions: conditionsForm,\n        });\n\n        return acc;\n      }\n\n      const propertiesForm = createDefaultPropertiesForm(\n        applyToProperties,\n        subjectLayouts[currentCTUID],\n        matchingPermission\n      );\n\n      set(acc, [currentCTUID, actionId], { ...propertiesForm, conditions: conditionsForm });\n\n      return acc;\n    }, {});\n\n    return merge(defaultForm, contentTypesActions);\n  }, {});\n};\n\nexport default createDefaultCTFormFromLayout;\nexport {\n  createDefaultConditionsForm,\n  createDefaultPropertyForms,\n  createDefaultPropertiesForm,\n  findLayouts,\n};\n"]},"metadata":{},"sourceType":"script"}