{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\n// NOTE TO PLUGINS DEVELOPERS:\n// If you modify this file you also need to update the documentation accordingly\n// Here's the file: strapi/docs/3.0.0-beta.x/plugin-development/frontend-field-api.md\n// Here's the file: strapi/docs/3.0.0-beta.x/guides/registering-a-field-in-admin.md\n// IF THE DOC IS NOT UPDATED THE PULL REQUEST WILL NOT BE MERGED\nvar FieldApi = function FieldApi() {\n  var _this = this;\n\n  (0, _classCallCheck2[\"default\"])(this, FieldApi);\n  (0, _defineProperty2[\"default\"])(this, \"fields\", {});\n  (0, _defineProperty2[\"default\"])(this, \"getField\", function (type) {\n    (0, _invariant[\"default\"])(type, 'A type must be provided');\n    return (0, _lodash.cloneDeep)(_this.fields[type]) || null;\n  });\n  (0, _defineProperty2[\"default\"])(this, \"getFields\", function () {\n    var fields = (0, _lodash.cloneDeep)(_this.fields);\n    return Object.keys(fields).reduce(function (acc, current) {\n      acc[current] = fields[current].Component;\n      return acc;\n    }, {});\n  });\n  (0, _defineProperty2[\"default\"])(this, \"registerField\", function (field) {\n    var type = field.type,\n        Component = field.Component;\n    (0, _invariant[\"default\"])(Component, 'A Component must be provided');\n    (0, _invariant[\"default\"])(type, 'A type must be provided');\n    (0, _invariant[\"default\"])(_this.fields[type] === undefined, 'A similar field already exists');\n    _this.fields[type] = {\n      Component: Component\n    };\n  });\n  (0, _defineProperty2[\"default\"])(this, \"removeField\", function (type) {\n    (0, _invariant[\"default\"])(type, 'A type must be provided in order to remove a field');\n    delete _this.fields[type];\n  });\n};\n\nvar _default = function _default() {\n  return new FieldApi();\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/utils/FieldApi.js"],"names":["FieldApi","type","fields","Object","keys","reduce","acc","current","Component","field","undefined"],"mappings":";;;;;;;;;;;;;AAMA;;AACA;;AAPA;AACA;AACA;AACA;AACA;IAKMA,Q;;;;mDACK,E;qDAEE,UAAAC,IAAI,EAAI;AACjB,+BAAUA,IAAV,EAAgB,yBAAhB;AAEA,WAAO,uBAAU,KAAI,CAACC,MAAL,CAAYD,IAAZ,CAAV,KAAgC,IAAvC;AACD,G;sDAEW,YAAM;AAChB,QAAMC,MAAM,GAAG,uBAAU,KAAI,CAACA,MAAf,CAAf;AAEA,WAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,CAA2B,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAClDD,MAAAA,GAAG,CAACC,OAAD,CAAH,GAAeL,MAAM,CAACK,OAAD,CAAN,CAAgBC,SAA/B;AAEA,aAAOF,GAAP;AACD,KAJM,EAIJ,EAJI,CAAP;AAKD,G;0DAEe,UAAAG,KAAK,EAAI;AACvB,QAAQR,IAAR,GAA4BQ,KAA5B,CAAQR,IAAR;AAAA,QAAcO,SAAd,GAA4BC,KAA5B,CAAcD,SAAd;AAEA,+BAAUA,SAAV,EAAqB,8BAArB;AACA,+BAAUP,IAAV,EAAgB,yBAAhB;AACA,+BAAU,KAAI,CAACC,MAAL,CAAYD,IAAZ,MAAsBS,SAAhC,EAA2C,gCAA3C;AAEA,IAAA,KAAI,CAACR,MAAL,CAAYD,IAAZ,IAAoB;AAAEO,MAAAA,SAAS,EAATA;AAAF,KAApB;AACD,G;wDAEa,UAAAP,IAAI,EAAI;AACpB,+BAAUA,IAAV,EAAgB,oDAAhB;AAEA,WAAO,KAAI,CAACC,MAAL,CAAYD,IAAZ,CAAP;AACD,G;;;eAGY,oBAAM;AACnB,SAAO,IAAID,QAAJ,EAAP;AACD,C","sourcesContent":["// NOTE TO PLUGINS DEVELOPERS:\n// If you modify this file you also need to update the documentation accordingly\n// Here's the file: strapi/docs/3.0.0-beta.x/plugin-development/frontend-field-api.md\n// Here's the file: strapi/docs/3.0.0-beta.x/guides/registering-a-field-in-admin.md\n// IF THE DOC IS NOT UPDATED THE PULL REQUEST WILL NOT BE MERGED\n\nimport { cloneDeep } from 'lodash';\nimport invariant from 'invariant';\n\nclass FieldApi {\n  fields = {};\n\n  getField = type => {\n    invariant(type, 'A type must be provided');\n\n    return cloneDeep(this.fields[type]) || null;\n  };\n\n  getFields = () => {\n    const fields = cloneDeep(this.fields);\n\n    return Object.keys(fields).reduce((acc, current) => {\n      acc[current] = fields[current].Component;\n\n      return acc;\n    }, {});\n  };\n\n  registerField = field => {\n    const { type, Component } = field;\n\n    invariant(Component, 'A Component must be provided');\n    invariant(type, 'A type must be provided');\n    invariant(this.fields[type] === undefined, 'A similar field already exists');\n\n    this.fields[type] = { Component };\n  };\n\n  removeField = type => {\n    invariant(type, 'A type must be provided in order to remove a field');\n\n    delete this.fields[type];\n  };\n}\n\nexport default () => {\n  return new FieldApi();\n};\n"]},"metadata":{},"sourceType":"script"}