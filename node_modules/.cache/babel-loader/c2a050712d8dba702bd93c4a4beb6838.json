{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../utils\");\n\nvar _ModalHeader = _interopRequireDefault(require(\"../../components/ModalHeader\"));\n\nvar _pluginId = _interopRequireDefault(require(\"../../pluginId\"));\n\nvar _stepper = _interopRequireDefault(require(\"./stepper\"));\n\nvar _useModalContext2 = _interopRequireDefault(require(\"../../hooks/useModalContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar InputModalStepper = function InputModalStepper(_ref) {\n  var allowedActions = _ref.allowedActions,\n      isOpen = _ref.isOpen,\n      onToggle = _ref.onToggle,\n      noNavigation = _ref.noNavigation,\n      onInputMediaChange = _ref.onInputMediaChange;\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      emitEvent = _useGlobalContext.emitEvent,\n      formatMessage = _useGlobalContext.formatMessage;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      shouldDeleteFile = _useState2[0],\n      setShouldDeleteFile = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      displayNextButton = _useState4[0],\n      setDisplayNextButton = _useState4[1];\n\n  var _useModalContext = (0, _useModalContext2[\"default\"])(),\n      addFilesToUpload = _useModalContext.addFilesToUpload,\n      currentStep = _useModalContext.currentStep,\n      downloadFiles = _useModalContext.downloadFiles,\n      fetchMediaLib = _useModalContext.fetchMediaLib,\n      filesToDownload = _useModalContext.filesToDownload,\n      filesToUpload = _useModalContext.filesToUpload,\n      fileToEdit = _useModalContext.fileToEdit,\n      formErrors = _useModalContext.formErrors,\n      goTo = _useModalContext.goTo,\n      handleAbortUpload = _useModalContext.handleAbortUpload,\n      handleCancelFileToUpload = _useModalContext.handleCancelFileToUpload,\n      handleCleanFilesError = _useModalContext.handleCleanFilesError,\n      handleClearFilesToUploadAndDownload = _useModalContext.handleClearFilesToUploadAndDownload,\n      handleClickNextButton = _useModalContext.handleClickNextButton,\n      handleClose = _useModalContext.handleClose,\n      handleEditExistingFile = _useModalContext.handleEditExistingFile,\n      handleFileSelection = _useModalContext.handleFileSelection,\n      handleFileToEditChange = _useModalContext.handleFileToEditChange,\n      handleFormDisabled = _useModalContext.handleFormDisabled,\n      handleGoToEditNewFile = _useModalContext.handleGoToEditNewFile,\n      handleRemoveFileToUpload = _useModalContext.handleRemoveFileToUpload,\n      handleResetFileToEdit = _useModalContext.handleResetFileToEdit,\n      handleSetCropResult = _useModalContext.handleSetCropResult,\n      handleSetFileToEditError = _useModalContext.handleSetFileToEditError,\n      handleUploadFiles = _useModalContext.handleUploadFiles,\n      initialFileToEdit = _useModalContext.initialFileToEdit,\n      initialSelectedFiles = _useModalContext.initialSelectedFiles,\n      isFormDisabled = _useModalContext.isFormDisabled,\n      isWarningDeleteOpen = _useModalContext.isWarningDeleteOpen,\n      multiple = _useModalContext.multiple,\n      selectedFiles = _useModalContext.selectedFiles,\n      submitEditNewFile = _useModalContext.submitEditNewFile,\n      submitEditExistingFile = _useModalContext.submitEditExistingFile,\n      toggleModalWarning = _useModalContext.toggleModalWarning;\n\n  var _stepper$currentStep = _stepper[\"default\"][currentStep],\n      backButtonDestination = _stepper$currentStep.backButtonDestination,\n      Component = _stepper$currentStep.Component,\n      components = _stepper$currentStep.components,\n      headerBreadcrumbs = _stepper$currentStep.headerBreadcrumbs,\n      next = _stepper$currentStep.next,\n      prev = _stepper$currentStep.prev,\n      withBackButton = _stepper$currentStep.withBackButton,\n      HeaderComponent = _stepper$currentStep.HeaderComponent;\n  var filesToUploadLength = filesToUpload.length;\n  var editModalRef = (0, _react.useRef)();\n\n  var handleReplaceMedia = function handleReplaceMedia() {\n    emitEvent('didReplaceMedia', {\n      location: 'upload'\n    });\n    editModalRef.current.click();\n  };\n\n  (0, _react.useEffect)(function () {\n    if (currentStep === 'upload') {\n      // Go to the modal list view when file uploading is over\n      if (filesToUploadLength === 0) {\n        goToList();\n      } else {\n        downloadFiles();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [filesToUploadLength, currentStep]);\n\n  var addFilesToUploadList = function addFilesToUploadList(_ref2) {\n    var value = _ref2.target.value;\n    addFilesToUpload({\n      target: {\n        value: value\n      }\n    });\n    goNext();\n  };\n\n  var goBack = function goBack() {\n    var elementName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var hasFilesToUpload = !(0, _lodash.isEmpty)(filesToUpload); // Redirect the user to the list modal from the upload one\n\n    if (elementName === 'backButton' && backButtonDestination && currentStep === 'upload') {\n      if (hasFilesToUpload) {\n        // eslint-disable-next-line no-alert\n        var confirm = window.confirm(formatMessage({\n          id: (0, _utils.getTrad)('window.confirm.close-modal.files')\n        }));\n\n        if (!confirm) {\n          return;\n        }\n      }\n\n      goTo(backButtonDestination);\n      handleClearFilesToUploadAndDownload();\n      return;\n    }\n\n    if (elementName === 'backButton' && backButtonDestination && currentStep === 'browse' && hasFilesToUpload) {\n      goTo(backButtonDestination);\n      return;\n    }\n\n    goTo(prev);\n  };\n\n  var goNext = function goNext() {\n    if (next === null) {\n      onToggle();\n      return;\n    }\n\n    goTo(next);\n  };\n\n  var goToList = function goToList() {\n    fetchMediaLib();\n    goTo('list');\n  };\n\n  var handleClickDeleteFile = /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              toggleModalWarning();\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleClickDeleteFile() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleClickDeleteFileToUpload = function handleClickDeleteFileToUpload(fileIndex) {\n    handleRemoveFileToUpload(fileIndex);\n\n    if (currentStep === 'edit-new') {\n      handleResetFileToEdit();\n      goNext();\n    }\n  };\n\n  var handleCloseModal = function handleCloseModal() {\n    setDisplayNextButton(false);\n    handleClose();\n  };\n\n  var handleConfirmDeleteFile = function handleConfirmDeleteFile() {\n    setShouldDeleteFile(true);\n    toggleModalWarning();\n  };\n\n  var handleGoToAddBrowseFiles = function handleGoToAddBrowseFiles() {\n    handleCleanFilesError();\n    goBack();\n  };\n\n  var handleSubmitEditNewFile = function handleSubmitEditNewFile(e) {\n    e.preventDefault();\n    submitEditNewFile();\n    goNext();\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    onInputMediaChange(multiple ? selectedFiles : selectedFiles[0]);\n    goNext();\n  };\n\n  var handleCloseModalWarning = /*#__PURE__*/function () {\n    var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n      var id, requestURL, status, statusText, errorMessage;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!shouldDeleteFile) {\n                _context2.next = 19;\n                break;\n              }\n\n              id = fileToEdit.id;\n              _context2.prev = 2;\n              requestURL = (0, _utils.getRequestUrl)(\"files/\".concat(id));\n              _context2.next = 6;\n              return (0, _strapiHelperPlugin.request)(requestURL, {\n                method: 'DELETE'\n              });\n\n            case 6:\n              setShouldDeleteFile(false); // Remove file from selected files on delete and go back to the list.\n\n              handleFileSelection({\n                target: {\n                  name: id\n                }\n              });\n              goToList();\n              _context2.next = 19;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error(_context2.t0);\n              status = (0, _lodash.get)(_context2.t0, 'response.status', (0, _lodash.get)(_context2.t0, 'status', null));\n              statusText = (0, _lodash.get)(_context2.t0, 'response.statusText', (0, _lodash.get)(_context2.t0, 'statusText', null));\n              errorMessage = (0, _lodash.get)(_context2.t0, ['response', 'payload', 'message', '0', 'messages', '0', 'message'], (0, _lodash.get)(_context2.t0, ['response', 'payload', 'message'], statusText));\n              strapi.notification.toggle({\n                type: 'warning',\n                message: errorMessage\n              });\n\n              if (status) {\n                handleSetFileToEditError(errorMessage);\n              }\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 11]]);\n    }));\n\n    return function handleCloseModalWarning() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmitEditExistingFile = /*#__PURE__*/function () {\n    var _ref5 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(e) {\n      var shouldDuplicateMedia,\n          file,\n          isSubmittingAfterCrop,\n          headers,\n          formData,\n          didCropFile,\n          abortController,\n          id,\n          fileInfo,\n          requestURL,\n          editedFile,\n          status,\n          statusText,\n          errorMessage,\n          _args3 = arguments;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              shouldDuplicateMedia = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;\n              file = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : fileToEdit.file;\n              isSubmittingAfterCrop = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : false;\n              e.preventDefault();\n              submitEditExistingFile();\n\n              if (isSubmittingAfterCrop) {\n                emitEvent('didCropFile', {\n                  duplicatedFile: shouldDuplicateMedia,\n                  location: 'content-manager'\n                });\n              }\n\n              headers = {};\n              formData = new FormData(); // If the file has been cropped we need to add it to the formData\n              // otherwise we just don't send it\n\n              didCropFile = file instanceof File;\n              abortController = fileToEdit.abortController, id = fileToEdit.id, fileInfo = fileToEdit.fileInfo;\n              requestURL = shouldDuplicateMedia ? \"/\".concat(_pluginId[\"default\"]) : \"/\".concat(_pluginId[\"default\"], \"?id=\").concat(id);\n\n              if (didCropFile) {\n                formData.append('files', file);\n              }\n\n              formData.append('fileInfo', JSON.stringify(fileInfo));\n              _context3.prev = 13;\n              _context3.next = 16;\n              return (0, _strapiHelperPlugin.request)(requestURL, {\n                method: 'POST',\n                headers: headers,\n                body: formData,\n                signal: abortController.signal\n              }, false, false);\n\n            case 16:\n              editedFile = _context3.sent;\n              handleEditExistingFile(editedFile);\n              goToList();\n              _context3.next = 28;\n              break;\n\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](13);\n              status = (0, _lodash.get)(_context3.t0, 'response.status', (0, _lodash.get)(_context3.t0, 'status', null));\n              statusText = (0, _lodash.get)(_context3.t0, 'response.statusText', (0, _lodash.get)(_context3.t0, 'statusText', null));\n              errorMessage = (0, _lodash.get)(_context3.t0, ['response', 'payload', 'message', '0', 'messages', '0', 'message'], (0, _lodash.get)(_context3.t0, ['response', 'payload', 'message'], statusText)); // TODO fix errors globally when the back-end sends readable one\n\n              if (status === 413) {\n                errorMessage = formatMessage({\n                  id: 'app.utils.errors.file-too-big.message'\n                });\n              }\n\n              if (status) {\n                handleSetFileToEditError(errorMessage);\n              }\n\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[13, 21]]);\n    }));\n\n    return function handleSubmitEditExistingFile(_x) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleToggle = function handleToggle() {\n    if (filesToUploadLength > 0) {\n      // eslint-disable-next-line no-alert\n      var confirm = window.confirm(formatMessage({\n        id: (0, _utils.getTrad)('window.confirm.close-modal.files')\n      }));\n\n      if (!confirm) {\n        return;\n      }\n    }\n\n    if (currentStep === 'list' && !(0, _lodash.isEqual)(selectedFiles, initialSelectedFiles) || currentStep === 'edit' && initialFileToEdit && !(0, _lodash.isEqual)(fileToEdit, initialFileToEdit) || currentStep === 'edit' && selectedFiles.length > 0) {\n      // eslint-disable-next-line no-alert\n      var _confirm = window.confirm(formatMessage({\n        id: (0, _utils.getTrad)('window.confirm.close-modal.file')\n      }));\n\n      if (!_confirm) {\n        return;\n      }\n    }\n\n    onToggle(true);\n  };\n\n  var shouldDisplayNextButton = currentStep === 'browse' && displayNextButton;\n  var isFinishButtonDisabled = filesToUpload.some(function (file) {\n    return file.isDownloading || file.isUploading;\n  });\n  var areButtonsDisabledOnEditExistingFile = currentStep === 'edit' && fileToEdit.isUploading === true;\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.Modal, {\n    isOpen: isOpen,\n    onToggle: handleToggle,\n    onClosed: handleCloseModal\n  }, /*#__PURE__*/_react[\"default\"].createElement(_ModalHeader[\"default\"], {\n    goBack: goBack,\n    HeaderComponent: HeaderComponent,\n    headerBreadcrumbs: headerBreadcrumbs,\n    withBackButton: withBackButton\n  }), Component && /*#__PURE__*/_react[\"default\"].createElement(Component, (0, _extends2[\"default\"])({}, allowedActions, {\n    addFilesToUpload: addFilesToUploadList,\n    components: components,\n    filesToDownload: filesToDownload,\n    filesToUpload: filesToUpload,\n    fileToEdit: fileToEdit,\n    formErrors: formErrors,\n    isEditingUploadedFile: currentStep === 'edit',\n    isFormDisabled: isFormDisabled,\n    noNavigation: noNavigation,\n    onAbortUpload: handleAbortUpload,\n    onChange: handleFileToEditChange,\n    onClickCancelUpload: handleCancelFileToUpload,\n    onClickDeleteFileToUpload: currentStep === 'edit' ? handleClickDeleteFile : handleClickDeleteFileToUpload,\n    onSubmitEdit: currentStep === 'edit' ? handleSubmitEditExistingFile : handleSubmitEditNewFile,\n    onClickEditNewFile: handleGoToEditNewFile,\n    onGoToAddBrowseFiles: handleGoToAddBrowseFiles,\n    onSubmitEditNewFile: handleSubmitEditNewFile,\n    ref: currentStep === 'edit' ? editModalRef : null,\n    toggleDisableForm: handleFormDisabled,\n    onToggle: handleToggle,\n    setCropResult: handleSetCropResult,\n    setShouldDisplayNextButton: setDisplayNextButton,\n    withBackButton: withBackButton\n  })), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.ModalFooter, null, /*#__PURE__*/_react[\"default\"].createElement(\"section\", null, /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    type: \"button\",\n    color: \"cancel\",\n    onClick: handleToggle\n  }, formatMessage({\n    id: 'app.components.Button.cancel'\n  })), currentStep === 'upload' && /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    type: \"button\",\n    color: \"success\",\n    onClick: handleUploadFiles,\n    disabled: isFinishButtonDisabled\n  }, formatMessage({\n    id: (0, _utils.getTrad)(\"modal.upload-list.footer.button.\".concat(filesToUploadLength > 1 ? 'plural' : 'singular'))\n  }, {\n    number: filesToUploadLength\n  })), shouldDisplayNextButton && /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: handleClickNextButton,\n    disabled: (0, _lodash.isEmpty)(filesToDownload)\n  }, formatMessage({\n    id: (0, _utils.getTrad)('button.next')\n  })), currentStep === 'edit-new' && /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    color: \"success\",\n    type: \"button\",\n    onClick: handleSubmitEditNewFile\n  }, formatMessage({\n    id: 'form.button.finish'\n  })), currentStep === 'edit' && /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    style: {\n      margin: 'auto 0'\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    disabled: isFormDisabled || areButtonsDisabledOnEditExistingFile,\n    color: \"primary\",\n    onClick: handleReplaceMedia,\n    style: {\n      marginRight: 10\n    }\n  }, formatMessage({\n    id: (0, _utils.getTrad)('control-card.replace-media')\n  })), /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    disabled: isFormDisabled || areButtonsDisabledOnEditExistingFile,\n    color: \"success\",\n    type: \"button\",\n    onClick: handleSubmitEditExistingFile\n  }, formatMessage({\n    id: 'form.button.finish'\n  }))), currentStep === 'list' && /*#__PURE__*/_react[\"default\"].createElement(_core.Button, {\n    color: \"success\",\n    type: \"button\",\n    onClick: handleSubmit\n  }, formatMessage({\n    id: 'form.button.finish'\n  }))))), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.PopUpWarning, {\n    onClosed: handleCloseModalWarning,\n    isOpen: isWarningDeleteOpen,\n    toggleModal: toggleModalWarning,\n    popUpWarningType: \"danger\",\n    onConfirm: handleConfirmDeleteFile\n  }));\n};\n\nInputModalStepper.defaultProps = {\n  allowedActions: {\n    canCopyLink: true,\n    canCreate: true,\n    canDownload: true,\n    canMain: true,\n    canRead: true,\n    canSettings: true,\n    canUpdate: true\n  },\n  noNavigation: false,\n  onToggle: function onToggle() {}\n};\nInputModalStepper.propTypes = {\n  allowedActions: _propTypes[\"default\"].shape({\n    canCopyLink: _propTypes[\"default\"].bool,\n    canCreate: _propTypes[\"default\"].bool,\n    canDownload: _propTypes[\"default\"].bool,\n    canMain: _propTypes[\"default\"].bool,\n    canRead: _propTypes[\"default\"].bool,\n    canSettings: _propTypes[\"default\"].bool,\n    canUpdate: _propTypes[\"default\"].bool\n  }),\n  isOpen: _propTypes[\"default\"].bool.isRequired,\n  noNavigation: _propTypes[\"default\"].bool,\n  onInputMediaChange: _propTypes[\"default\"].func.isRequired,\n  onToggle: _propTypes[\"default\"].func\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(InputModalStepper);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-upload/admin/src/containers/InputModalStepper/InputModalStepper.js"],"names":["InputModalStepper","allowedActions","isOpen","onToggle","noNavigation","onInputMediaChange","emitEvent","formatMessage","shouldDeleteFile","setShouldDeleteFile","displayNextButton","setDisplayNextButton","addFilesToUpload","currentStep","downloadFiles","fetchMediaLib","filesToDownload","filesToUpload","fileToEdit","formErrors","goTo","handleAbortUpload","handleCancelFileToUpload","handleCleanFilesError","handleClearFilesToUploadAndDownload","handleClickNextButton","handleClose","handleEditExistingFile","handleFileSelection","handleFileToEditChange","handleFormDisabled","handleGoToEditNewFile","handleRemoveFileToUpload","handleResetFileToEdit","handleSetCropResult","handleSetFileToEditError","handleUploadFiles","initialFileToEdit","initialSelectedFiles","isFormDisabled","isWarningDeleteOpen","multiple","selectedFiles","submitEditNewFile","submitEditExistingFile","toggleModalWarning","stepper","backButtonDestination","Component","components","headerBreadcrumbs","next","prev","withBackButton","HeaderComponent","filesToUploadLength","length","editModalRef","handleReplaceMedia","location","current","click","goToList","addFilesToUploadList","value","target","goNext","goBack","elementName","hasFilesToUpload","confirm","window","id","handleClickDeleteFile","handleClickDeleteFileToUpload","fileIndex","handleCloseModal","handleConfirmDeleteFile","handleGoToAddBrowseFiles","handleSubmitEditNewFile","e","preventDefault","handleSubmit","handleCloseModalWarning","requestURL","method","name","console","error","status","statusText","errorMessage","strapi","notification","toggle","type","message","handleSubmitEditExistingFile","shouldDuplicateMedia","file","isSubmittingAfterCrop","duplicatedFile","headers","formData","FormData","didCropFile","File","abortController","fileInfo","pluginId","append","JSON","stringify","body","signal","editedFile","handleToggle","shouldDisplayNextButton","isFinishButtonDisabled","some","isDownloading","isUploading","areButtonsDisabledOnEditExistingFile","number","margin","marginRight","defaultProps","canCopyLink","canCreate","canDownload","canMain","canRead","canSettings","canUpdate","propTypes","PropTypes","shape","bool","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalFooter, PopUpWarning, useGlobalContext, request } from 'strapi-helper-plugin';\nimport { Button } from '@buffetjs/core';\nimport { get, isEmpty, isEqual } from 'lodash';\nimport { getRequestUrl, getTrad } from '../../utils';\nimport ModalHeader from '../../components/ModalHeader';\nimport pluginId from '../../pluginId';\nimport stepper from './stepper';\nimport useModalContext from '../../hooks/useModalContext';\n\nconst InputModalStepper = ({\n  allowedActions,\n  isOpen,\n  onToggle,\n  noNavigation,\n  onInputMediaChange,\n}) => {\n  const { emitEvent, formatMessage } = useGlobalContext();\n  const [shouldDeleteFile, setShouldDeleteFile] = useState(false);\n  const [displayNextButton, setDisplayNextButton] = useState(false);\n  const {\n    addFilesToUpload,\n    currentStep,\n    downloadFiles,\n    fetchMediaLib,\n    filesToDownload,\n    filesToUpload,\n    fileToEdit,\n    formErrors,\n    goTo,\n    handleAbortUpload,\n    handleCancelFileToUpload,\n    handleCleanFilesError,\n    handleClearFilesToUploadAndDownload,\n    handleClickNextButton,\n    handleClose,\n    handleEditExistingFile,\n    handleFileSelection,\n    handleFileToEditChange,\n    handleFormDisabled,\n    handleGoToEditNewFile,\n    handleRemoveFileToUpload,\n    handleResetFileToEdit,\n    handleSetCropResult,\n    handleSetFileToEditError,\n    handleUploadFiles,\n    initialFileToEdit,\n    initialSelectedFiles,\n    isFormDisabled,\n    isWarningDeleteOpen,\n    multiple,\n    selectedFiles,\n    submitEditNewFile,\n    submitEditExistingFile,\n    toggleModalWarning,\n  } = useModalContext();\n  const {\n    backButtonDestination,\n    Component,\n    components,\n    headerBreadcrumbs,\n    next,\n    prev,\n    withBackButton,\n    HeaderComponent,\n  } = stepper[currentStep];\n  const filesToUploadLength = filesToUpload.length;\n  const editModalRef = useRef();\n\n  const handleReplaceMedia = () => {\n    emitEvent('didReplaceMedia', { location: 'upload' });\n\n    editModalRef.current.click();\n  };\n\n  useEffect(() => {\n    if (currentStep === 'upload') {\n      // Go to the modal list view when file uploading is over\n\n      if (filesToUploadLength === 0) {\n        goToList();\n      } else {\n        downloadFiles();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filesToUploadLength, currentStep]);\n\n  const addFilesToUploadList = ({ target: { value } }) => {\n    addFilesToUpload({ target: { value } });\n\n    goNext();\n  };\n\n  const goBack = (elementName = null) => {\n    const hasFilesToUpload = !isEmpty(filesToUpload);\n\n    // Redirect the user to the list modal from the upload one\n    if (elementName === 'backButton' && backButtonDestination && currentStep === 'upload') {\n      if (hasFilesToUpload) {\n        // eslint-disable-next-line no-alert\n        const confirm = window.confirm(\n          formatMessage({ id: getTrad('window.confirm.close-modal.files') })\n        );\n\n        if (!confirm) {\n          return;\n        }\n      }\n\n      goTo(backButtonDestination);\n      handleClearFilesToUploadAndDownload();\n\n      return;\n    }\n\n    if (\n      elementName === 'backButton' &&\n      backButtonDestination &&\n      currentStep === 'browse' &&\n      hasFilesToUpload\n    ) {\n      goTo(backButtonDestination);\n\n      return;\n    }\n\n    goTo(prev);\n  };\n\n  const goNext = () => {\n    if (next === null) {\n      onToggle();\n\n      return;\n    }\n\n    goTo(next);\n  };\n\n  const goToList = () => {\n    fetchMediaLib();\n    goTo('list');\n  };\n\n  const handleClickDeleteFile = async () => {\n    toggleModalWarning();\n  };\n\n  const handleClickDeleteFileToUpload = fileIndex => {\n    handleRemoveFileToUpload(fileIndex);\n\n    if (currentStep === 'edit-new') {\n      handleResetFileToEdit();\n\n      goNext();\n    }\n  };\n\n  const handleCloseModal = () => {\n    setDisplayNextButton(false);\n    handleClose();\n  };\n\n  const handleConfirmDeleteFile = () => {\n    setShouldDeleteFile(true);\n    toggleModalWarning();\n  };\n\n  const handleGoToAddBrowseFiles = () => {\n    handleCleanFilesError();\n\n    goBack();\n  };\n\n  const handleSubmitEditNewFile = e => {\n    e.preventDefault();\n    submitEditNewFile();\n    goNext();\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onInputMediaChange(multiple ? selectedFiles : selectedFiles[0]);\n    goNext();\n  };\n\n  const handleCloseModalWarning = async () => {\n    if (shouldDeleteFile) {\n      const { id } = fileToEdit;\n\n      try {\n        const requestURL = getRequestUrl(`files/${id}`);\n\n        await request(requestURL, { method: 'DELETE' });\n\n        setShouldDeleteFile(false);\n\n        // Remove file from selected files on delete and go back to the list.\n        handleFileSelection({ target: { name: id } });\n        goToList();\n      } catch (err) {\n        console.error(err);\n\n        const status = get(err, 'response.status', get(err, 'status', null));\n        const statusText = get(err, 'response.statusText', get(err, 'statusText', null));\n        const errorMessage = get(\n          err,\n          ['response', 'payload', 'message', '0', 'messages', '0', 'message'],\n          get(err, ['response', 'payload', 'message'], statusText)\n        );\n        strapi.notification.toggle({\n          type: 'warning',\n          message: errorMessage,\n        });\n\n        if (status) {\n          handleSetFileToEditError(errorMessage);\n        }\n      }\n    }\n  };\n\n  const handleSubmitEditExistingFile = async (\n    e,\n    shouldDuplicateMedia = false,\n    file = fileToEdit.file,\n    isSubmittingAfterCrop = false\n  ) => {\n    e.preventDefault();\n\n    submitEditExistingFile();\n\n    if (isSubmittingAfterCrop) {\n      emitEvent('didCropFile', {\n        duplicatedFile: shouldDuplicateMedia,\n        location: 'content-manager',\n      });\n    }\n\n    const headers = {};\n    const formData = new FormData();\n\n    // If the file has been cropped we need to add it to the formData\n    // otherwise we just don't send it\n    const didCropFile = file instanceof File;\n    const { abortController, id, fileInfo } = fileToEdit;\n    const requestURL = shouldDuplicateMedia ? `/${pluginId}` : `/${pluginId}?id=${id}`;\n\n    if (didCropFile) {\n      formData.append('files', file);\n    }\n\n    formData.append('fileInfo', JSON.stringify(fileInfo));\n\n    try {\n      const editedFile = await request(\n        requestURL,\n        {\n          method: 'POST',\n          headers,\n          body: formData,\n          signal: abortController.signal,\n        },\n        false,\n        false\n      );\n\n      handleEditExistingFile(editedFile);\n      goToList();\n    } catch (err) {\n      const status = get(err, 'response.status', get(err, 'status', null));\n      const statusText = get(err, 'response.statusText', get(err, 'statusText', null));\n      let errorMessage = get(\n        err,\n        ['response', 'payload', 'message', '0', 'messages', '0', 'message'],\n        get(err, ['response', 'payload', 'message'], statusText)\n      );\n\n      // TODO fix errors globally when the back-end sends readable one\n      if (status === 413) {\n        errorMessage = formatMessage({ id: 'app.utils.errors.file-too-big.message' });\n      }\n\n      if (status) {\n        handleSetFileToEditError(errorMessage);\n      }\n    }\n  };\n\n  const handleToggle = () => {\n    if (filesToUploadLength > 0) {\n      // eslint-disable-next-line no-alert\n      const confirm = window.confirm(\n        formatMessage({ id: getTrad('window.confirm.close-modal.files') })\n      );\n\n      if (!confirm) {\n        return;\n      }\n    }\n\n    if (\n      (currentStep === 'list' && !isEqual(selectedFiles, initialSelectedFiles)) ||\n      (currentStep === 'edit' && initialFileToEdit && !isEqual(fileToEdit, initialFileToEdit)) ||\n      (currentStep === 'edit' && selectedFiles.length > 0)\n    ) {\n      // eslint-disable-next-line no-alert\n      const confirm = window.confirm(\n        formatMessage({ id: getTrad('window.confirm.close-modal.file') })\n      );\n\n      if (!confirm) {\n        return;\n      }\n    }\n\n    onToggle(true);\n  };\n\n  const shouldDisplayNextButton = currentStep === 'browse' && displayNextButton;\n  const isFinishButtonDisabled = filesToUpload.some(file => file.isDownloading || file.isUploading);\n  const areButtonsDisabledOnEditExistingFile =\n    currentStep === 'edit' && fileToEdit.isUploading === true;\n\n  return (\n    <>\n      <Modal isOpen={isOpen} onToggle={handleToggle} onClosed={handleCloseModal}>\n        {/* header title */}\n        <ModalHeader\n          goBack={goBack}\n          HeaderComponent={HeaderComponent}\n          headerBreadcrumbs={headerBreadcrumbs}\n          withBackButton={withBackButton}\n        />\n        {/* body of the modal */}\n        {Component && (\n          <Component\n            {...allowedActions}\n            addFilesToUpload={addFilesToUploadList}\n            components={components}\n            filesToDownload={filesToDownload}\n            filesToUpload={filesToUpload}\n            fileToEdit={fileToEdit}\n            formErrors={formErrors}\n            isEditingUploadedFile={currentStep === 'edit'}\n            isFormDisabled={isFormDisabled}\n            noNavigation={noNavigation}\n            onAbortUpload={handleAbortUpload}\n            onChange={handleFileToEditChange}\n            onClickCancelUpload={handleCancelFileToUpload}\n            onClickDeleteFileToUpload={\n              currentStep === 'edit' ? handleClickDeleteFile : handleClickDeleteFileToUpload\n            }\n            onSubmitEdit={\n              currentStep === 'edit' ? handleSubmitEditExistingFile : handleSubmitEditNewFile\n            }\n            onClickEditNewFile={handleGoToEditNewFile}\n            onGoToAddBrowseFiles={handleGoToAddBrowseFiles}\n            onSubmitEditNewFile={handleSubmitEditNewFile}\n            ref={currentStep === 'edit' ? editModalRef : null}\n            toggleDisableForm={handleFormDisabled}\n            onToggle={handleToggle}\n            setCropResult={handleSetCropResult}\n            setShouldDisplayNextButton={setDisplayNextButton}\n            withBackButton={withBackButton}\n          />\n        )}\n\n        <ModalFooter>\n          <section>\n            <Button type=\"button\" color=\"cancel\" onClick={handleToggle}>\n              {formatMessage({ id: 'app.components.Button.cancel' })}\n            </Button>\n            {currentStep === 'upload' && (\n              <Button\n                type=\"button\"\n                color=\"success\"\n                onClick={handleUploadFiles}\n                disabled={isFinishButtonDisabled}\n              >\n                {formatMessage(\n                  {\n                    id: getTrad(\n                      `modal.upload-list.footer.button.${\n                        filesToUploadLength > 1 ? 'plural' : 'singular'\n                      }`\n                    ),\n                  },\n                  { number: filesToUploadLength }\n                )}\n              </Button>\n            )}\n            {shouldDisplayNextButton && (\n              <Button\n                type=\"button\"\n                color=\"primary\"\n                onClick={handleClickNextButton}\n                disabled={isEmpty(filesToDownload)}\n              >\n                {formatMessage({ id: getTrad('button.next') })}\n              </Button>\n            )}\n            {currentStep === 'edit-new' && (\n              <Button color=\"success\" type=\"button\" onClick={handleSubmitEditNewFile}>\n                {formatMessage({ id: 'form.button.finish' })}\n              </Button>\n            )}\n            {currentStep === 'edit' && (\n              <div style={{ margin: 'auto 0' }}>\n                <Button\n                  disabled={isFormDisabled || areButtonsDisabledOnEditExistingFile}\n                  color=\"primary\"\n                  onClick={handleReplaceMedia}\n                  style={{ marginRight: 10 }}\n                >\n                  {formatMessage({ id: getTrad('control-card.replace-media') })}\n                </Button>\n\n                <Button\n                  disabled={isFormDisabled || areButtonsDisabledOnEditExistingFile}\n                  color=\"success\"\n                  type=\"button\"\n                  onClick={handleSubmitEditExistingFile}\n                >\n                  {formatMessage({ id: 'form.button.finish' })}\n                </Button>\n              </div>\n            )}\n            {currentStep === 'list' && (\n              <Button color=\"success\" type=\"button\" onClick={handleSubmit}>\n                {formatMessage({ id: 'form.button.finish' })}\n              </Button>\n            )}\n          </section>\n        </ModalFooter>\n      </Modal>\n      <PopUpWarning\n        onClosed={handleCloseModalWarning}\n        isOpen={isWarningDeleteOpen}\n        toggleModal={toggleModalWarning}\n        popUpWarningType=\"danger\"\n        onConfirm={handleConfirmDeleteFile}\n      />\n    </>\n  );\n};\n\nInputModalStepper.defaultProps = {\n  allowedActions: {\n    canCopyLink: true,\n    canCreate: true,\n    canDownload: true,\n    canMain: true,\n    canRead: true,\n    canSettings: true,\n    canUpdate: true,\n  },\n  noNavigation: false,\n  onToggle: () => {},\n};\n\nInputModalStepper.propTypes = {\n  allowedActions: PropTypes.shape({\n    canCopyLink: PropTypes.bool,\n    canCreate: PropTypes.bool,\n    canDownload: PropTypes.bool,\n    canMain: PropTypes.bool,\n    canRead: PropTypes.bool,\n    canSettings: PropTypes.bool,\n    canUpdate: PropTypes.bool,\n  }),\n  isOpen: PropTypes.bool.isRequired,\n  noNavigation: PropTypes.bool,\n  onInputMediaChange: PropTypes.func.isRequired,\n  onToggle: PropTypes.func,\n};\n\nexport default memo(InputModalStepper);\n"]},"metadata":{},"sourceType":"script"}