{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar Plugin = /*#__PURE__*/function () {\n  function Plugin(pluginConf) {\n    (0, _classCallCheck2[\"default\"])(this, Plugin);\n    (0, _defineProperty2[\"default\"])(this, \"pluginId\", null);\n    (0, _defineProperty2[\"default\"])(this, \"decorators\", {});\n    (0, _defineProperty2[\"default\"])(this, \"injectionZones\", {});\n    (0, _defineProperty2[\"default\"])(this, \"apis\", {});\n    this.pluginId = pluginConf.id;\n    this.decorators = pluginConf.decorators || {};\n    this.injectionZones = pluginConf.injectionZones || {};\n    this.apis = pluginConf.apis || {};\n  }\n\n  (0, _createClass2[\"default\"])(Plugin, [{\n    key: \"decorate\",\n    value: function decorate(compoName, compo) {\n      if (this.decorators && this.decorators[compoName]) {\n        this.decorators[compoName] = compo;\n      }\n    }\n  }, {\n    key: \"getDecorator\",\n    value: function getDecorator(compoName) {\n      if (this.decorators) {\n        return this.decorators[compoName] || null;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getInjectedComponents\",\n    value: function getInjectedComponents(containerName, blockName) {\n      try {\n        return this.injectionZones[containerName][blockName] || {};\n      } catch (err) {\n        console.error('Cannot get injected component', err);\n        return err;\n      }\n    }\n  }, {\n    key: \"injectComponent\",\n    value: function injectComponent(containerName, blockName, compo) {\n      try {\n        this.injectionZones[containerName][blockName].push(compo);\n      } catch (err) {\n        console.error('Cannot inject component', err);\n      }\n    }\n  }]);\n  return Plugin;\n}();\n\nvar _default = function _default(pluginConf) {\n  return new Plugin(pluginConf);\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/utils/Plugin.js"],"names":["Plugin","pluginConf","pluginId","id","decorators","injectionZones","apis","compoName","compo","containerName","blockName","err","console","error","push"],"mappings":";;;;;;;;;;;;;;;IAAMA,M;AASJ,kBAAYC,UAAZ,EAAwB;AAAA;AAAA,uDARb,IAQa;AAAA,yDANX,EAMW;AAAA,6DAJP,EAIO;AAAA,mDAFjB,EAEiB;AACtB,SAAKC,QAAL,GAAgBD,UAAU,CAACE,EAA3B;AACA,SAAKC,UAAL,GAAkBH,UAAU,CAACG,UAAX,IAAyB,EAA3C;AACA,SAAKC,cAAL,GAAsBJ,UAAU,CAACI,cAAX,IAA6B,EAAnD;AACA,SAAKC,IAAL,GAAYL,UAAU,CAACK,IAAX,IAAmB,EAA/B;AACD;;;;WAED,kBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACzB,UAAI,KAAKJ,UAAL,IAAmB,KAAKA,UAAL,CAAgBG,SAAhB,CAAvB,EAAmD;AACjD,aAAKH,UAAL,CAAgBG,SAAhB,IAA6BC,KAA7B;AACD;AACF;;;WAED,sBAAaD,SAAb,EAAwB;AACtB,UAAI,KAAKH,UAAT,EAAqB;AACnB,eAAO,KAAKA,UAAL,CAAgBG,SAAhB,KAA8B,IAArC;AACD;;AAED,aAAO,IAAP;AACD;;;WAED,+BAAsBE,aAAtB,EAAqCC,SAArC,EAAgD;AAC9C,UAAI;AACF,eAAO,KAAKL,cAAL,CAAoBI,aAApB,EAAmCC,SAAnC,KAAiD,EAAxD;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd,EAA+CF,GAA/C;AAEA,eAAOA,GAAP;AACD;AACF;;;WAED,yBAAgBF,aAAhB,EAA+BC,SAA/B,EAA0CF,KAA1C,EAAiD;AAC/C,UAAI;AACF,aAAKH,cAAL,CAAoBI,aAApB,EAAmCC,SAAnC,EAA8CI,IAA9C,CAAmDN,KAAnD;AACD,OAFD,CAEE,OAAOG,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd,EAAyCF,GAAzC;AACD;AACF;;;;;eAGY,kBAAAV,UAAU;AAAA,SAAI,IAAID,MAAJ,CAAWC,UAAX,CAAJ;AAAA,C","sourcesContent":["class Plugin {\n  pluginId = null;\n\n  decorators = {};\n\n  injectionZones = {};\n\n  apis = {};\n\n  constructor(pluginConf) {\n    this.pluginId = pluginConf.id;\n    this.decorators = pluginConf.decorators || {};\n    this.injectionZones = pluginConf.injectionZones || {};\n    this.apis = pluginConf.apis || {};\n  }\n\n  decorate(compoName, compo) {\n    if (this.decorators && this.decorators[compoName]) {\n      this.decorators[compoName] = compo;\n    }\n  }\n\n  getDecorator(compoName) {\n    if (this.decorators) {\n      return this.decorators[compoName] || null;\n    }\n\n    return null;\n  }\n\n  getInjectedComponents(containerName, blockName) {\n    try {\n      return this.injectionZones[containerName][blockName] || {};\n    } catch (err) {\n      console.error('Cannot get injected component', err);\n\n      return err;\n    }\n  }\n\n  injectComponent(containerName, blockName, compo) {\n    try {\n      this.injectionZones[containerName][blockName].push(compo);\n    } catch (err) {\n      console.error('Cannot inject component', err);\n    }\n  }\n}\n\nexport default pluginConf => new Plugin(pluginConf);\n"]},"metadata":{},"sourceType":"script"}