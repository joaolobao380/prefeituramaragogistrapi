{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _icons = require(\"@buffetjs/icons\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _reactSelect = _interopRequireDefault(require(\"react-select\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _utils = require(\"../../utils\");\n\nvar _utils2 = require(\"./utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar CMEditViewCopyLocale = function CMEditViewCopyLocale(props) {\n  if (!props.localizations.length) {\n    return null;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(Content, props);\n};\n\nvar Content = function Content(_ref) {\n  var appLocales = _ref.appLocales,\n      currentLocale = _ref.currentLocale,\n      localizations = _ref.localizations,\n      readPermissions = _ref.readPermissions;\n  var options = (0, _utils2.generateOptions)(appLocales, currentLocale, localizations, readPermissions);\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  var _useContentManagerEdi = (0, _strapiHelperPlugin.useContentManagerEditViewDataManager)(),\n      allLayoutData = _useContentManagerEdi.allLayoutData,\n      slug = _useContentManagerEdi.slug;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(options[0]),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var theme = (0, _styledComponents.useTheme)();\n\n  var handleConfirmCopyLocale = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n      var requestURL, response, cleanedData;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (value) {\n                _context.next = 3;\n                break;\n              }\n\n              handleToggle();\n              return _context.abrupt(\"return\");\n\n            case 3:\n              requestURL = \"/content-manager/collection-types/\".concat(slug, \"/\").concat(value.value);\n              _context.prev = 4;\n              setIsLoading(true);\n              _context.next = 8;\n              return (0, _strapiHelperPlugin.request)(requestURL, {\n                method: 'GET'\n              });\n\n            case 8:\n              response = _context.sent;\n              cleanedData = (0, _utils2.cleanData)(response, allLayoutData, localizations);\n              dispatch({\n                type: 'ContentManager/CrudReducer/GET_DATA_SUCCEEDED',\n                data: cleanedData\n              });\n              strapi.notification.toggle({\n                type: 'success',\n                message: {\n                  id: (0, _utils.getTrad)('CMEditViewCopyLocale.copy-success'),\n                  defaultMessage: 'Locale copied!'\n                }\n              });\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](4);\n              console.error(_context.t0);\n              strapi.notification.toggle({\n                type: 'warning',\n                message: {\n                  id: (0, _utils.getTrad)('CMEditViewCopyLocale.copy-failure'),\n                  defaultMessage: 'Failed to copy locale'\n                }\n              });\n\n            case 18:\n              _context.prev = 18;\n              setIsLoading(false);\n              handleToggle();\n              return _context.finish(18);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 14, 18, 22]]);\n    }));\n\n    return function handleConfirmCopyLocale() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(value) {\n    setValue(value);\n  };\n\n  var handleToggle = function handleToggle() {\n    setIsOpen(function (prev) {\n      return !prev;\n    });\n  };\n\n  var styles = (0, _strapiHelperPlugin.selectStyles)(theme);\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.BaselineAlignment, {\n    top: true,\n    size: \"12px\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    color: \"mediumBlue\",\n    fontWeight: \"semiBold\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: handleToggle\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"span\", {\n    style: {\n      marginRight: 10\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_icons.Duplicate, {\n    fill: \"#007EFF\"\n  })), formatMessage({\n    id: (0, _utils.getTrad)('CMEditViewCopyLocale.copy-text'),\n    defaultMessage: 'Fill in from another locale'\n  })), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.ModalConfirm, {\n    showButtonLoader: isLoading,\n    confirmButtonLabel: {\n      id: (0, _utils.getTrad)('CMEditViewCopyLocale.submit-text'),\n      defaultMessage: 'Yes, fill in'\n    },\n    content: {\n      id: 'CMEditViewCopyLocale.ModalConfirm.content',\n      defaultMessage: 'Your current content will be erased and filled by the content of the selected locale:'\n    },\n    isOpen: isOpen,\n    onConfirm: handleConfirmCopyLocale,\n    title: {\n      id: 'CMEditViewCopyLocale.ModalConfirm.title',\n      defaultMessage: 'Select Locale'\n    },\n    toggle: handleToggle,\n    type: \"success\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    style: {\n      marginTop: -3\n    },\n    bottom: true,\n    size: \"sm\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"span\", {\n    id: \"select-locale\",\n    style: {\n      textAlign: 'left'\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Label, {\n    htmlFor: \"\"\n  }, formatMessage({\n    id: (0, _utils.getTrad)('Settings.locales.modal.locales.label')\n  })), /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.BaselineAlignment, {\n    top: true,\n    size: \"3px\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_reactSelect[\"default\"], {\n    \"aria-labelledby\": \"select-locale\",\n    components: {\n      DropdownIndicator: _strapiHelperPlugin.DropdownIndicator\n    },\n    isSearchable: false,\n    defaultValue: options[0],\n    onChange: handleChange,\n    styles: _objectSpread(_objectSpread({}, styles), {}, {\n      control: function control(base, state) {\n        return _objectSpread(_objectSpread(_objectSpread({}, base), styles.control(base, state)), {}, {\n          height: '34px'\n        });\n      },\n      indicatorsContainer: function indicatorsContainer(base, state) {\n        return _objectSpread(_objectSpread(_objectSpread({}, base), styles.indicatorsContainer(base, state)), {}, {\n          height: '32px'\n        });\n      },\n      valueContainer: function valueContainer(base) {\n        return _objectSpread(_objectSpread({}, base), {}, {\n          padding: '2px 0px 4px 10px',\n          lineHeight: '18px'\n        });\n      }\n    }),\n    value: value\n  })))));\n};\n\nCMEditViewCopyLocale.propTypes = {\n  localizations: _propTypes[\"default\"].array.isRequired\n};\nContent.propTypes = {\n  appLocales: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    code: _propTypes[\"default\"].string.isRequired,\n    name: _propTypes[\"default\"].string\n  })).isRequired,\n  currentLocale: _propTypes[\"default\"].string.isRequired,\n  localizations: _propTypes[\"default\"].array.isRequired,\n  readPermissions: _propTypes[\"default\"].array.isRequired\n};\nvar _default = CMEditViewCopyLocale;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-i18n/admin/src/components/CMEditViewCopyLocale/index.js"],"names":["CMEditViewCopyLocale","props","localizations","length","Content","appLocales","currentLocale","readPermissions","options","formatMessage","dispatch","allLayoutData","slug","isLoading","setIsLoading","isOpen","setIsOpen","value","setValue","theme","handleConfirmCopyLocale","handleToggle","requestURL","method","response","cleanedData","type","data","strapi","notification","toggle","message","id","defaultMessage","console","error","handleChange","prev","styles","cursor","marginRight","marginTop","textAlign","DropdownIndicator","control","base","state","height","indicatorsContainer","valueContainer","padding","lineHeight","propTypes","PropTypes","array","isRequired","arrayOf","shape","code","string","name"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAQA;;AACA;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,KAAK,EAAI;AACpC,MAAI,CAACA,KAAK,CAACC,aAAN,CAAoBC,MAAzB,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,sBAAO,gCAAC,OAAD,EAAaF,KAAb,CAAP;AACD,CAND;;AAQA,IAAMG,OAAO,GAAG,SAAVA,OAAU,OAAmE;AAAA,MAAhEC,UAAgE,QAAhEA,UAAgE;AAAA,MAApDC,aAAoD,QAApDA,aAAoD;AAAA,MAArCJ,aAAqC,QAArCA,aAAqC;AAAA,MAAtBK,eAAsB,QAAtBA,eAAsB;AACjF,MAAMC,OAAO,GAAG,6BAAgBH,UAAhB,EAA4BC,aAA5B,EAA2CJ,aAA3C,EAA0DK,eAA1D,CAAhB;;AAEA,iBAA0B,yBAA1B;AAAA,MAAQE,aAAR,YAAQA,aAAR;;AACA,MAAMC,QAAQ,GAAG,8BAAjB;;AACA,8BAAgC,+DAAhC;AAAA,MAAQC,aAAR,yBAAQA,aAAR;AAAA,MAAuBC,IAAvB,yBAAuBA,IAAvB;;AACA,kBAAkC,qBAAS,KAAT,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA4B,qBAAS,KAAT,CAA5B;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0B,qBAASR,OAAO,CAAC,CAAD,CAAhB,CAA1B;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,KAAK,GAAG,iCAAd;;AAEA,MAAMC,uBAAuB;AAAA,8FAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACzBH,KADyB;AAAA;AAAA;AAAA;;AAE5BI,cAAAA,YAAY;AAFgB;;AAAA;AAOxBC,cAAAA,UAPwB,+CAO0BV,IAP1B,cAOkCK,KAAK,CAACA,KAPxC;AAAA;AAU5BH,cAAAA,YAAY,CAAC,IAAD,CAAZ;AAV4B;AAAA,qBAWL,iCAAQQ,UAAR,EAAoB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAApB,CAXK;;AAAA;AAWtBC,cAAAA,QAXsB;AAYtBC,cAAAA,WAZsB,GAYR,uBAAUD,QAAV,EAAoBb,aAApB,EAAmCT,aAAnC,CAZQ;AAc5BQ,cAAAA,QAAQ,CAAC;AAAEgB,gBAAAA,IAAI,EAAE,+CAAR;AAAyDC,gBAAAA,IAAI,EAAEF;AAA/D,eAAD,CAAR;AAEAG,cAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBJ,gBAAAA,IAAI,EAAE,SADmB;AAEzBK,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,EAAE,EAAE,oBAAQ,mCAAR,CADG;AAEPC,kBAAAA,cAAc,EAAE;AAFT;AAFgB,eAA3B;AAhB4B;AAAA;;AAAA;AAAA;AAAA;AAwB5BC,cAAAA,OAAO,CAACC,KAAR;AAEAP,cAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBJ,gBAAAA,IAAI,EAAE,SADmB;AAEzBK,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,EAAE,EAAE,oBAAQ,mCAAR,CADG;AAEPC,kBAAAA,cAAc,EAAE;AAFT;AAFgB,eAA3B;;AA1B4B;AAAA;AAkC5BnB,cAAAA,YAAY,CAAC,KAAD,CAAZ;AACAO,cAAAA,YAAY;AAnCgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAvBD,uBAAuB;AAAA;AAAA;AAAA,KAA7B;;AAuCA,MAAMgB,YAAY,GAAG,SAAfA,YAAe,CAAAnB,KAAK,EAAI;AAC5BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAFD;;AAIA,MAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBL,IAAAA,SAAS,CAAC,UAAAqB,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAAT;AACD,GAFD;;AAIA,MAAMC,MAAM,GAAG,sCAAanB,KAAb,CAAf;AAEA,sBACE,+EACE,gCAAC,qCAAD;AAAmB,IAAA,GAAG,MAAtB;AAAuB,IAAA,IAAI,EAAC;AAA5B,IADF,eAEE,gCAAC,UAAD;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,KAAK,EAAE;AAAEoB,MAAAA,MAAM,EAAE;AAAV,KAHT;AAIE,IAAA,OAAO,EAAElB;AAJX,kBAME;AAAM,IAAA,KAAK,EAAE;AAAEmB,MAAAA,WAAW,EAAE;AAAf;AAAb,kBACE,gCAAC,gBAAD;AAAW,IAAA,IAAI,EAAC;AAAhB,IADF,CANF,EASG/B,aAAa,CAAC;AACbuB,IAAAA,EAAE,EAAE,oBAAQ,gCAAR,CADS;AAEbC,IAAAA,cAAc,EAAE;AAFH,GAAD,CAThB,CAFF,eAgBE,gCAAC,gCAAD;AACE,IAAA,gBAAgB,EAAEpB,SADpB;AAEE,IAAA,kBAAkB,EAAE;AAClBmB,MAAAA,EAAE,EAAE,oBAAQ,kCAAR,CADc;AAElBC,MAAAA,cAAc,EAAE;AAFE,KAFtB;AAME,IAAA,OAAO,EAAE;AACPD,MAAAA,EAAE,EAAE,2CADG;AAEPC,MAAAA,cAAc,EACZ;AAHK,KANX;AAWE,IAAA,MAAM,EAAElB,MAXV;AAYE,IAAA,SAAS,EAAEK,uBAZb;AAaE,IAAA,KAAK,EAAE;AAAEY,MAAAA,EAAE,EAAE,yCAAN;AAAiDC,MAAAA,cAAc,EAAE;AAAjE,KAbT;AAcE,IAAA,MAAM,EAAEZ,YAdV;AAeE,IAAA,IAAI,EAAC;AAfP,kBAiBE,gCAAC,YAAD;AAAQ,IAAA,KAAK,EAAE;AAAEoB,MAAAA,SAAS,EAAE,CAAC;AAAd,KAAf;AAAkC,IAAA,MAAM,MAAxC;AAAyC,IAAA,IAAI,EAAC;AAA9C,kBACE;AAAM,IAAA,EAAE,EAAC,eAAT;AAAyB,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AAAhC,kBACE,gCAAC,WAAD;AAAO,IAAA,OAAO,EAAC;AAAf,KACGjC,aAAa,CAAC;AACbuB,IAAAA,EAAE,EAAE,oBAAQ,sCAAR;AADS,GAAD,CADhB,CADF,eAME,gCAAC,qCAAD;AAAmB,IAAA,GAAG,MAAtB;AAAuB,IAAA,IAAI,EAAC;AAA5B,IANF,eAOE,gCAAC,uBAAD;AACE,uBAAgB,eADlB;AAEE,IAAA,UAAU,EAAE;AAAEW,MAAAA,iBAAiB,EAAjBA;AAAF,KAFd;AAGE,IAAA,YAAY,EAAE,KAHhB;AAIE,IAAA,YAAY,EAAEnC,OAAO,CAAC,CAAD,CAJvB;AAKE,IAAA,QAAQ,EAAE4B,YALZ;AAME,IAAA,MAAM,kCACDE,MADC;AAEJM,MAAAA,OAAO,EAAE,iBAACC,IAAD,EAAOC,KAAP;AAAA,6DACJD,IADI,GAEJP,MAAM,CAACM,OAAP,CAAeC,IAAf,EAAqBC,KAArB,CAFI;AAGPC,UAAAA,MAAM,EAAE;AAHD;AAAA,OAFL;AAOJC,MAAAA,mBAAmB,EAAE,6BAACH,IAAD,EAAOC,KAAP;AAAA,6DAChBD,IADgB,GAEhBP,MAAM,CAACU,mBAAP,CAA2BH,IAA3B,EAAiCC,KAAjC,CAFgB;AAGnBC,UAAAA,MAAM,EAAE;AAHW;AAAA,OAPjB;AAYJE,MAAAA,cAAc,EAAE,wBAAAJ,IAAI;AAAA,+CACfA,IADe;AAElBK,UAAAA,OAAO,EAAE,kBAFS;AAGlBC,UAAAA,UAAU,EAAE;AAHM;AAAA;AAZhB,MANR;AAwBE,IAAA,KAAK,EAAElC;AAxBT,IAPF,CADF,CAjBF,CAhBF,CADF;AAyED,CArID;;AAuIAjB,oBAAoB,CAACoD,SAArB,GAAiC;AAC/BlD,EAAAA,aAAa,EAAEmD,sBAAUC,KAAV,CAAgBC;AADA,CAAjC;AAIAnD,OAAO,CAACgD,SAAR,GAAoB;AAClB/C,EAAAA,UAAU,EAAEgD,sBAAUG,OAAV,CACVH,sBAAUI,KAAV,CAAgB;AACdC,IAAAA,IAAI,EAAEL,sBAAUM,MAAV,CAAiBJ,UADT;AAEdK,IAAAA,IAAI,EAAEP,sBAAUM;AAFF,GAAhB,CADU,EAKVJ,UANgB;AAOlBjD,EAAAA,aAAa,EAAE+C,sBAAUM,MAAV,CAAiBJ,UAPd;AAQlBrD,EAAAA,aAAa,EAAEmD,sBAAUC,KAAV,CAAgBC,UARb;AASlBhD,EAAAA,eAAe,EAAE8C,sBAAUC,KAAV,CAAgBC;AATf,CAApB;eAYevD,oB","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Duplicate } from '@buffetjs/icons';\nimport { Label, Padded, Text } from '@buffetjs/core';\nimport Select from 'react-select';\nimport { useDispatch } from 'react-redux';\nimport { useTheme } from 'styled-components';\nimport { useIntl } from 'react-intl';\nimport {\n  BaselineAlignment,\n  DropdownIndicator,\n  ModalConfirm,\n  selectStyles,\n  useContentManagerEditViewDataManager,\n  request,\n} from 'strapi-helper-plugin';\nimport { getTrad } from '../../utils';\nimport { cleanData, generateOptions } from './utils';\n\nconst CMEditViewCopyLocale = props => {\n  if (!props.localizations.length) {\n    return null;\n  }\n\n  return <Content {...props} />;\n};\n\nconst Content = ({ appLocales, currentLocale, localizations, readPermissions }) => {\n  const options = generateOptions(appLocales, currentLocale, localizations, readPermissions);\n\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const { allLayoutData, slug } = useContentManagerEditViewDataManager();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [value, setValue] = useState(options[0]);\n  const theme = useTheme();\n\n  const handleConfirmCopyLocale = async () => {\n    if (!value) {\n      handleToggle();\n\n      return;\n    }\n\n    const requestURL = `/content-manager/collection-types/${slug}/${value.value}`;\n\n    try {\n      setIsLoading(true);\n      const response = await request(requestURL, { method: 'GET' });\n      const cleanedData = cleanData(response, allLayoutData, localizations);\n\n      dispatch({ type: 'ContentManager/CrudReducer/GET_DATA_SUCCEEDED', data: cleanedData });\n\n      strapi.notification.toggle({\n        type: 'success',\n        message: {\n          id: getTrad('CMEditViewCopyLocale.copy-success'),\n          defaultMessage: 'Locale copied!',\n        },\n      });\n    } catch (err) {\n      console.error(err);\n\n      strapi.notification.toggle({\n        type: 'warning',\n        message: {\n          id: getTrad('CMEditViewCopyLocale.copy-failure'),\n          defaultMessage: 'Failed to copy locale',\n        },\n      });\n    } finally {\n      setIsLoading(false);\n      handleToggle();\n    }\n  };\n\n  const handleChange = value => {\n    setValue(value);\n  };\n\n  const handleToggle = () => {\n    setIsOpen(prev => !prev);\n  };\n\n  const styles = selectStyles(theme);\n\n  return (\n    <>\n      <BaselineAlignment top size=\"12px\" />\n      <Text\n        color=\"mediumBlue\"\n        fontWeight=\"semiBold\"\n        style={{ cursor: 'pointer' }}\n        onClick={handleToggle}\n      >\n        <span style={{ marginRight: 10 }}>\n          <Duplicate fill=\"#007EFF\" />\n        </span>\n        {formatMessage({\n          id: getTrad('CMEditViewCopyLocale.copy-text'),\n          defaultMessage: 'Fill in from another locale',\n        })}\n      </Text>\n      <ModalConfirm\n        showButtonLoader={isLoading}\n        confirmButtonLabel={{\n          id: getTrad('CMEditViewCopyLocale.submit-text'),\n          defaultMessage: 'Yes, fill in',\n        }}\n        content={{\n          id: 'CMEditViewCopyLocale.ModalConfirm.content',\n          defaultMessage:\n            'Your current content will be erased and filled by the content of the selected locale:',\n        }}\n        isOpen={isOpen}\n        onConfirm={handleConfirmCopyLocale}\n        title={{ id: 'CMEditViewCopyLocale.ModalConfirm.title', defaultMessage: 'Select Locale' }}\n        toggle={handleToggle}\n        type=\"success\"\n      >\n        <Padded style={{ marginTop: -3 }} bottom size=\"sm\">\n          <span id=\"select-locale\" style={{ textAlign: 'left' }}>\n            <Label htmlFor=\"\">\n              {formatMessage({\n                id: getTrad('Settings.locales.modal.locales.label'),\n              })}\n            </Label>\n            <BaselineAlignment top size=\"3px\" />\n            <Select\n              aria-labelledby=\"select-locale\"\n              components={{ DropdownIndicator }}\n              isSearchable={false}\n              defaultValue={options[0]}\n              onChange={handleChange}\n              styles={{\n                ...styles,\n                control: (base, state) => ({\n                  ...base,\n                  ...styles.control(base, state),\n                  height: '34px',\n                }),\n                indicatorsContainer: (base, state) => ({\n                  ...base,\n                  ...styles.indicatorsContainer(base, state),\n                  height: '32px',\n                }),\n                valueContainer: base => ({\n                  ...base,\n                  padding: '2px 0px 4px 10px',\n                  lineHeight: '18px',\n                }),\n              }}\n              value={value}\n            />\n          </span>\n        </Padded>\n      </ModalConfirm>\n    </>\n  );\n};\n\nCMEditViewCopyLocale.propTypes = {\n  localizations: PropTypes.array.isRequired,\n};\n\nContent.propTypes = {\n  appLocales: PropTypes.arrayOf(\n    PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      name: PropTypes.string,\n    })\n  ).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  localizations: PropTypes.array.isRequired,\n  readPermissions: PropTypes.array.isRequired,\n};\n\nexport default CMEditViewCopyLocale;\n"]},"metadata":{},"sourceType":"script"}