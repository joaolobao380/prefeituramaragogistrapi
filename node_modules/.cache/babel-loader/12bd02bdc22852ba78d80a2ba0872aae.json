{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _lodash = require(\"lodash\");\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar formsAPI = {\n  components: {\n    inputs: {},\n    add: function add(_ref) {\n      var id = _ref.id,\n          component = _ref.component;\n\n      if (!this.inputs[id]) {\n        this.inputs[id] = component;\n      }\n    }\n  },\n  types: {\n    attribute: {// test: {\n      //   validators: [],\n      //   form: {\n      //     advanced: [\n      //       /* cb */\n      //     ],\n      //     base: [\n      //       /* cb */\n      //     ],\n      //   },\n      // },\n    },\n    contentType: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: []\n      }\n    },\n    component: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: []\n      }\n    }\n  },\n  contentTypeSchemaMutations: [],\n  addContentTypeSchemaMutation: function addContentTypeSchemaMutation(cb) {\n    this.contentTypeSchemaMutations.push(cb);\n  },\n  extendContentType: function extendContentType(_ref2) {\n    var validator = _ref2.validator,\n        _ref2$form = _ref2.form,\n        advanced = _ref2$form.advanced,\n        base = _ref2$form.base;\n    var contentType = this.types.contentType;\n    contentType.validators.push(validator);\n    contentType.form.advanced.push(advanced);\n    contentType.form.base.push(base);\n  },\n  extendFields: function extendFields(fields, _ref3) {\n    var validator = _ref3.validator,\n        _ref3$form = _ref3.form,\n        advanced = _ref3$form.advanced,\n        base = _ref3$form.base;\n    var formType = this.types.attribute;\n    fields.forEach(function (field) {\n      if (!formType[field]) {\n        formType[field] = {\n          validators: [],\n          form: {\n            advanced: [\n              /* cb */\n            ],\n            base: [\n              /* cb */\n            ]\n          }\n        };\n        formType[field].validators.push(validator);\n        formType[field].form.advanced.push(advanced);\n        formType[field].form.base.push(base);\n      }\n    });\n  },\n  makeAdvancedForm: function makeAdvancedForm(target, initSections, props) {\n    var sectionsToAdd = (0, _lodash.get)(this.types, [].concat((0, _toConsumableArray2[\"default\"])(target), ['form', 'advanced']), []).reduce(function (acc, current) {\n      var sections = current(props);\n      return [].concat((0, _toConsumableArray2[\"default\"])(acc), (0, _toConsumableArray2[\"default\"])(sections));\n    }, []);\n    return {\n      items: [].concat((0, _toConsumableArray2[\"default\"])(initSections), (0, _toConsumableArray2[\"default\"])(sectionsToAdd))\n    };\n  },\n  makeValidator: function makeValidator(target, initShape) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var validators = (0, _lodash.get)(this.types, [].concat((0, _toConsumableArray2[\"default\"])(target), ['validators']), []);\n    var pluginOptionsShape = validators.reduce(function (acc, current) {\n      var pluginOptionShape = current(args);\n      return _objectSpread(_objectSpread({}, acc), pluginOptionShape);\n    }, {});\n    return initShape.shape({\n      pluginOptions: yup.object().shape(pluginOptionsShape)\n    });\n  },\n  mutateContentTypeSchema: function mutateContentTypeSchema(data, initialData) {\n    var enhancedData = (0, _lodash.cloneDeep)(data);\n    var refData = (0, _lodash.cloneDeep)(initialData);\n    this.contentTypeSchemaMutations.forEach(function (cb) {\n      enhancedData = cb(enhancedData, refData);\n    });\n    return enhancedData;\n  }\n};\nvar _default = formsAPI;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/utils/formAPI.js"],"names":["formsAPI","components","inputs","add","id","component","types","attribute","contentType","validators","form","advanced","base","contentTypeSchemaMutations","addContentTypeSchemaMutation","cb","push","extendContentType","validator","extendFields","fields","formType","forEach","field","makeAdvancedForm","target","initSections","props","sectionsToAdd","reduce","acc","current","sections","items","makeValidator","initShape","args","pluginOptionsShape","pluginOptionShape","shape","pluginOptions","yup","object","mutateContentTypeSchema","data","initialData","enhancedData","refData"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAE;AACVC,IAAAA,MAAM,EAAE,EADE;AAEVC,IAAAA,GAFU,qBAEa;AAAA,UAAjBC,EAAiB,QAAjBA,EAAiB;AAAA,UAAbC,SAAa,QAAbA,SAAa;;AACrB,UAAI,CAAC,KAAKH,MAAL,CAAYE,EAAZ,CAAL,EAAsB;AACpB,aAAKF,MAAL,CAAYE,EAAZ,IAAkBC,SAAlB;AACD;AACF;AANS,GADG;AASfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXS,KADN;AAcLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,EADN;AAEJC,QAAAA,IAAI,EAAE;AAFF;AAFK,KAdR;AAqBLP,IAAAA,SAAS,EAAE;AACTI,MAAAA,UAAU,EAAE,EADH;AAETC,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,EADN;AAEJC,QAAAA,IAAI,EAAE;AAFF;AAFG;AArBN,GATQ;AAsCfC,EAAAA,0BAA0B,EAAE,EAtCb;AAuCfC,EAAAA,4BAvCe,wCAuCcC,EAvCd,EAuCkB;AAC/B,SAAKF,0BAAL,CAAgCG,IAAhC,CAAqCD,EAArC;AACD,GAzCc;AA0CfE,EAAAA,iBA1Ce,oCA0C4C;AAAA,QAAvCC,SAAuC,SAAvCA,SAAuC;AAAA,2BAA5BR,IAA4B;AAAA,QAApBC,QAAoB,cAApBA,QAAoB;AAAA,QAAVC,IAAU,cAAVA,IAAU;AACzD,QAAQJ,WAAR,GAAwB,KAAKF,KAA7B,CAAQE,WAAR;AAEAA,IAAAA,WAAW,CAACC,UAAZ,CAAuBO,IAAvB,CAA4BE,SAA5B;AACAV,IAAAA,WAAW,CAACE,IAAZ,CAAiBC,QAAjB,CAA0BK,IAA1B,CAA+BL,QAA/B;AACAH,IAAAA,WAAW,CAACE,IAAZ,CAAiBE,IAAjB,CAAsBI,IAAtB,CAA2BJ,IAA3B;AACD,GAhDc;AAiDfO,EAAAA,YAjDe,wBAiDFC,MAjDE,SAiD+C;AAAA,QAAvCF,SAAuC,SAAvCA,SAAuC;AAAA,2BAA5BR,IAA4B;AAAA,QAApBC,QAAoB,cAApBA,QAAoB;AAAA,QAAVC,IAAU,cAAVA,IAAU;AAC5D,QAAMS,QAAQ,GAAG,KAAKf,KAAL,CAAWC,SAA5B;AAEAa,IAAAA,MAAM,CAACE,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtB,UAAI,CAACF,QAAQ,CAACE,KAAD,CAAb,EAAsB;AACpBF,QAAAA,QAAQ,CAACE,KAAD,CAAR,GAAkB;AAChBd,UAAAA,UAAU,EAAE,EADI;AAEhBC,UAAAA,IAAI,EAAE;AACJC,YAAAA,QAAQ,EAAE;AACR;AADQ,aADN;AAIJC,YAAAA,IAAI,EAAE;AACJ;AADI;AAJF;AAFU,SAAlB;AAYAS,QAAAA,QAAQ,CAACE,KAAD,CAAR,CAAgBd,UAAhB,CAA2BO,IAA3B,CAAgCE,SAAhC;AACAG,QAAAA,QAAQ,CAACE,KAAD,CAAR,CAAgBb,IAAhB,CAAqBC,QAArB,CAA8BK,IAA9B,CAAmCL,QAAnC;AACAU,QAAAA,QAAQ,CAACE,KAAD,CAAR,CAAgBb,IAAhB,CAAqBE,IAArB,CAA0BI,IAA1B,CAA+BJ,IAA/B;AACD;AACF,KAlBD;AAmBD,GAvEc;AAwEfY,EAAAA,gBAxEe,4BAwEEC,MAxEF,EAwEUC,YAxEV,EAwEwBC,KAxExB,EAwE+B;AAC5C,QAAMC,aAAa,GAAG,iBAAI,KAAKtB,KAAT,gDAAoBmB,MAApB,IAA4B,MAA5B,EAAoC,UAApC,IAAiD,EAAjD,EAAqDI,MAArD,CACpB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAChB,UAAMC,QAAQ,GAAGD,OAAO,CAACJ,KAAD,CAAxB;AAEA,2DAAWG,GAAX,uCAAmBE,QAAnB;AACD,KALmB,EAMpB,EANoB,CAAtB;AASA,WAAO;AAAEC,MAAAA,KAAK,gDAAMP,YAAN,uCAAuBE,aAAvB;AAAP,KAAP;AACD,GAnFc;AAoFfM,EAAAA,aApFe,yBAoFDT,MApFC,EAoFOU,SApFP,EAoF2B;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACxC,QAAM3B,UAAU,GAAG,iBAAI,KAAKH,KAAT,gDAAoBmB,MAApB,IAA4B,YAA5B,IAA2C,EAA3C,CAAnB;AAEA,QAAMY,kBAAkB,GAAG5B,UAAU,CAACoB,MAAX,CAAkB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC7D,UAAMO,iBAAiB,GAAGP,OAAO,CAACK,IAAD,CAAjC;AAEA,6CAAYN,GAAZ,GAAoBQ,iBAApB;AACD,KAJ0B,EAIxB,EAJwB,CAA3B;AAMA,WAAOH,SAAS,CAACI,KAAV,CAAgB;AAAEC,MAAAA,aAAa,EAAEC,GAAG,CAACC,MAAJ,GAAaH,KAAb,CAAmBF,kBAAnB;AAAjB,KAAhB,CAAP;AACD,GA9Fc;AA+FfM,EAAAA,uBA/Fe,mCA+FSC,IA/FT,EA+FeC,WA/Ff,EA+F4B;AACzC,QAAIC,YAAY,GAAG,uBAAUF,IAAV,CAAnB;AAEA,QAAMG,OAAO,GAAG,uBAAUF,WAAV,CAAhB;AAEA,SAAKhC,0BAAL,CAAgCS,OAAhC,CAAwC,UAAAP,EAAE,EAAI;AAC5C+B,MAAAA,YAAY,GAAG/B,EAAE,CAAC+B,YAAD,EAAeC,OAAf,CAAjB;AACD,KAFD;AAIA,WAAOD,YAAP;AACD;AAzGc,CAAjB;eA4Ge9C,Q","sourcesContent":["import { cloneDeep, get } from 'lodash';\nimport * as yup from 'yup';\n\nconst formsAPI = {\n  components: {\n    inputs: {},\n    add({ id, component }) {\n      if (!this.inputs[id]) {\n        this.inputs[id] = component;\n      }\n    },\n  },\n  types: {\n    attribute: {\n      // test: {\n      //   validators: [],\n      //   form: {\n      //     advanced: [\n      //       /* cb */\n      //     ],\n      //     base: [\n      //       /* cb */\n      //     ],\n      //   },\n      // },\n    },\n    contentType: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: [],\n      },\n    },\n    component: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: [],\n      },\n    },\n  },\n  contentTypeSchemaMutations: [],\n  addContentTypeSchemaMutation(cb) {\n    this.contentTypeSchemaMutations.push(cb);\n  },\n  extendContentType({ validator, form: { advanced, base } }) {\n    const { contentType } = this.types;\n\n    contentType.validators.push(validator);\n    contentType.form.advanced.push(advanced);\n    contentType.form.base.push(base);\n  },\n  extendFields(fields, { validator, form: { advanced, base } }) {\n    const formType = this.types.attribute;\n\n    fields.forEach(field => {\n      if (!formType[field]) {\n        formType[field] = {\n          validators: [],\n          form: {\n            advanced: [\n              /* cb */\n            ],\n            base: [\n              /* cb */\n            ],\n          },\n        };\n\n        formType[field].validators.push(validator);\n        formType[field].form.advanced.push(advanced);\n        formType[field].form.base.push(base);\n      }\n    });\n  },\n  makeAdvancedForm(target, initSections, props) {\n    const sectionsToAdd = get(this.types, [...target, 'form', 'advanced'], []).reduce(\n      (acc, current) => {\n        const sections = current(props);\n\n        return [...acc, ...sections];\n      },\n      []\n    );\n\n    return { items: [...initSections, ...sectionsToAdd] };\n  },\n  makeValidator(target, initShape, ...args) {\n    const validators = get(this.types, [...target, 'validators'], []);\n\n    const pluginOptionsShape = validators.reduce((acc, current) => {\n      const pluginOptionShape = current(args);\n\n      return { ...acc, ...pluginOptionShape };\n    }, {});\n\n    return initShape.shape({ pluginOptions: yup.object().shape(pluginOptionsShape) });\n  },\n  mutateContentTypeSchema(data, initialData) {\n    let enhancedData = cloneDeep(data);\n\n    const refData = cloneDeep(initialData);\n\n    this.contentTypeSchemaMutations.forEach(cb => {\n      enhancedData = cb(enhancedData, refData);\n    });\n\n    return enhancedData;\n  },\n};\n\nexport default formsAPI;\n"]},"metadata":{},"sourceType":"script"}