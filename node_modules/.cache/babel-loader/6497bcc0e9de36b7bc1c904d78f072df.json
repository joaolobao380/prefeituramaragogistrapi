{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = configureStore;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _redux = require(\"redux\");\n\nvar _immutable = require(\"immutable\");\n\nvar _reduxSaga = _interopRequireDefault(require(\"redux-saga\"));\n\nvar _reducers = _interopRequireDefault(require(\"./reducers\"));\n\n/**\n * Create the store with dynamic reducers\n */\n// import { routerMiddleware } from 'react-router-redux';\nvar sagaMiddleware = (0, _reduxSaga[\"default\"])();\n\nfunction configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var reducers = arguments.length > 1 ? arguments[1] : undefined;\n  var strapi = arguments.length > 2 ? arguments[2] : undefined;\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  var middlewares = [sagaMiddleware];\n  strapi.middlewares.middlewares.forEach(function (middleware) {\n    middlewares.push(middleware());\n  });\n  var enhancers = [_redux.applyMiddleware.apply(void 0, middlewares)]; // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n\n  /* eslint-disable no-underscore-dangle */\n\n  var composeEnhancers = process.env.NODE_ENV !== 'production' && (typeof window === \"undefined\" ? \"undefined\" : (0, _typeof2[\"default\"])(window)) === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n    // Prevent recomputing reducers for `replaceReducer`\n    shouldHotReload: false,\n    name: 'Strapi - Dashboard'\n  }) : _redux.compose;\n  /* eslint-enable */\n\n  var store = (0, _redux.createStore)((0, _reducers[\"default\"])(reducers), (0, _immutable.fromJS)(initialState), composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('./reducers', function () {\n      store.replaceReducer((0, _reducers[\"default\"])(store.injectedReducers));\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/configureStore.js"],"names":["sagaMiddleware","configureStore","initialState","reducers","strapi","middlewares","forEach","middleware","push","enhancers","applyMiddleware","composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","shouldHotReload","name","compose","store","runSaga","run","injectedReducers","injectedSagas","module","hot","accept","replaceReducer"],"mappings":";;;;;;;;;;;AAIA;;AACA;;AAEA;;AACA;;AARA;AACA;AACA;AAIA;AAIA,IAAMA,cAAc,GAAG,4BAAvB;;AAEe,SAASC,cAAT,GAA6D;AAAA,MAArCC,YAAqC,uEAAtB,EAAsB;AAAA,MAAlBC,QAAkB;AAAA,MAARC,MAAQ;AAC1E;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAACL,cAAD,CAApB;AAEAI,EAAAA,MAAM,CAACC,WAAP,CAAmBA,WAAnB,CAA+BC,OAA/B,CAAuC,UAAAC,UAAU,EAAI;AACnDF,IAAAA,WAAW,CAACG,IAAZ,CAAiBD,UAAU,EAA3B;AACD,GAFD;AAIA,MAAME,SAAS,GAAG,CAACC,qCAAmBL,WAAnB,CAAD,CAAlB,CAV0E,CAY1E;;AACA;;AACA,MAAMM,gBAAgB,GACpBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACA,QAAOC,MAAP,0DAAOA,MAAP,OAAkB,QADlB,IAEAA,MAAM,CAACC,oCAFP,GAGID,MAAM,CAACC,oCAAP,CAA4C;AAC1C;AACA;AACAC,IAAAA,eAAe,EAAE,KAHyB;AAI1CC,IAAAA,IAAI,EAAE;AAJoC,GAA5C,CAHJ,GASIC,cAVN;AAWA;;AAEA,MAAMC,KAAK,GAAG,wBACZ,0BAAcjB,QAAd,CADY,EAEZ,uBAAOD,YAAP,CAFY,EAGZS,gBAAgB,MAAhB,SAAoBF,SAApB,CAHY,CAAd,CA3B0E,CAiC1E;;AACAW,EAAAA,KAAK,CAACC,OAAN,GAAgBrB,cAAc,CAACsB,GAA/B;AACAF,EAAAA,KAAK,CAACG,gBAAN,GAAyB,EAAzB,CAnC0E,CAmC7C;;AAC7BH,EAAAA,KAAK,CAACI,aAAN,GAAsB,EAAtB,CApC0E,CAoChD;AAE1B;;AACA;;AACA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,YAAM;AACpCP,MAAAA,KAAK,CAACQ,cAAN,CAAqB,0BAAcR,KAAK,CAACG,gBAApB,CAArB;AACD,KAFD;AAGD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { fromJS } from 'immutable';\n// import { routerMiddleware } from 'react-router-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(initialState = {}, reducers, strapi) {\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware];\n\n  strapi.middlewares.middlewares.forEach(middleware => {\n    middlewares.push(middleware());\n  });\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n          // Prevent recomputing reducers for `replaceReducer`\n          shouldHotReload: false,\n          name: 'Strapi - Dashboard',\n        })\n      : compose;\n  /* eslint-enable */\n\n  const store = createStore(\n    createReducer(reducers),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"script"}