{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar convertAttrObjToArray = function convertAttrObjToArray(attributes) {\n  return Object.keys(attributes).map(function (key, index) {\n    return _objectSpread(_objectSpread({}, attributes[key]), {}, {\n      name: key,\n      index: index\n    });\n  });\n};\n\nvar _default = convertAttrObjToArray;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/utils/convertAttrObjToArray.js"],"names":["convertAttrObjToArray","attributes","Object","keys","map","key","index","name"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,UAAU,EAAI;AAC1C,SAAOC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA4B,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACjD,2CAAYL,UAAU,CAACI,GAAD,CAAtB;AAA6BE,MAAAA,IAAI,EAAEF,GAAnC;AAAwCC,MAAAA,KAAK,EAALA;AAAxC;AACD,GAFM,CAAP;AAGD,CAJD;;eAMeN,qB","sourcesContent":["const convertAttrObjToArray = attributes => {\n  return Object.keys(attributes).map((key, index) => {\n    return { ...attributes[key], name: key, index };\n  });\n};\n\nexport default convertAttrObjToArray;\n"]},"metadata":{},"sourceType":"script"}