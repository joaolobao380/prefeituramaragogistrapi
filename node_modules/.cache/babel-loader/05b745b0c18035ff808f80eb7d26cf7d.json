{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialState = exports[\"default\"] = void 0;\n\nvar _immutable = require(\"immutable\");\n\nvar initialState = (0, _immutable.fromJS)({\n  isLoading: true,\n  isOpen: false,\n  videos: []\n});\nexports.initialState = initialState;\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'GET_DATA_SUCCEEDED':\n      return state.update('isOpen', function () {\n        return !action.didWatchVideos;\n      }).update('isLoading', function () {\n        return false;\n      }).update('videos', function () {\n        return (0, _immutable.fromJS)(action.videos);\n      });\n\n    case 'SET_IS_OPEN':\n      return state.update('isOpen', function (v) {\n        return !v;\n      });\n\n    case 'SET_VIDEO_DURATION':\n      return state.updateIn(['videos', action.videoIndex, 'duration'], function () {\n        return parseFloat(action.duration, 10);\n      });\n\n    case 'TOGGLE_VIDEO_MODAL':\n      return state.update('videos', function (list) {\n        return list.map(function (item, index) {\n          if (index === action.videoIndexToOpen) {\n            return item.update('isOpen', function (v) {\n              return !v;\n            });\n          }\n\n          return item.set('isOpen', false);\n        });\n      });\n\n    case 'UPDATE_VIDEO_STARTED_TIME_AND_PLAYED_INFOS':\n      {\n        var updatedState = state.updateIn(['videos', action.videoIndex], function (video) {\n          var elapsedTime = parseFloat(action.elapsedTime, 10);\n          var videoDuration = parseFloat(video.get('duration', 10));\n          var percentElapsedTime = elapsedTime * 100 / videoDuration;\n          return video.update('startTime', function () {\n            return elapsedTime;\n          }).update('end', function (oldValue) {\n            if (oldValue === true) {\n              return true;\n            }\n\n            return percentElapsedTime > 80;\n          });\n        });\n        var videos = updatedState.get('videos').map(function (video) {\n          return video.set('isOpen', false);\n        }); // Update the local storage\n\n        localStorage.setItem('videos', JSON.stringify(videos.toJS()));\n        return updatedState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar _default = reducer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/containers/Onboarding/reducer.js"],"names":["initialState","isLoading","isOpen","videos","reducer","state","action","type","update","didWatchVideos","v","updateIn","videoIndex","parseFloat","duration","list","map","item","index","videoIndexToOpen","set","updatedState","video","elapsedTime","videoDuration","get","percentElapsedTime","oldValue","localStorage","setItem","JSON","stringify","toJS"],"mappings":"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","sourcesContent":["import { fromJS } from 'immutable';\n\nconst initialState = fromJS({\n  isLoading: true,\n  isOpen: false,\n  videos: [],\n});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_DATA_SUCCEEDED':\n      return state\n        .update('isOpen', () => !action.didWatchVideos)\n        .update('isLoading', () => false)\n        .update('videos', () => fromJS(action.videos));\n    case 'SET_IS_OPEN':\n      return state.update('isOpen', v => !v);\n    case 'SET_VIDEO_DURATION':\n      return state.updateIn(['videos', action.videoIndex, 'duration'], () => {\n        return parseFloat(action.duration, 10);\n      });\n    case 'TOGGLE_VIDEO_MODAL':\n      return state.update('videos', list => {\n        return list.map((item, index) => {\n          if (index === action.videoIndexToOpen) {\n            return item.update('isOpen', v => !v);\n          }\n\n          return item.set('isOpen', false);\n        });\n      });\n    case 'UPDATE_VIDEO_STARTED_TIME_AND_PLAYED_INFOS': {\n      const updatedState = state.updateIn(['videos', action.videoIndex], video => {\n        const elapsedTime = parseFloat(action.elapsedTime, 10);\n        const videoDuration = parseFloat(video.get('duration', 10));\n        const percentElapsedTime = (elapsedTime * 100) / videoDuration;\n\n        return video\n          .update('startTime', () => elapsedTime)\n          .update('end', oldValue => {\n            if (oldValue === true) {\n              return true;\n            }\n\n            return percentElapsedTime > 80;\n          });\n      });\n\n      const videos = updatedState.get('videos').map(video => video.set('isOpen', false));\n\n      // Update the local storage\n      localStorage.setItem('videos', JSON.stringify(videos.toJS()));\n\n      return updatedState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\nexport { initialState };\n"]},"metadata":{},"sourceType":"script"}