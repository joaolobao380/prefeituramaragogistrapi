{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactSelect = _interopRequireDefault(require(\"react-select\"));\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _lodash = require(\"lodash\");\n\nvar _MenuList = _interopRequireDefault(require(\"./MenuList\"));\n\nvar _getTrad = _interopRequireDefault(require(\"../../utils/getTrad\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar AllowedTypesSelect = function AllowedTypesSelect(_ref) {\n  var name = _ref.name,\n      changeMediaAllowedTypes = _ref.changeMediaAllowedTypes,\n      styles = _ref.styles,\n      value = _ref.value;\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      formatMessage = _useGlobalContext.formatMessage; // Create a ref in order to access the StateManager\n  // So we can close the menu after clicking on a menu item\n  // This allows us to get rid of the menuIsOpen state management\n  // So we let the custom components taking care of it\n\n\n  var ref = (0, _react.useRef)();\n  /* eslint-disable indent */\n\n  var displayedValue = value === null || value.length === 0 ? formatMessage({\n    id: (0, _getTrad[\"default\"])('form.attribute.media.allowed-types.none')\n  }) : value.sort().map(function (v) {\n    return (0, _lodash.upperFirst)(v);\n  }).join(', ');\n  /* eslint-enable indent */\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_reactSelect[\"default\"], {\n    components: {\n      MenuList: _MenuList[\"default\"]\n    },\n    isClearable: false,\n    isSearchable: false,\n    name: name,\n    changeMediaAllowedTypes: changeMediaAllowedTypes,\n    ref: ref,\n    refState: ref,\n    styles: styles,\n    value: {\n      label: displayedValue,\n      value: value || ''\n    }\n  });\n};\n\nAllowedTypesSelect.defaultProps = {\n  value: null\n};\nAllowedTypesSelect.propTypes = {\n  changeMediaAllowedTypes: _propTypes[\"default\"].func.isRequired,\n  name: _propTypes[\"default\"].string.isRequired,\n  styles: _propTypes[\"default\"].object.isRequired,\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].array])\n};\nvar _default = AllowedTypesSelect;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-type-builder/admin/src/components/AllowedTypesSelect/index.js"],"names":["AllowedTypesSelect","name","changeMediaAllowedTypes","styles","value","formatMessage","ref","displayedValue","length","id","sort","map","v","join","MenuList","label","defaultProps","propTypes","PropTypes","func","isRequired","string","object","oneOfType","array"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,OAAsD;AAAA,MAAnDC,IAAmD,QAAnDA,IAAmD;AAAA,MAA7CC,uBAA6C,QAA7CA,uBAA6C;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAC/E,0BAA0B,2CAA1B;AAAA,MAAQC,aAAR,qBAAQA,aAAR,CAD+E,CAE/E;AACA;AACA;AACA;;;AACA,MAAMC,GAAG,GAAG,oBAAZ;AAEA;;AAEA,MAAMC,cAAc,GAClBH,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACI,MAAN,KAAiB,CAAnC,GACIH,aAAa,CAAC;AAAEI,IAAAA,EAAE,EAAE,yBAAQ,yCAAR;AAAN,GAAD,CADjB,GAEIL,KAAK,CACFM,IADH,GAEGC,GAFH,CAEO,UAAAC,CAAC;AAAA,WAAI,wBAAWA,CAAX,CAAJ;AAAA,GAFR,EAGGC,IAHH,CAGQ,IAHR,CAHN;AAQA;;AAEA,sBACE,gCAAC,uBAAD;AACE,IAAA,UAAU,EAAE;AAAEC,MAAAA,QAAQ,EAARA;AAAF,KADd;AAEE,IAAA,WAAW,EAAE,KAFf;AAGE,IAAA,YAAY,EAAE,KAHhB;AAIE,IAAA,IAAI,EAAEb,IAJR;AAKE,IAAA,uBAAuB,EAAEC,uBAL3B;AAME,IAAA,GAAG,EAAEI,GANP;AAOE,IAAA,QAAQ,EAAEA,GAPZ;AAQE,IAAA,MAAM,EAAEH,MARV;AASE,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAER,cAAT;AAAyBH,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAzC;AATT,IADF;AAaD,CAjCD;;AAmCAJ,kBAAkB,CAACgB,YAAnB,GAAkC;AAChCZ,EAAAA,KAAK,EAAE;AADyB,CAAlC;AAIAJ,kBAAkB,CAACiB,SAAnB,GAA+B;AAC7Bf,EAAAA,uBAAuB,EAAEgB,sBAAUC,IAAV,CAAeC,UADX;AAE7BnB,EAAAA,IAAI,EAAEiB,sBAAUG,MAAV,CAAiBD,UAFM;AAG7BjB,EAAAA,MAAM,EAAEe,sBAAUI,MAAV,CAAiBF,UAHI;AAI7BhB,EAAAA,KAAK,EAAEc,sBAAUK,SAAV,CAAoB,CAACL,sBAAUI,MAAX,EAAmBJ,sBAAUM,KAA7B,CAApB;AAJsB,CAA/B;eAOexB,kB","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport { useGlobalContext } from 'strapi-helper-plugin';\nimport { upperFirst } from 'lodash';\nimport MenuList from './MenuList';\nimport getTrad from '../../utils/getTrad';\n\nconst AllowedTypesSelect = ({ name, changeMediaAllowedTypes, styles, value }) => {\n  const { formatMessage } = useGlobalContext();\n  // Create a ref in order to access the StateManager\n  // So we can close the menu after clicking on a menu item\n  // This allows us to get rid of the menuIsOpen state management\n  // So we let the custom components taking care of it\n  const ref = useRef();\n\n  /* eslint-disable indent */\n\n  const displayedValue =\n    value === null || value.length === 0\n      ? formatMessage({ id: getTrad('form.attribute.media.allowed-types.none') })\n      : value\n          .sort()\n          .map(v => upperFirst(v))\n          .join(', ');\n\n  /* eslint-enable indent */\n\n  return (\n    <Select\n      components={{ MenuList }}\n      isClearable={false}\n      isSearchable={false}\n      name={name}\n      changeMediaAllowedTypes={changeMediaAllowedTypes}\n      ref={ref}\n      refState={ref}\n      styles={styles}\n      value={{ label: displayedValue, value: value || '' }}\n    />\n  );\n};\n\nAllowedTypesSelect.defaultProps = {\n  value: null,\n};\n\nAllowedTypesSelect.propTypes = {\n  changeMediaAllowedTypes: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  styles: PropTypes.object.isRequired,\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nexport default AllowedTypesSelect;\n"]},"metadata":{},"sourceType":"script"}