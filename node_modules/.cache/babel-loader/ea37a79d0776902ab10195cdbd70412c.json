{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nvar _lodash = require(\"lodash\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _hooks = require(\"../../../hooks\");\n\nfunction useSelect(_ref) {\n  var isFromDynamicZone = _ref.isFromDynamicZone,\n      name = _ref.name;\n\n  var _useContentManagerEdi = (0, _strapiHelperPlugin.useContentManagerEditViewDataManager)(),\n      createActionAllowedFields = _useContentManagerEdi.createActionAllowedFields,\n      isCreatingEntry = _useContentManagerEdi.isCreatingEntry,\n      modifiedData = _useContentManagerEdi.modifiedData,\n      removeComponentFromField = _useContentManagerEdi.removeComponentFromField,\n      readActionAllowedFields = _useContentManagerEdi.readActionAllowedFields,\n      updateActionAllowedFields = _useContentManagerEdi.updateActionAllowedFields;\n\n  var _useContentTypeLayout = (0, _hooks.useContentTypeLayout)(),\n      contentType = _useContentTypeLayout.contentType; // This is used for the readonly mode when updating an entry\n\n\n  var allDynamicZoneFields = (0, _react.useMemo)(function () {\n    var attributes = (0, _lodash.get)(contentType, ['attributes'], {});\n    var dynamicZoneFields = Object.keys(attributes).filter(function (attrName) {\n      return (0, _lodash.get)(attributes, [attrName, 'type'], '') === 'dynamiczone';\n    });\n    return dynamicZoneFields;\n  }, [contentType]);\n  var allowedFields = (0, _react.useMemo)(function () {\n    return isCreatingEntry ? createActionAllowedFields : updateActionAllowedFields;\n  }, [isCreatingEntry, createActionAllowedFields, updateActionAllowedFields]);\n  var componentValue = (0, _lodash.get)(modifiedData, name, null);\n  var compoName = (0, _react.useMemo)(function () {\n    return (0, _utils.getFieldName)(name);\n  }, [name]);\n  var hasChildrenAllowedFields = (0, _react.useMemo)(function () {\n    if (isFromDynamicZone && isCreatingEntry) {\n      return true;\n    }\n\n    var includedDynamicZoneFields = allowedFields.filter(function (name) {\n      return name === compoName[0];\n    });\n\n    if (includedDynamicZoneFields.length > 0) {\n      return true;\n    }\n\n    var relatedChildrenAllowedFields = allowedFields.map(function (fieldName) {\n      return fieldName.split('.');\n    }).filter(function (fieldName) {\n      if (fieldName.length < compoName.length) {\n        return false;\n      }\n\n      var joined = (0, _lodash.take)(fieldName, compoName.length).join('.');\n      return joined === compoName.join('.');\n    });\n    return relatedChildrenAllowedFields.length > 0;\n  }, [isFromDynamicZone, isCreatingEntry, allowedFields, compoName]); // This is used only when updating an entry\n\n  var hasChildrenReadableFields = (0, _react.useMemo)(function () {\n    if (isFromDynamicZone) {\n      return true;\n    }\n\n    if (allDynamicZoneFields.includes(compoName[0])) {\n      return true;\n    }\n\n    var allowedFields = isCreatingEntry ? [] : readActionAllowedFields;\n    var relatedChildrenAllowedFields = allowedFields.map(function (fieldName) {\n      return fieldName.split('.');\n    }).filter(function (fieldName) {\n      if (fieldName.length < compoName.length) {\n        return false;\n      }\n\n      var joined = (0, _lodash.take)(fieldName, compoName.length).join('.');\n      return joined === compoName.join('.');\n    });\n    return relatedChildrenAllowedFields.length > 0;\n  }, [isFromDynamicZone, allDynamicZoneFields, compoName, isCreatingEntry, readActionAllowedFields]);\n  var isReadOnly = (0, _react.useMemo)(function () {\n    if (isCreatingEntry) {\n      return false;\n    }\n\n    if (hasChildrenAllowedFields) {\n      return false;\n    }\n\n    return hasChildrenReadableFields;\n  }, [hasChildrenAllowedFields, hasChildrenReadableFields, isCreatingEntry]);\n  return {\n    hasChildrenAllowedFields: hasChildrenAllowedFields,\n    hasChildrenReadableFields: hasChildrenReadableFields,\n    isCreatingEntry: isCreatingEntry,\n    isReadOnly: isReadOnly,\n    removeComponentFromField: removeComponentFromField,\n    componentValue: componentValue\n  };\n}\n\nvar _default = useSelect;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/components/FieldComponent/utils/select.js"],"names":["useSelect","isFromDynamicZone","name","createActionAllowedFields","isCreatingEntry","modifiedData","removeComponentFromField","readActionAllowedFields","updateActionAllowedFields","contentType","allDynamicZoneFields","attributes","dynamicZoneFields","Object","keys","filter","attrName","allowedFields","componentValue","compoName","hasChildrenAllowedFields","includedDynamicZoneFields","length","relatedChildrenAllowedFields","map","fieldName","split","joined","join","hasChildrenReadableFields","includes","isReadOnly"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { get, take } from 'lodash';\nimport { useContentManagerEditViewDataManager } from 'strapi-helper-plugin';\n\nimport { getFieldName } from '../../../utils';\nimport { useContentTypeLayout } from '../../../hooks';\n\nfunction useSelect({ isFromDynamicZone, name }) {\n  const {\n    createActionAllowedFields,\n    isCreatingEntry,\n    modifiedData,\n    removeComponentFromField,\n    readActionAllowedFields,\n    updateActionAllowedFields,\n  } = useContentManagerEditViewDataManager();\n  const { contentType } = useContentTypeLayout();\n\n  // This is used for the readonly mode when updating an entry\n  const allDynamicZoneFields = useMemo(() => {\n    const attributes = get(contentType, ['attributes'], {});\n\n    const dynamicZoneFields = Object.keys(attributes).filter(attrName => {\n      return get(attributes, [attrName, 'type'], '') === 'dynamiczone';\n    });\n\n    return dynamicZoneFields;\n  }, [contentType]);\n\n  const allowedFields = useMemo(() => {\n    return isCreatingEntry ? createActionAllowedFields : updateActionAllowedFields;\n  }, [isCreatingEntry, createActionAllowedFields, updateActionAllowedFields]);\n\n  const componentValue = get(modifiedData, name, null);\n  const compoName = useMemo(() => {\n    return getFieldName(name);\n  }, [name]);\n\n  const hasChildrenAllowedFields = useMemo(() => {\n    if (isFromDynamicZone && isCreatingEntry) {\n      return true;\n    }\n\n    const includedDynamicZoneFields = allowedFields.filter(name => name === compoName[0]);\n\n    if (includedDynamicZoneFields.length > 0) {\n      return true;\n    }\n\n    const relatedChildrenAllowedFields = allowedFields\n      .map(fieldName => {\n        return fieldName.split('.');\n      })\n      .filter(fieldName => {\n        if (fieldName.length < compoName.length) {\n          return false;\n        }\n\n        const joined = take(fieldName, compoName.length).join('.');\n\n        return joined === compoName.join('.');\n      });\n\n    return relatedChildrenAllowedFields.length > 0;\n  }, [isFromDynamicZone, isCreatingEntry, allowedFields, compoName]);\n\n  // This is used only when updating an entry\n  const hasChildrenReadableFields = useMemo(() => {\n    if (isFromDynamicZone) {\n      return true;\n    }\n    if (allDynamicZoneFields.includes(compoName[0])) {\n      return true;\n    }\n\n    const allowedFields = isCreatingEntry ? [] : readActionAllowedFields;\n\n    const relatedChildrenAllowedFields = allowedFields\n      .map(fieldName => {\n        return fieldName.split('.');\n      })\n      .filter(fieldName => {\n        if (fieldName.length < compoName.length) {\n          return false;\n        }\n\n        const joined = take(fieldName, compoName.length).join('.');\n\n        return joined === compoName.join('.');\n      });\n\n    return relatedChildrenAllowedFields.length > 0;\n  }, [\n    isFromDynamicZone,\n    allDynamicZoneFields,\n    compoName,\n    isCreatingEntry,\n    readActionAllowedFields,\n  ]);\n\n  const isReadOnly = useMemo(() => {\n    if (isCreatingEntry) {\n      return false;\n    }\n\n    if (hasChildrenAllowedFields) {\n      return false;\n    }\n\n    return hasChildrenReadableFields;\n  }, [hasChildrenAllowedFields, hasChildrenReadableFields, isCreatingEntry]);\n\n  return {\n    hasChildrenAllowedFields,\n    hasChildrenReadableFields,\n    isCreatingEntry,\n    isReadOnly,\n    removeComponentFromField,\n    componentValue,\n  };\n}\n\nexport default useSelect;\n"]},"metadata":{},"sourceType":"script"}