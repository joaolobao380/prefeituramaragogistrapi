{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = require(\"react\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _utils = require(\"../../utils\");\n\nvar _constants = require(\"../constants\");\n\nvar editLocale = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(id, payload) {\n    var data;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return (0, _strapiHelperPlugin.request)(\"/i18n/locales/\".concat(id), {\n              method: 'PUT',\n              body: payload\n            });\n\n          case 3:\n            data = _context.sent;\n            strapi.notification.toggle({\n              type: 'success',\n              message: {\n                id: (0, _utils.getTrad)('Settings.locales.modal.edit.success')\n              }\n            });\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            strapi.notification.toggle({\n              type: 'warning',\n              message: {\n                id: 'notification.error'\n              }\n            });\n            return _context.abrupt(\"return\", null);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function editLocale(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar useEditLocale = function useEditLocale() {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  var modifyLocale = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(id, payload) {\n      var editedLocale;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.next = 3;\n              return editLocale(id, payload);\n\n            case 3:\n              editedLocale = _context2.sent;\n              dispatch({\n                type: _constants.UPDATE_LOCALE,\n                editedLocale: editedLocale\n              });\n              setLoading(false);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function modifyLocale(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return {\n    isEditing: isLoading,\n    editLocale: modifyLocale\n  };\n};\n\nvar _default = useEditLocale;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-i18n/admin/src/hooks/useEditLocale/index.js"],"names":["editLocale","id","payload","method","body","data","strapi","notification","toggle","type","message","useEditLocale","isLoading","setLoading","dispatch","modifyLocale","editedLocale","UPDATE_LOCALE","isEditing"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,UAAU;AAAA,2FAAG,iBAAOC,EAAP,EAAWC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEI,yDAAyBD,EAAzB,GAA+B;AAChDE,cAAAA,MAAM,EAAE,KADwC;AAEhDC,cAAAA,IAAI,EAAEF;AAF0C,aAA/B,CAFJ;;AAAA;AAETG,YAAAA,IAFS;AAOfC,YAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBC,cAAAA,IAAI,EAAE,SADmB;AAEzBC,cAAAA,OAAO,EAAE;AAAET,gBAAAA,EAAE,EAAE,oBAAQ,qCAAR;AAAN;AAFgB,aAA3B;AAPe,6CAYRI,IAZQ;;AAAA;AAAA;AAAA;AAcfC,YAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBC,cAAAA,IAAI,EAAE,SADmB;AAEzBC,cAAAA,OAAO,EAAE;AAAET,gBAAAA,EAAE,EAAE;AAAN;AAFgB,aAA3B;AAde,6CAmBR,IAnBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVD,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAuBA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,kBAAgC,qBAAS,KAAT,CAAhC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,UAAlB;;AACA,MAAMC,QAAQ,GAAG,8BAAjB;;AAEA,MAAMC,YAAY;AAAA,8FAAG,kBAAOd,EAAP,EAAWC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBW,cAAAA,UAAU,CAAC,IAAD,CAAV;AADmB;AAAA,qBAGQb,UAAU,CAACC,EAAD,EAAKC,OAAL,CAHlB;;AAAA;AAGbc,cAAAA,YAHa;AAKnBF,cAAAA,QAAQ,CAAC;AAAEL,gBAAAA,IAAI,EAAEQ,wBAAR;AAAuBD,gBAAAA,YAAY,EAAZA;AAAvB,eAAD,CAAR;AACAH,cAAAA,UAAU,CAAC,KAAD,CAAV;;AANmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZE,YAAY;AAAA;AAAA;AAAA,KAAlB;;AASA,SAAO;AAAEG,IAAAA,SAAS,EAAEN,SAAb;AAAwBZ,IAAAA,UAAU,EAAEe;AAApC,GAAP;AACD,CAdD;;eAgBeJ,a","sourcesContent":["import { useState } from 'react';\nimport { request } from 'strapi-helper-plugin';\nimport { useDispatch } from 'react-redux';\nimport { getTrad } from '../../utils';\nimport { UPDATE_LOCALE } from '../constants';\n\nconst editLocale = async (id, payload) => {\n  try {\n    const data = await request(`/i18n/locales/${id}`, {\n      method: 'PUT',\n      body: payload,\n    });\n\n    strapi.notification.toggle({\n      type: 'success',\n      message: { id: getTrad('Settings.locales.modal.edit.success') },\n    });\n\n    return data;\n  } catch {\n    strapi.notification.toggle({\n      type: 'warning',\n      message: { id: 'notification.error' },\n    });\n\n    return null;\n  }\n};\n\nconst useEditLocale = () => {\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  const modifyLocale = async (id, payload) => {\n    setLoading(true);\n\n    const editedLocale = await editLocale(id, payload);\n\n    dispatch({ type: UPDATE_LOCALE, editedLocale });\n    setLoading(false);\n  };\n\n  return { isEditing: isLoading, editLocale: modifyLocale };\n};\n\nexport default useEditLocale;\n"]},"metadata":{},"sourceType":"script"}