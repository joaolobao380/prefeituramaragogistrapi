{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar removePasswordFieldsFromData = function removePasswordFieldsFromData(data, contentTypeSchema, componentSchema) {\n  var recursiveCleanData = function recursiveCleanData(data, schema) {\n    return Object.keys(data).reduce(function (acc, current) {\n      var attrType = (0, _strapiHelperPlugin.getType)(schema, current);\n      var value = (0, _lodash.get)(data, current);\n      var component = (0, _strapiHelperPlugin.getOtherInfos)(schema, [current, 'component']);\n      var isRepeatable = (0, _strapiHelperPlugin.getOtherInfos)(schema, [current, 'repeatable']);\n\n      if (attrType === 'dynamiczone') {\n        acc[current] = value.map(function (componentValue) {\n          var subCleanedData = recursiveCleanData(componentValue, componentSchema[componentValue.__component]);\n          return subCleanedData;\n        });\n        return acc;\n      }\n\n      if (attrType === 'component') {\n        if (isRepeatable) {\n          /* eslint-disable indent */\n          acc[current] = value ? value.map(function (compoData) {\n            var subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n            return subCleanedData;\n          }) : value;\n          /* eslint-enable indent */\n        } else {\n          acc[current] = value ? recursiveCleanData(value, componentSchema[component]) : value;\n        }\n\n        return acc;\n      }\n\n      if (attrType !== 'password') {\n        acc[current] = value;\n      }\n\n      return acc;\n    }, {});\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\nvar _default = removePasswordFieldsFromData;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/utils/removePasswordFieldsFromData.js"],"names":["removePasswordFieldsFromData","data","contentTypeSchema","componentSchema","recursiveCleanData","schema","Object","keys","reduce","acc","current","attrType","value","component","isRepeatable","map","componentValue","subCleanedData","__component","compoData"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAMA,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,IAAD,EAAOC,iBAAP,EAA0BC,eAA1B,EAA8C;AACjF,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACH,IAAD,EAAOI,MAAP,EAAkB;AAC3C,WAAOC,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,MAAlB,CAAyB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAChD,UAAMC,QAAQ,GAAG,iCAAQN,MAAR,EAAgBK,OAAhB,CAAjB;AACA,UAAME,KAAK,GAAG,iBAAIX,IAAJ,EAAUS,OAAV,CAAd;AACA,UAAMG,SAAS,GAAG,uCAAcR,MAAd,EAAsB,CAACK,OAAD,EAAU,WAAV,CAAtB,CAAlB;AACA,UAAMI,YAAY,GAAG,uCAAcT,MAAd,EAAsB,CAACK,OAAD,EAAU,YAAV,CAAtB,CAArB;;AAEA,UAAIC,QAAQ,KAAK,aAAjB,EAAgC;AAC9BF,QAAAA,GAAG,CAACC,OAAD,CAAH,GAAeE,KAAK,CAACG,GAAN,CAAU,UAAAC,cAAc,EAAI;AACzC,cAAMC,cAAc,GAAGb,kBAAkB,CACvCY,cADuC,EAEvCb,eAAe,CAACa,cAAc,CAACE,WAAhB,CAFwB,CAAzC;AAKA,iBAAOD,cAAP;AACD,SAPc,CAAf;AASA,eAAOR,GAAP;AACD;;AAED,UAAIE,QAAQ,KAAK,WAAjB,EAA8B;AAC5B,YAAIG,YAAJ,EAAkB;AAChB;AACAL,UAAAA,GAAG,CAACC,OAAD,CAAH,GAAeE,KAAK,GAChBA,KAAK,CAACG,GAAN,CAAU,UAAAI,SAAS,EAAI;AACrB,gBAAMF,cAAc,GAAGb,kBAAkB,CAACe,SAAD,EAAYhB,eAAe,CAACU,SAAD,CAA3B,CAAzC;AAEA,mBAAOI,cAAP;AACD,WAJD,CADgB,GAMhBL,KANJ;AAOA;AACD,SAVD,MAUO;AACLH,UAAAA,GAAG,CAACC,OAAD,CAAH,GAAeE,KAAK,GAAGR,kBAAkB,CAACQ,KAAD,EAAQT,eAAe,CAACU,SAAD,CAAvB,CAArB,GAA2DD,KAA/E;AACD;;AAED,eAAOH,GAAP;AACD;;AAED,UAAIE,QAAQ,KAAK,UAAjB,EAA6B;AAC3BF,QAAAA,GAAG,CAACC,OAAD,CAAH,GAAeE,KAAf;AACD;;AAED,aAAOH,GAAP;AACD,KA1CM,EA0CJ,EA1CI,CAAP;AA2CD,GA5CD;;AA8CA,SAAOL,kBAAkB,CAACH,IAAD,EAAOC,iBAAP,CAAzB;AACD,CAhDD;;eAkDeF,4B","sourcesContent":["import { get } from 'lodash';\nimport { getType, getOtherInfos } from 'strapi-helper-plugin';\n\nconst removePasswordFieldsFromData = (data, contentTypeSchema, componentSchema) => {\n  const recursiveCleanData = (data, schema) => {\n    return Object.keys(data).reduce((acc, current) => {\n      const attrType = getType(schema, current);\n      const value = get(data, current);\n      const component = getOtherInfos(schema, [current, 'component']);\n      const isRepeatable = getOtherInfos(schema, [current, 'repeatable']);\n\n      if (attrType === 'dynamiczone') {\n        acc[current] = value.map(componentValue => {\n          const subCleanedData = recursiveCleanData(\n            componentValue,\n            componentSchema[componentValue.__component]\n          );\n\n          return subCleanedData;\n        });\n\n        return acc;\n      }\n\n      if (attrType === 'component') {\n        if (isRepeatable) {\n          /* eslint-disable indent */\n          acc[current] = value\n            ? value.map(compoData => {\n                const subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n\n                return subCleanedData;\n              })\n            : value;\n          /* eslint-enable indent */\n        } else {\n          acc[current] = value ? recursiveCleanData(value, componentSchema[component]) : value;\n        }\n\n        return acc;\n      }\n\n      if (attrType !== 'password') {\n        acc[current] = value;\n      }\n\n      return acc;\n    }, {});\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\nexport default removePasswordFieldsFromData;\n"]},"metadata":{},"sourceType":"script"}