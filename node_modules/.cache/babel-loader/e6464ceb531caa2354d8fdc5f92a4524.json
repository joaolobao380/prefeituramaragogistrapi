{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactFastCompare = _interopRequireDefault(require(\"react-fast-compare\"));\n\nvar _ListView = _interopRequireDefault(require(\"../ListView\"));\n\nvar _utils = require(\"../../utils\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Permissions = function Permissions(props) {\n  var viewPermissions = (0, _react.useMemo)(function () {\n    return (0, _utils.generatePermissionsObject)(props.slug);\n  }, [props.slug]);\n\n  var _useUserPermissions = (0, _strapiHelperPlugin.useUserPermissions)(viewPermissions, props.permissions),\n      isLoading = _useUserPermissions.isLoading,\n      allowedActions = _useUserPermissions.allowedActions;\n\n  if (isLoading) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.LoadingIndicatorPage, null);\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_ListView[\"default\"], (0, _extends2[\"default\"])({}, props, allowedActions));\n};\n\nPermissions.defaultProps = {\n  permissions: []\n};\nPermissions.propTypes = {\n  permissions: _propTypes[\"default\"].array,\n  slug: _propTypes[\"default\"].string.isRequired\n}; // This avoids the components to rerender on params change causing multiple requests to be fired\n\nvar _default = /*#__PURE__*/(0, _react.memo)(Permissions, _reactFastCompare[\"default\"]);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-content-manager/admin/src/containers/ListViewLayoutManager/Permissions.js"],"names":["Permissions","props","viewPermissions","slug","permissions","isLoading","allowedActions","defaultProps","propTypes","PropTypes","array","string","isRequired","isEqual"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,MAAMC,eAAe,GAAG,oBAAQ;AAAA,WAAM,sCAA0BD,KAAK,CAACE,IAAhC,CAAN;AAAA,GAAR,EAAqD,CAACF,KAAK,CAACE,IAAP,CAArD,CAAxB;;AACA,4BAAsC,4CAAmBD,eAAnB,EAAoCD,KAAK,CAACG,WAA1C,CAAtC;AAAA,MAAQC,SAAR,uBAAQA,SAAR;AAAA,MAAmBC,cAAnB,uBAAmBA,cAAnB;;AAEA,MAAID,SAAJ,EAAe;AACb,wBAAO,gCAAC,wCAAD,OAAP;AACD;;AAED,sBAAO,gCAAC,oBAAD,gCAAcJ,KAAd,EAAyBK,cAAzB,EAAP;AACD,CATD;;AAWAN,WAAW,CAACO,YAAZ,GAA2B;AACzBH,EAAAA,WAAW,EAAE;AADY,CAA3B;AAIAJ,WAAW,CAACQ,SAAZ,GAAwB;AACtBJ,EAAAA,WAAW,EAAEK,sBAAUC,KADD;AAEtBP,EAAAA,IAAI,EAAEM,sBAAUE,MAAV,CAAiBC;AAFD,CAAxB,C,CAKA;;4BACe,iBAAKZ,WAAL,EAAkBa,4BAAlB,C","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUserPermissions, LoadingIndicatorPage } from 'strapi-helper-plugin';\nimport isEqual from 'react-fast-compare';\nimport ListView from '../ListView';\nimport { generatePermissionsObject } from '../../utils';\n\nconst Permissions = props => {\n  const viewPermissions = useMemo(() => generatePermissionsObject(props.slug), [props.slug]);\n  const { isLoading, allowedActions } = useUserPermissions(viewPermissions, props.permissions);\n\n  if (isLoading) {\n    return <LoadingIndicatorPage />;\n  }\n\n  return <ListView {...props} {...allowedActions} />;\n};\n\nPermissions.defaultProps = {\n  permissions: [],\n};\n\nPermissions.propTypes = {\n  permissions: PropTypes.array,\n  slug: PropTypes.string.isRequired,\n};\n\n// This avoids the components to rerender on params change causing multiple requests to be fired\nexport default memo(Permissions, isEqual);\n"]},"metadata":{},"sourceType":"script"}