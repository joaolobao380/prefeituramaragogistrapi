{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = require(\"react\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _constants = require(\"../constants\");\n\nvar addLocale = /*#__PURE__*/function () {\n  var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref) {\n    var code, name, isDefault, data;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            code = _ref.code, name = _ref.name, isDefault = _ref.isDefault;\n            _context.next = 3;\n            return (0, _strapiHelperPlugin.request)(\"/i18n/locales\", {\n              method: 'POST',\n              body: {\n                name: name,\n                code: code,\n                isDefault: isDefault\n              }\n            });\n\n          case 3:\n            data = _context.sent;\n            strapi.notification.toggle({\n              type: 'success',\n              message: {\n                id: (0, _utils.getTrad)('Settings.locales.modal.create.success')\n              }\n            });\n            return _context.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addLocale(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar useAddLocale = function useAddLocale() {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  var persistLocale = /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(locale) {\n      var newLocale, message;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return addLocale(locale);\n\n            case 4:\n              newLocale = _context2.sent;\n              dispatch({\n                type: _constants.ADD_LOCALE,\n                newLocale: newLocale\n              });\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              message = (0, _get[\"default\"])(_context2.t0, 'response.payload.message', null);\n\n              if (message && message.includes('already exists')) {\n                strapi.notification.toggle({\n                  type: 'warning',\n                  message: {\n                    id: (0, _utils.getTrad)('Settings.locales.modal.create.alreadyExist')\n                  }\n                });\n              } else {\n                strapi.notification.toggle({\n                  type: 'warning',\n                  message: {\n                    id: 'notification.error'\n                  }\n                });\n              }\n\n              throw _context2.t0;\n\n            case 13:\n              _context2.prev = 13;\n              setLoading(false);\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8, 13, 16]]);\n    }));\n\n    return function persistLocale(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    isAdding: isLoading,\n    addLocale: persistLocale\n  };\n};\n\nvar _default = useAddLocale;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/plugins/strapi-plugin-i18n/admin/src/hooks/useAddLocale/index.js"],"names":["addLocale","code","name","isDefault","method","body","data","strapi","notification","toggle","type","message","id","useAddLocale","isLoading","setLoading","dispatch","persistLocale","locale","newLocale","ADD_LOCALE","includes","isAdding"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,SAAS;AAAA,4FAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,IAAT,QAASA,IAAT,EAAeC,IAAf,QAAeA,IAAf,EAAqBC,SAArB,QAAqBA,SAArB;AAAA;AAAA,mBACG,kDAAyB;AAC1CC,cAAAA,MAAM,EAAE,MADkC;AAE1CC,cAAAA,IAAI,EAAE;AACJH,gBAAAA,IAAI,EAAJA,IADI;AAEJD,gBAAAA,IAAI,EAAJA,IAFI;AAGJE,gBAAAA,SAAS,EAATA;AAHI;AAFoC,aAAzB,CADH;;AAAA;AACVG,YAAAA,IADU;AAUhBC,YAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBC,cAAAA,IAAI,EAAE,SADmB;AAEzBC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,EAAE,EAAE,oBAAQ,uCAAR;AAAN;AAFgB,aAA3B;AAVgB,6CAeTN,IAfS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATN,SAAS;AAAA;AAAA;AAAA,GAAf;;AAkBA,IAAMa,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,kBAAgC,qBAAS,KAAT,CAAhC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,UAAlB;;AACA,MAAMC,QAAQ,GAAG,8BAAjB;;AAEA,MAAMC,aAAa;AAAA,8FAAG,kBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBH,cAAAA,UAAU,CAAC,IAAD,CAAV;AADoB;AAAA;AAAA,qBAIMf,SAAS,CAACkB,MAAD,CAJf;;AAAA;AAIZC,cAAAA,SAJY;AAKlBH,cAAAA,QAAQ,CAAC;AAAEN,gBAAAA,IAAI,EAAEU,qBAAR;AAAoBD,gBAAAA,SAAS,EAATA;AAApB,eAAD,CAAR;AALkB;AAAA;;AAAA;AAAA;AAAA;AAOZR,cAAAA,OAPY,GAOF,mCAAO,0BAAP,EAAmC,IAAnC,CAPE;;AASlB,kBAAIA,OAAO,IAAIA,OAAO,CAACU,QAAR,CAAiB,gBAAjB,CAAf,EAAmD;AACjDd,gBAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBC,kBAAAA,IAAI,EAAE,SADmB;AAEzBC,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,EAAE,EAAE,oBAAQ,4CAAR;AAAN;AAFgB,iBAA3B;AAID,eALD,MAKO;AACLL,gBAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBC,kBAAAA,IAAI,EAAE,SADmB;AAEzBC,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,EAAE,EAAE;AAAN;AAFgB,iBAA3B;AAID;;AAnBiB;;AAAA;AAAA;AAuBlBG,cAAAA,UAAU,CAAC,KAAD,CAAV;AAvBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbE,aAAa;AAAA;AAAA;AAAA,KAAnB;;AA2BA,SAAO;AAAEK,IAAAA,QAAQ,EAAER,SAAZ;AAAuBd,IAAAA,SAAS,EAAEiB;AAAlC,GAAP;AACD,CAhCD;;eAkCeJ,Y","sourcesContent":["import { useState } from 'react';\nimport { request } from 'strapi-helper-plugin';\nimport { useDispatch } from 'react-redux';\nimport get from 'lodash/get';\nimport { getTrad } from '../../utils';\nimport { ADD_LOCALE } from '../constants';\n\nconst addLocale = async ({ code, name, isDefault }) => {\n  const data = await request(`/i18n/locales`, {\n    method: 'POST',\n    body: {\n      name,\n      code,\n      isDefault,\n    },\n  });\n\n  strapi.notification.toggle({\n    type: 'success',\n    message: { id: getTrad('Settings.locales.modal.create.success') },\n  });\n\n  return data;\n};\n\nconst useAddLocale = () => {\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  const persistLocale = async locale => {\n    setLoading(true);\n\n    try {\n      const newLocale = await addLocale(locale);\n      dispatch({ type: ADD_LOCALE, newLocale });\n    } catch (e) {\n      const message = get(e, 'response.payload.message', null);\n\n      if (message && message.includes('already exists')) {\n        strapi.notification.toggle({\n          type: 'warning',\n          message: { id: getTrad('Settings.locales.modal.create.alreadyExist') },\n        });\n      } else {\n        strapi.notification.toggle({\n          type: 'warning',\n          message: { id: 'notification.error' },\n        });\n      }\n\n      throw e;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isAdding: isLoading, addLocale: persistLocale };\n};\n\nexport default useAddLocale;\n"]},"metadata":{},"sourceType":"script"}