{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../../utils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * We need to format the actions to an array of object that matches the ConditionsModal action's props\n * @param {array<object>} actions\n * @config {string} displayName the displayName of the action\n * @config {string} action requied, the name of the action\n * @param {object} modifiedData\n * @param {array} pathToData\n */\nvar formatActions = function formatActions(actions, modifiedData, pathToData) {\n  return actions.map(function (action) {\n    var checkboxName = [].concat((0, _toConsumableArray2[\"default\"])(pathToData), [action.action, 'properties', 'enabled']);\n    var checkboxValue = (0, _lodash.get)(modifiedData, checkboxName, false);\n    var conditionValue = (0, _lodash.get)(modifiedData, [].concat((0, _toConsumableArray2[\"default\"])(pathToData), [action.action, 'conditions']), {});\n    var hasConditions = (0, _utils.createArrayOfValues)(conditionValue).some(function (val) {\n      return val;\n    });\n    return _objectSpread(_objectSpread({}, action), {}, {\n      isDisplayed: checkboxValue,\n      checkboxName: checkboxName.join('..'),\n      hasSomeActionsSelected: checkboxValue,\n      value: checkboxValue,\n      hasConditions: hasConditions,\n      label: action.displayName,\n      actionId: action.action,\n      pathToConditionsObject: [].concat((0, _toConsumableArray2[\"default\"])(pathToData), [action.action])\n    });\n  });\n};\n\nvar _default = formatActions;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/joaovictorlobao/prefeituramaragogistrapi/.cache/admin/src/components/Roles/PluginsAndSettings/SubCategory/utils/formatActions.js"],"names":["formatActions","actions","modifiedData","pathToData","map","action","checkboxName","checkboxValue","conditionValue","hasConditions","some","val","isDisplayed","join","hasSomeActionsSelected","value","label","displayName","actionId","pathToConditionsObject"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,YAAV,EAAwBC,UAAxB,EAAuC;AAC3D,SAAOF,OAAO,CAACG,GAAR,CAAY,UAAAC,MAAM,EAAI;AAC3B,QAAMC,YAAY,iDAAOH,UAAP,IAAmBE,MAAM,CAACA,MAA1B,EAAkC,YAAlC,EAAgD,SAAhD,EAAlB;AACA,QAAME,aAAa,GAAG,iBAAIL,YAAJ,EAAkBI,YAAlB,EAAgC,KAAhC,CAAtB;AACA,QAAME,cAAc,GAAG,iBAAIN,YAAJ,gDAAsBC,UAAtB,IAAkCE,MAAM,CAACA,MAAzC,EAAiD,YAAjD,IAAgE,EAAhE,CAAvB;AACA,QAAMI,aAAa,GAAG,gCAAoBD,cAApB,EAAoCE,IAApC,CAAyC,UAAAC,GAAG;AAAA,aAAIA,GAAJ;AAAA,KAA5C,CAAtB;AAEA,2CACKN,MADL;AAEEO,MAAAA,WAAW,EAAEL,aAFf;AAGED,MAAAA,YAAY,EAAEA,YAAY,CAACO,IAAb,CAAkB,IAAlB,CAHhB;AAIEC,MAAAA,sBAAsB,EAAEP,aAJ1B;AAKEQ,MAAAA,KAAK,EAAER,aALT;AAMEE,MAAAA,aAAa,EAAbA,aANF;AAOEO,MAAAA,KAAK,EAAEX,MAAM,CAACY,WAPhB;AAQEC,MAAAA,QAAQ,EAAEb,MAAM,CAACA,MARnB;AASEc,MAAAA,sBAAsB,gDAAMhB,UAAN,IAAkBE,MAAM,CAACA,MAAzB;AATxB;AAWD,GAjBM,CAAP;AAkBD,CAnBD;;eAoBeL,a","sourcesContent":["import { get } from 'lodash';\nimport { createArrayOfValues } from '../../../utils';\n\n/**\n * We need to format the actions to an array of object that matches the ConditionsModal action's props\n * @param {array<object>} actions\n * @config {string} displayName the displayName of the action\n * @config {string} action requied, the name of the action\n * @param {object} modifiedData\n * @param {array} pathToData\n */\nconst formatActions = (actions, modifiedData, pathToData) => {\n  return actions.map(action => {\n    const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\n    const checkboxValue = get(modifiedData, checkboxName, false);\n    const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\n    const hasConditions = createArrayOfValues(conditionValue).some(val => val);\n\n    return {\n      ...action,\n      isDisplayed: checkboxValue,\n      checkboxName: checkboxName.join('..'),\n      hasSomeActionsSelected: checkboxValue,\n      value: checkboxValue,\n      hasConditions,\n      label: action.displayName,\n      actionId: action.action,\n      pathToConditionsObject: [...pathToData, action.action],\n    };\n  });\n};\nexport default formatActions;\n"]},"metadata":{},"sourceType":"script"}